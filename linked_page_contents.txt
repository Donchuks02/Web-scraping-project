Python Programming Language - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Python Programming Language
The Python programming language is an
open source
,
widely-used
tool for
creating software applications.
What is Python used for?
Python is often used to
build
and
deploy
web applications
and
web APIs
. Python
can also analyze and visualize
data
and
test software
, even if the software being
tested was not written in Python.
Language concepts
Python has several useful programming language concepts that are less
frequently found in other languages. These concepts include:
generators
comprehensions
application dependency
handling via
the built-in
venv
(
as of Python 3.3
) and
pip
(
as of Python 3.4
)
commands
Generators
Generators are a Python core language construct that allow a function's return
value to behave as an iterator. A generator can allow more efficient
memory usage by allocating and deallocating memory during the context of a
large number of iterations. Generators are defined in
PEP255
and included in the
language as of Python 2.2 in 2001.
Comprehensions
Comprehensions are a Python language construct for concisely creating data
in lists, dictionaries and sets. List comprehensions are included in Python 2
while dictionary and set comprehensions were introduced to the language in
Python 3.
Why are comprehensions important?
Comprehensions are a more clear syntax for populating conditional data in the
core Python data structures. Creating data without comprehensions often
involves nested loops with conditionals that can be difficult for code
readers to properly evaluate.
Example comprehensions code
List comprehension:
>>>
double_digit_evens
= [
e
*2 for
e
in
range
(
5, 50
)
]
>>>
double_digit_evens
[10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]
Set comprehension:
>>>
double_digit_odds
= {
e
*2+1 for
e
in
range
(
5, 50
)
}
{11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99}
Dictionary comprehension:
>>> {
e
:
e
*10 for
e
in
range
(
1, 11
)
}
{1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60, 7: 70, 8: 80, 9: 90, 10: 100}
General Python language resources
Python Module of the Week
is a tour
through the Python standard library.
A Python interpreter written in Python
is incredibly meta but really useful for wrapping your head around some
of the lower level stuff going on in the language.
A few things to remember while coding in Python
is a nice collection of good practices to use while building programs
with the language.
Python internals: adding a new statement to Python
Python tricks that you can't live without
is a slideshow by Audrey Roy that goes over code readability, linting,
dependency isolation, and other good Python practices.
Python innards introduction
explains how some of Python's internal execution happens.
What is a metaclass in Python
is one of the best Stack Overflow answers about Python.
Armin Roacher presented
things you didn't know about Python
at PyCon South Africa in 2012.
Python ecosystem resources
There's an entire page on
best Python resources
with links but the following resources are a better fit for when you're past
the very beginner topics.
The
Python Subreddit
rolls up great
Python links and has an active community ready to answer questions from
beginners and advanced Python developers alike.
The blog
Free Python Tips
provides
posts on Python topics as well as news for the Python ecosystem.
Python Books
is a collection of freely
available books on Python, Django, and data analysis.
Python IAQ: Infrequently Asked Questions
is a list of quirky queries on rare Python features and why certain syntax
was or was not built into the language.
A practical introduction to Functional Programming for Python coders
is a good starter for developers looking to learn the functional
programming paradigm side of the language.
Getting Started with the Python Internals
takes a slice of the huge CPython codebase and deconstructs some of
it to see what we can learn about how Python itself is built.
Comprehension resources
Comprehending Pythonâs Comprehensions
is an awesome post by Dan Bader with a slew of examples that explain
how list, dictionary and set comprehensions should be used.
Python List Comprehensions: Explained Visually
explains how the common idiom for iteration became syntactic sugar in
the language itself and how you can use it in your own programs.
The Python 3 Patterns and Idioms site has an overview of
comprehensions
including code examples and diagrams to explain how they work.
Comprehensions in Python the Jedi way
shows off comprehensions with a Star Wars theme to walk through the nuts
and bolts. All examples use Python 3.5.
Idiomatic Python: Comprehensions
explains how Python's comprehensions were inspired by Haskell's list
comprehensions. It also provides clear examples that show how comprehensions
are shorthand for common iteration code, such as copying one list into
another while performing some operation on the contained elements.
List comprehensions in Python
covers what the code for list comprehensions looks like and gives some
example code to show how they work.
Python generator resources
This blog post entitled
Python Generators
specifically focuses on generating dictionaries. It provides a good
introduction for those new to Python.
Generator Expressions in Python: An Introduction
is the best all-around introduction to how to use generators and
provides numerous code examples to learn from.
Python 201: An Intro to Generators
is another short but informative read with example generators code.
Iterators & Generators
provides code examples for these two constructs and some simple explanations
for each one.
Python: Generators - How to use them and the benefits you receive
is a screencast with code that walks through generators in Python.
The question to
Understanding Generators in Python?
on Stack Overflow has an impressive answer that clearly lays out the
code and concepts involved with Python generators.
Generator Tricks for Systems Programmers
provides code examples for using generators. The material was originally
presented in a PyCon workshop for systems programmers but is relevant to
all Python developers working to understand appropriate ways to use
generators.
What do you want to learn about Python?
Show me a list of the best Python learning resources.
What editor should I use to code my Python app?
What are list, dictionary and set comprehensions?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Core Language
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Why Use Python? - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Why Use Python?
Python's expansive library of open source data analysis tools,
web frameworks
,
and testing instruments make its ecosystem one of the largest out of any
programming community.
Python is an accessible language for new programmers because the community
provides many
introductory resources
. The
language is also widely taught in universities and used for working with
beginner-friendly devices such as the
Raspberry Pi
.
If you're learning about why to use Python you should also take a look at
the best Python resources
and read
more about web development
.
Python's programming language popularity
Several programming language popularity rankings exist. While it's
possible to criticize that these guides are not exact, every ranking shows
Python as a top programming language within the top ten, if not the top five
of all languages.
The IEEE ranked Python as the
#1 programming language in 2019
,
which continued its hot streak
after ranking it
#1 in 2018
and 2017.
RedMonk's June 2019 ranking
had Python at #3, which held consistent from previous years' rankings in
2018
and
2017
.
Stack Overflow's community-created question and answer data confirms the
incredible growth of the Python ecosystem
and tries to determine
why it growing so quickly
with their own analysis. In the 2020 Stack Overflow developer survey the
data indicated that
Python was the fastest growing major programming language
and that there is a close alignment between the languages and tools that
developers choose to learn and the usage in developers' professional work.
The
TIOBE Index
a long-running language ranking, has Python moving up the charts to #3,
climbing from #8 just a few years ago.
The
PopularitY of Programming Language
(PYPL), based on leading indicators from Google Trends search keyword
analysis, shows Python at #1.
GitHut
, a visualization of GitHub language popularity,
pegs Python at #3 overall.
These rankings provide a rough measure for language popularity. They are not
intended as a precise measurement tool to determine exactly how many
developers are using a language. However, the aggregate view shows that Python
remains a stable programming language with a growing ecosystem.
Why does the choice of programming language matter?
Programming languages have unique ecosystems, cultures and philosophies
built around them. You will find friction with a community and difficulty
in learning if your approach to programming varies from the philosophy of
the programming language you've selected.
Python's culture values
open source software
,
community involvement with
local, national and international events
and
teaching to new programmers. If those values are also important to you and/or
your organization then Python may be a good fit.
The philosophy for Python is so strongly held that it's even embedded in
the language as shown when the interpreter executes "import this" and
displays
The Zen of Python
.
>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
More perspectives on using Python
Programming language rankings and the philosophy behind a language
provide solid initial data points for why you should learn Python.
These resources also give perspectives on why people switched from other
programming communities and why they advocate for Python as a primary
language.
How to argue for Pythonâs use
explains that choosing a programming language can be complicated but that
Python is a very good option for many use cases.
Why I Push for Python
gives one professor's rationale for promoting Python to teach programming
to undergraduates.
If you're wondering about the differences in Python's dynamically typed
system versus statically typed languages, be sure to
read this thorough explanation of the topic
.
Python, Machine Learning, and Language Wars
compares Python with R, MATLAB and Julia for data science work. While
Python is great for
deployment automation
and
web development
, many non-developers are first
introduced to the language and ecosystem while getting data analysis
work done.
Evangelizing Python for Business
contains helpful hints if you are trying to convince your company to use
Python, particularly for
web development
.
Python: Beyond Just Web Apps
supplies non-web development project examples that use Python. The article
also does a solid job comparing and contrasting Python to other common
programming languages such as Java, Ruby and JavaScript.
Python or Ruby for web development
gives reasons for one language compared to the other just focused on the
web development space.
If you are worried about the community split between
Python 2 and Python 3
, you should go with Python 3.
To read more about how companies handled upgrading, check out
Instagram's smooth move to Python 3
,
practical steps for moving to Python 3
and
lessons learned from migrating to Python 3
.
What else do you want to learn about Python?
What editor should I use to code my Python app?
I want to learn how to code a Python web application using a framework.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Why Use Python?
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Python 2 or 3? - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Python 2 or 3?
The Python programming language is almost finished with a long-term transition
from version 2 to version 3. New programmers often have questions about which
version they should learn. It can be confusing to hear that Python 3, which was
originally released in 2008, is still not the default installation on some
operating systems such as macOS. However, that situation is rapidly changing
as the final version 2 release, Python 2.7, is approaching its end-of-life
that is definitively scheduled for
January 1, 2020
.
The simple answer right now is:
learn Python 3
, specifically the latest
version which as of October 2019 is
Python 3.7
. If for some reason you
absolutely have to learn Python 2, for example because your employer is
working on a bunch of legacy code, you will be able to transfer the majority
of your knowledge from Python 2 right into Python 3. Likewise, you will
still be able to read and write Python 2 code if you start with Python 3.
There are enough
great resources
out there that will teach you to code in version 3 without any prior
version 2 experience. Python 3 is the future and you will not regret
starting with the latest version of the
programming language
.
There is one small caveat to the recommendation to go full-on Python 3.
You may infrequently come across lesser-used open source code libraries
that were originally written in Python 2 that do not completely support
Python 3. That was the case before 2019 with
DevOps
configuration management tools
such as
Fabric
or
Ansible
. However,
those libraries now support Python 3 and the usage problems that were
frequent in years past are now typically not a concern. Knowing how
to upgrade Python 2 libraries to 3.x is still a useful skill to apply
at the edges of the Python open source community.
Visualizations and Projects
Since upgrading from Python 2 to 3 has been such a huge undertaking within
the community, many projects have sprung up to make the transition easier.
six
is a 2/3 compatibility library that
is a dependency for many popular Python projects to make it easier to
support both Python 2 and 3 at the same time.
Python 3 Readiness
is a visualization of
which most popular 360 libraries (by downloads) are ready to be
used with Python 3.
The
Python clock
counts down the time until
Python 2.x is no longer maintained. While Python 2's retirement
may still seem a long time away, it can take a lot of time and effort to
migrate existing application to the modified syntax in 3.x.
Porting to Python 3 resources
Moving an existing codebase to Python 3 from 2 can be a daunting task,
These resources were created by fellow developers who've previously
gone through the process and have advice for making it less painful.
Python 3 Porting
is an entire book with
details for how to upgrade your existing projects and libraries to
Python 3.x.
Moving from Python 2 to Python 3
is a PDF cheatsheet for porting your Python code.
The official
porting code to Python 3
page links to resources on porting Python code as well as underlying C
implementations. There is also a
quick reference for writting code with Python 2 and 3 compatibility
.
Upgrading to Python 3 with Zero Downtime
supplies advice on transitioning a large existing Python 2 web application
to Python 3. Their process involved upgrading dependencies, testing and
deploying the new version before going back to clean up unnecessary code
created by the transition.
Migrating to Python 3 with pleasure
is a porting guide that focuses on code that data scientists would
typically use in their programs.
Instagram Makes a Smooth Move to Python 3
explains their upgrade process for getting all of their code over to
Python 3 compatibility over a period of about a year.
Practical steps for moving to Python 3
is a podcast episode that goes over migrating a large existing application's
codebase to Python 3 from Python 2.
Lessons learned from migrating to Python 3
covers how a development team with a large e-commerce site built on
Django
was able to upgrade their project.
Python 2 to 3 resources
The following resources will give you more context on how the community
feels the transition from Python 2 to 3 is going, as well as why you
should upgrade as soon as possible.
Why should I use Python 3?
is a detailed FAQ on important topics such as unicode support, iteration
improvements and async upgrades provided by 3.x. There is also a great
follow up post by the author titled
A Rebuttal For Python 3
that counters some arguments made by other community members who are
unhappy about various features in Python 3.
Want to know all of the advantages and what's changed in Python 3
compared to Python 2? There's
an official guide to Python 3 changes
you'll want to read.
Python 3 is winning
presents data and graphs from PyPI to show that at the current rate,
by mid-2016 overall Python 3 library support will overtake Python 2
support.
Python 3 Retrospective from the Benevolent Dictator for Life
is a talk by Guido van Rossum on what is working, not working and still
needs to be done before the changover can be considered complete.
The stages of the Python 3 transition
provides perspective from a core Python developer on how the transition from
Python 2 to 3 is going as of the end of 2015.
How Dropbox rolled out one of the largest Python 3 migrations ever
explains how their transition began in 2015 and was successfully completed
in 2018. There is also a follow up post on
incrementally migrating over one million lines of code from Python 2 to Python 3
that has more details on how hack weeks were able to help make enough
progress so the engineers could better estimate the scope of work when
the transition from 2 to 3 became critical to their development toolchain.
Zato: A successful Python 3 migration story
examines the background, preparation, execution and testing of moving
an existing Python 2 code base over to Python 3.
Why Python 3?
randomly outputs valid reasons to
use Python 3 over 2.x.
Rules for Radicals: Changing the Culture of Python at Facebook
is a fascinating look at how Facebook moved from primarily Python 2
up to Python 3 due to the efforts of a small passionate group of
developers within the company. Definitely worth watching to understand
how to shift a large organization with an established codebase.
Porting to Python 3 is like eating your vegetables
explains that there are treats in Python 3 that are worth porting for and
has some tips on making the transition easier.
Scrapy on the road to Python 3 support
explains from the perspective of a widely used Python project what their
plan is for supporting Python 3 and why it has taken so long to make it
happen.
All major scientific Python libraries have
pledged to drop Python 2 support
no later than 2020, when Python 2's maintenance life is over. The pledge
strongly encourages Python 3 adoption by publicly stating their
intentions.
10 awesome features of Python that you can't use because you refuse to upgrade to Python 3
is a great slideshow with code snippets that show useful new features
of Python 3 that are not available in 2.x such as keyword-only
arguments, chained exceptions and the
yield from
keyword.
What's next now that you know about Python versions?
What editor should I use to code my Python app?
I want to learn how to code a Python web application using a framework.
Show me a list of the best Python learning resources.
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Python 2 or 3?
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Enterprise Python - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Enterprise Python
One of the misconceptions around Python and other dynamically-typed languages
is that they cannot be reliably used to build enterprise-grade software.
However, almost all commercial and government enterprises already use
Python in some capacity, either as glue code between disparate applications
or to build the applications themselves.
What is enterprise software?
Enterprise software is built for the requirements of an organization rather
than the needs of an individual. Software written for enterprises often
needs to integrate with legacy systems, such as existing databases and
non-web applications. There are often requirements to integrate with
authentication systems such as the
Lightweight Directory Access Protocol (LDAP)
and
Active Directory (AD)
.
Organizations develop enterprise software with numerous custom requirements
to fit the specific needs of their operating model. Therefore the software
development process often becomes far more complicated due to disparate
factions within an organization vying for the software to handle their
needs at the expense of other factions.
The complexity due to the many stakeholders involved in the building of
enterprise software leads to large budgets and extreme scrutiny by
non-technical members of an organization. Typically those non-technical
people place irrational emphasis on the choice of programming language and
frameworks when otherwise they should not make technical design decisions.
Why are there misconceptions about Python in enterprise environments?
Traditionally large organizations building enterprise software have used
statically typed languages and platforms such as C++, C# and Java.
Throughout the 1990s and early 2000s, large companies such as
Microsoft, Sun Microsystems and Oracle marketed these languages as
"enterprise grade". The inherent message about other programming
ecosystem was that they were not appropriate for CIOs' difficult
technical environments. Languages other than Java, C++ and C# (along
with its broader .NET platform) were seen as risky and therefore not
worthy of investment.
In addition, "scripting languages" such as Python, Perl and Ruby were not
yet robust enough in the 1990s because their core standard libraries were
still being developed. Frameworks such as
Django
,
Flask
and Rails (for Ruby) did not yet exist. The Web was
just beginning and most enterprise applications were desktop apps built
for Windows. Python simply wasn't made for such environments.
Why is Python now appropriate for building enterprise software?
From the early 2000s through today the languages and ecosystems for many
dynamically typed languages have greatly improved and often surpassed some
aspects of other ecosystems. Python, Ruby and other previously derided
languages now have vast, well-maintained open source ecosystems backed by
both independent developers and large companies including Microsoft, IBM,
Google, Facebook, Dropbox, Twilio and many, many others.
Python's open source libraries, especially for
web development
and data analysis, are some of the
best maintained and fully featured pieces of code for any language.
Meanwhile, some of the traditional enterprise software development languages
such as Java have languished due to underinvestment by their major corporate
backers. When Oracle purchased Sun Microsystems in 2009,
there was a long lag time before Java was enhanced with new language features
in Java 7. Oracle also
bundles unwanted adware with the Java installation
,
whereas the Python community would never put up with such a situation because
the language is open source and does not have a single corporate controller.
Other ecosystems, such as the .NET platform by Microsoft have fared much
better. Microsoft continued to invest in moving the .NET platform along
throughout the early part of the new millennium.
However, Microsoft's enterprise products often have expensive licensing fees
for their application servers and associated software. In addition, Microsoft
is also a major backer of open source,
especially Python
,
and their
Python tools for Visual Studio
provide a top-notch
development environment
.
The end result is that enterprise software development has changed
dramatically over the past couple of decades. CIOs and technical executives
can no longer ignore the progress of Python and the great open source
community in the enterprise software development landscape if they want to
continue delivering business value to their business side customers.
Open source enterprise Python projects
Python is widely used across large enterprise organizations but the code
is often not put out as open source. If you come across projects that are
appropriate for this list,
contact me
to let me know:
Collab
by the
U.S. government's
Consumer Financial Protection Bureau
(CFPB) agency is a corporate intranet and collaboration platform for large
organizations. The project is currently running and in-use by thousands of
CFPB employees.
Pants
is a build system for software
projects with many distinct parts and built with many different programming
languages as is often the case in large organizations.
Enterprise Python software development resources
The following articles cover topics in enterprise development that are
often not discussed when dealing with standard Python development.
Talk Python to Me's fourth episode interviewed PayPal's lead developer on
Enterprise Python and Large-Scale Projects
.
They rebuke many of the myths around Python for large scale projects
including the variable typing system and scalability.
Building and deploying an Enterprise Django Web App in 16 hours
covers one developer's experience researching,
building
and
deploying
an
enterprise application in Python and
Django
.
Mozilla's
Enterprise InfoSec
resources
are programming language agnostic but very useful to developers trying
to understand all the jargon that goes along with the enterprise
security domain.
The end of enterprise IT
is a fascinating essay that actually does not talk about Python in
particular but shows how large enterprise IT departments such as the
one at ING Bank have to evolve their structure, processes and tools to
successfully ship software. Programming languages such as Python are more
likely to be used in these updated polyglot and
DevOps
-driven environments.
There are a couple of solid demystifying articles in CIO magazine including
this broad overview of Python in enterprises
and this article on
why dynamic languages are gaining share for enterprise development
.
JavaWorld wrote an interesting article about
Python's inroads into enterprise software development
.
I gave a talk at DjangoCon 2014 on
How to Solve the Top 5 Headaches with Django in the Enterprise
which covered both Python and Django in large organizations.
This
StackExchange answer
contains a solid explanation what differentiates enterprise software
from traditional software.
There was a
Python subreddit thread about Python in the enterprise
that's worth a look for broader opinions on Python compared to Java and
.NET in enterprise environments.
Why are enterprises so slow?
is not specific to Python but is a fantastic article on the regulatory,
cultural and financial reasons why large companies often move so slowly.
What do you want to learn next about developing with Python?
What editor should I use to code my Python app?
Show me a list of the best Python learning resources.
Why is Python a good programming language to use?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Enterprise Python
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Companies using Python - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Companies using Python
The Python programming language is widely used by companies around the world
to
build web apps
,
analyze data
,
automate operations via DevOps
and
create reliable, scalable enterprise applications
.
There is also a fantastic list of
organizations using Python on the Python.org wiki
as well as a detailed write-up of
several top Python-powered companies on Real Python's blog
.
Many companies do not even realize they are using Python across their
organizations. For example, if a company is a "Java-only shop" but they
use IBM WebSphere as a web application server then they have to use
Python to script the server's configuration! Python has a habit of getting
in everywhere regardless of whether the usage is intentional.
Financial institutions
Python is widely-used across financial institutions, whether they are
hedge funds, large banks or regulators (see "Government Agencies" section
below).
Goldman Sachs uses Python
and often asks candidates about their experience with the language
during the interview process.
You can see publicly what companies are using internally by looking
at job descriptions on sites like
Glassdoor with "Python Goldman Sachs" keywords
and
Indeed for JP Morgan Chase
.
Salaries and responsibilities vary widely based on the role and whether
Python is used for data analysis,
web application development
or DevOps.
PayPal
uses Python across their entire infrastructure and often writes great
technical blog posts on packaging,
optimization using C
and
configuring DNS
.
Large tech companies
Large technology companies tend to be polyglot (use many programming
languages rather than standardizing on one), with Python either as a
primary language or the "glue" that helps all the other languages fit
together. The following articles explain how these leading large companies
like Uber, Twilio, Netflix and Facebook uses Python in their development
stacks.
Uber's tech stack
contains
a significant amount of Python, which they documented in a series of
engineering posts. Part one describes the lower backend levels, which are
written in Python, with Node.js, Go and Java mixed in.
Part two
explains the higher
levels of the marketplace and user interfaces.
Twilio
uses Python with
Django
and the
Wagtail
content management system to power
the amazing
Twilio documentation
as well as
TwilioQuest
. They wrote a post about
how TwilioQuest was built
that goes into detail on the code including the usage of the front-end
Vue.js framework. Twilio also uses
Flask
to run the
REST API endpoints
and open sourced
the
Flask-RESTful
framework so other developers could cut down the boilerplate in their
web APIs.
Netflix uses Python
throughout their organization to run chaos engineering tests and generally
glue together the code from their high-functioning polyglot teams. Netflix
also wrote a
2019 update for PyCon US
to give more detail on what teams and projects work in Python.
Python 3 at Mozilla
explains how their "build system, CI configuration, test harnesses,
command line tooling and countless other scripts, tools or Github projects
are all handled by Python". So just about everything a developer touches
every day to build anything else needs Python to hook into the larger
organization!
Google uses Python extensively
and officially supports it internally as one of their three core languages,
the other two being Java and Golang. While Google likely has every
programming language running somewhere in their infrastructure, Python
receives priority support due to its core language status.
Dropbox is well-known for using Python
across their application development, infrastructure and operations. They
also did a good job of cornering the market on hiring well-known Python
core contributors for a period of time, such as
Guido van Rossum
and
Jessica McKellar
(although Jessica is now at a new company that she co-founded).
Facebook and Instagram use Python 3
at scale. They've been very vocal about successfully making the migration
from the
Python 2 world into Python 3
.
A significant portion of
Reddit is built in Python
and it is one of the largest sites at scale to use the programming language.
Increment
covers usage of Python (and other programming languages) at
Lyft, Digital Ocean, Sauce Labs, Slack and Fastly
in this awesome overview post titled "What its like to be a developer at..."
.
Government agencies
Python usage in government agencies is widespread despite the reputation of
agencies as stodgy late technology adopters. Organizations range from
financial industry regulators like the SEC and CFPB, to intelligence agencies
like the CIA, FBI and NSA.
The
Consumer Financial Protection Bureau (CFPB)
not only uses Python for running most of their applications but also open
sources many of those Python projects for other agencies (or any
organization) to use. For example,
collab
is a
Django
project that provides an
enterprise application
for storing and looking
up information on employees and contractors.
NASA uses Python extensively
and
open sources much of their software
.
The United States
Central Intelligence Agency (CIA)
appears to be a huge fan of using Python in its state sponsored hacking
tools. They even published their own Python code conventions
documentation due to how many developers at the agency are using the
language.
The
SEC uses Python and proposes organizations use Python to comply with regulations
.
A quick search for government jobs that require or recommend Python
via USAJobs
turns up numerous listings at organizations such as the Smithsonian
Institution, Department of Education, Department of the Navy and
National Institute of Standards and Technology (NIST).
Industry-specific Python guides
Python is so widely used across various industries that developers have
written guides specific to their occupations for how to use Python. The
following resources are guides for using Python in astronomy, social
sciences and other fields rather than specific companies.
Practical Business Python
covers business-related
topics such as how to automate generating large Excel spreadsheets or
perform analysis when your data is locked in Microsoft Office files.
Practical Python for Astronomers
gives open source workshop materials to teach astronomy students how to
use Python for
data analysis
.
Python for the Humanities
is a
textbook on the basics of text processing in Python. The material ramps
up quickly after the first chapter so you will likely want to combine
this walkthrough with other
great Python learning resources
.
Python for Social Scientists
and
Real Python's Python for Social Scientists
walkthroughs are specific to fields that work with a lot of
data
gathered from studies such as psychology, sociology
and economics.
What else do you want to learn about Python?
I want to know about working with data in Python.
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Companies using Python
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Best Python Resources - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Best Python Resources
The Python community is amazing at sharing detailed resources and helping
beginners learn to program with the language. There are so many resources
out there though that it can be difficult to know how to find them.
This page aggregates the best general Python resources with descriptions of
what they provide to readers.
If you prefer to learn by watching videos check out the
best Python videos
. You may also be interested in reading about
development environments
to use for coding.
New to programming
If you're learning your first programming language these books were written
with you in mind. Developers learning Python as a second or later language
should skip down to the next section for "experienced developers".
TwilioQuest
is an free and
incredible 16-bit adventure game that teaches programming in the Python
basics mission. It's an absolutely way to stay engaged with the core
concepts that can often be otherwise dry to learn. There are also more
advanced missions to learn about
web APIs
, and new
learning missions are added regularly on new programming topics.
Automate the Boring Stuff with Python
is an incredible book for both non-developers and professional developers
alike. Each chapter walks through a situation that can be automated using
Python such as manipulating images, organizing your files and
programmatically controlling your mouse and keyboard to handle any sort
of tasks.
CS for All
is an open book by professors
at Harvey Mudd College which teaches the fundamentals of computer science
using Python. It's an accessible read and perfect for programming beginners.
This
short 5 minute video
explains why it's better to think of projects you'd like to build and
problems you want to solve with programming. Start working on those projects
and problems rather than jumping into a specific language that's recommended
to you by a friend.
The
Python projects tag
on the
Twilio blog is constantly updated with fun tutorials you can build to
learn Python, such as the
International Space Station Tracker with Flask and Redis-Queue
,
Choose Your Own Adventures Presentations using Flask and WebSockets
and
Martianify Photos with OpenCV
.
Google put together a great compilation of materials and subjects you
should read and learn from if you want to be a
professional programmer
.
Those resources are useful not only for Python beginners but any developer
who wants to have a strong professional career in software.
The O'Reilly book
Think Python: How to Think Like a Computer Scientist
is available in HTML form for free on the web.
Looking for ideas about what projects to use to learn to code? Check out
this list of 5 programming projects for Python beginners
.
Python for you and me
is an
approachable book with sections for Python syntax and the major language
constructs. The book also contains a short guide at the end to get
programmers to write their first Flask web application.
Python for specific occupations
Python is powerful for many professions. If you're seeking to use Python in a
specific field, one of these guides may be the most appropriate for you.
Python for Social Scientists
contains a textbook, course outline and slides for a college course that taught
social scientists to use Python for their profession.
Practical Business Python
is a blog that covers topics
such as how to automate generating large Excel spreadsheets or perform analysis
when your data is locked in Microsoft Office files.
Python for the Humanities
is a
textbook and course on the basics of Python and text processing. Note if you've
never worked with Python before the material ramps up quickly after the first
chapter so you will likely want to combine it with some other introduction to
Python resources.
Practical Python for Astronomers
provides open source workshop materials for teaching students studying
astronomy to use Python for data analysis.
Experienced developers new to Python
If you can already program in another language, these resources are better for
getting up to speed because they are more concise when explaining introductory
topics.
Learn Python in y minutes
provides a whirlwind tour of the Python language. The guide is especially
useful if you're coming in with previous software development experience
and want to quickly grasp how the language is structured.
Developing a Real-Time Taxi App with Django Channels and Angular
is a great tutorial for jumping into a real project instead of a simple
starter application while learning common Python concepts and tools such
as
Django
,
Angular
,
WebSockets
and
Redis
.
Developers familiar with other languages often have difficulty adapting to
accepted Python code style. Make sure to read the
PEP8
code style guidelines
as well as
The Elements of Python Style
to know the Python community standards.
Authentication with Flask, React, and Docker
is another detailed course that shows how to combine
Flask
,
React
,
Docker
and
Heroku
to build a solid intermediate-to-advanced
web application and deploy it.
Essential Reads for Any Python Programmer
is a great collection of advice for developers coming to Python from another
programming language ecosystem such as Java.
How to Develop Quality Python Code
is a good read to begin learning about development environments,
application dependencies and project structure.
The
Python module of the week
chapters are a good way to get up to speed with the standard library.
Doug Hellmann is also now updating the list for changes brought about
from the upgrade to Python 3 from 2.x.
Composing Programs
shows how to build
compilers with Python 3, which is a good undertaking if you're looking
to learn both more about the Python language and how compiles work.
free-for-dev
is not specific
to Python but it's a fantastic list of free tier resources for experienced
developers. The list is especially handy if you want to try building a
Python project and need new third party services to kick around while
experimenting.
Videos, screencasts and presentations
Videos from conferences and meetups along with screencasts are listed on
the
best Python videos
page.
Curated Python packages lists
awesome-python
is an incredible
list of Python frameworks, libraries and software. I wish I had this
page when I was just getting started.
easy-python
is like
awesome-python although instead of just a Git repository this site is
in the Read the Docs format.
Hacker News Tools of the Trade
is not specific to Python but almost all of the tools and services are
useful to building software projects.
Podcasts
Take a look at the
best Python podcasts
section for a curated list of both Python-specific and general software
development podcasts.
Newsletters
Python's active community constantly publishes new tutorials and
walkthroughs. It is easier to keep up if you follow along by subscribing
to several email newsletters that round up and curate the best new
resources. I subscribe to all of the following newsletters and find that
each one has its own unique take on what resources are most important
to send out to the community.
Python Weekly
is a free weekly roundup
of the latest Python articles, videos, projects and upcoming events.
PyCoder's Weekly
is another great free weekly
email newsletter similar to Python Weekly. The best resources are generally
covered in both newsletters but they often cover different articles
and projects from around the web.
Talk Python's Friends of the Show
always highlights new episodes of this wonderful
podcast
as well as new useful tools to
add to your developer toolbelt.
Awesome Python Newsletter
provides
another solid selection of new and existing tutorials along with an extensive
issues archive
with previous
links to resources.
Those resources should help you get started. What's next?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
What editor should I use to code my Python app?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Best Python Resources
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Best Python Videos - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Best Python Videos
If you prefer to learn Python programming by watching videos then this is the
resource for you. I've watched hundreds of live technical talks and combed
through videos to pick out the ones with great speakers who'll teach you the
most about the language and ecosystem.
This page links to the best free videos as well as other video lists so you
can do your own searching through the huge backlog of conference and meetup
talks from the past several years.
Check out the
best Python resources
for links to great books and articles as well as
must-listen Python podcasts
for audio-only shows.
Web development videos
The following
web development
videos cover the broad
topics of using
web frameworks
like
Django
,
Flask
,
Pyramid
and
other frameworks
, as well as
web design
and
deployments
.
My
EuroPython 2014 "Full Stack Python"
talk goes over each topic from this guide and provides context for how the
pieces fit together.
The
talk slides
are also available. Even though the talk is from 2014, almost all
of the general web development principles remain consistent in 2018.
Kate Heddleston
gave a talk at PyCon 2014
called
"
Full-stack Python Web Applications
"
with clear visuals for how numerous layers of the Python web
stack fit together. There are also
slides available from the talk
with all the diagrams.
Taking Django Async
is
a great overview by
Andrew Godwin
,
who created South (now Django Migrations as part of the core framework)
and
Django Channels
. He
discusses the synchronous blocking worker design of
WSGI
and why it is incompatible with asynchronous
protocols like
WebSockets
. A potential solution
could be a new protocol like Asynchronous Server Gateway Interface (ASGI),
but how far would the integration into Django need to go and would it
be worth the pain? Andrew does a great job of mixing the philosophical
questions with technical implementation details throughout the talk.
Design 101 for Developers
covers a difficult topic for many analytic-minded developers to learn:
design. The talk is not specific to
web development
or
web design
but instead explains general design
principles such as spacing, consistency and making interactions obvious
for a user.
How Netflix does failovers in 7 minutes flat
by Amjith Ramanujam at PyCon US was an excellent talk on handling
network outages and predicting the reliability of failover routes.
This talk is worth watching even for the data visualizations alone!
Kate Heddleston and I gave a talk at DjangoCon 2014 called
Choose Your Own Django Deployment Adventure
which walked through many of the scenarios you'd face when deploying your
first Django website.
The
Discover Flask
series is
a detailed Flask tutorial on video with corresponding code examples on
GitHub.
Designing Django's Migrations
covers Django 1.7's new migrations from the main programmer
of South and now Django's built-in migrations, Andrew Godwin.
DjangoCon US videos from
2019
,
2018
,
2017
,
2016
,
2015
,
2014
, are all available
free of charge.
DjangoCon EU videos are also available from
2017
,
2016
,
and
2015
.
GoDjango
screencasts and tutorials are free short
videos for learning how to build Django applications.
The videos and slides from
Django: Under the Hood 2015
are from Django core committers and provide insight into the
ORM
, internationalization,
templates
and other important
web framework
topics.
Core Python language videos
The core Python programming language has many new features now that almost
all
community
resources are working on
Python 3
instead of split across legacy 2.x branches.
The following videos cover topics within the core Python language primarily
relevant to Python 3 features although some can be used with Python 2 as
well.
Jessica McKellar's
Building and breaking a Python sandbox
is a fascinating walk through the lower layers of the Python interpreter.
Brandon Rhodes'
All Your Ducks In A Row: Data Structures in the Std Lib and Beyond
goes through how data structures are implemented, how to select a
data structure appropriate to your application and how the list and
dictionary can be used in many situations.
Guido van Rossum's
Python Language
keynote
talk from PyCon 2016 reinforced that there would be no Python version 2.8
and that development on backported security releases into the Python 2
branch would end by January 1, 2020. Guido also covered many topics
important to the Python language community like expanding the number and
backgrounds of core committers.
The talk
Python Descriptors
by Simeon Franklin explains the what and why of this core Python language
feature.
David Beazley gives an amazing live coded performance to show
Python concurrency
using threads, event loops and coroutines. David makes the live coding
look easy but a whole lot of work must've gone into that talk.
What is a Python Core Developer?
explains the responsibilities, projects, repositories and expectations of
core Python committers as well as how to become one.
Google's Python Class
contains
lecture videos and exercises for learning Python.
Video compilations
All major Python conferences, as well as most regional ones, release
technical talk videos for free. These sites either aggregate the thousands
of videos that have been released or are lists from specific conferences
like
PyCon US
and
EuroPython
.
PyVideo
organizes and indexes thousands of Python
videos from both major conferences and meetups.
Incredible Technical Speakers
is a repository I put together that features software developer speakers
talking about programming language agnostic topics. The list is intended
to emphasize professional software developers who also have the ability to
engage an audience of peers with an exciting talk. These talks are relevant
to all software developers even though not every talk is specific to the
Python language.
PyCon US videos from
2020
,
2019
,
2018
,
2017
,
2016
,
2015
and
2014
are all available online for free.
All of the talk videos are available on YouTube for
EuroPython 2020
,
EuroPython 2019
,
EuroPython 2018
,
EuroPython 2017
,
EuroPython 2016
,
EuroPython 2015
,
EuroPython 2014
and
earlier years
.
What's the next topic you want to learn?
Show me a list of the best Python learning resources.
I want to learn how to code a Python web application using a framework.
What editor should I use to code my Python app?
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Best Python Videos
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Best Python Podcasts - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Best Python Podcasts
The
Python community
has an embarrassment of riches
when it comes to
free and low cost resources
for both new and experienced software developers. These great resources
include several Python podcasts that are released on regular schedules.
This page contains a list of active Python-specific and software engineering
high-quality podcasts.
Python-specific podcasts
These podcasts are run and recorded by Python developers who focus on
topics that are important to our field. Each podcast series has a long
list of previously-recorded episodes that are still relevant even if they
are several years old so you will always have some great material to
listen and learn.
Talk Python to Me
focuses on the
people and organizations coding on Python. Each episode features a
different guest interviewee to talk about his or her work.
Podcast.__init__
is another regular podcast
that presents stories about Python and interviews "with the people who
make it great".
Python Bytes
is a new podcast from the creators
of the above mentioned "Talk Python to Me" and "Test and Code Podcast".
Test and Code Podcast
focuses
on
testing
and related topics such as mocking and
code metrics
.
Django Riffs
is a podcast for learning
web application development
in Python using the
Django web framework
.
The Real Python Podcast
is a weekly
podcast with interviews, coding tips, and conversation with guests from the
Python community.
Teaching Python
is a podcast by two
teachers about their adventures teaching middle school computer science,
problem solving, handling failure, frustration, and success with
teaching Python programming.
Favorite podcast episodes
Here are a list of my favorite episodes from various Python podcasts before
we dive into entire podcast recommendations in the next section. Dig into
these episodes to get a feel for various personalities and styles in
podcast presentation.
SQLAlchemy and data access in Python
brought me some much-needed context and understanding for how the
object-relational mapping
library
SQLAlchemy
evolved. This episode interviews
SQLAlchemy's creator. The show host, Michael Kennedy, asks great questions
based on his in-depth research and prior usage of SQLAlchemy.
Python past, present, and future with Guido van Rossum
covers the history of Python, Guido's motivations in creating the
language and shepherding it through almost thirty years of releases.
Fun fact: the question about whether Python being open source contributed
to its success was my question when the podcast host Michael Kennedy asked
me what topics they should talk about.
Deploying Python Web Applications
.
Spoiler alert
: this is the episode I was on Talk Python to Me explaining
how
Python web application deployments
work.
Python Bytes talked extensively about
object-relational mappers (ORMs)
on
episode #39
where
a lot of the discussion was based on the
Full Stack Python ORMs
page.
Thanks guys, it was great to hear the feedback about what worked and what
didn't work for you about the explanations!
The
Python at Netflix
episode of Talk Python to Me provided an awesome view inside the largest
internet site by bandwidth and how Python fits into their polyglot
organization.
Another great Talk Python to Me episode,
Python in Finance
,
explains how Python is used in the broad finance industry for stock trading,
quantitative analysis and data analytics. Check this one out if you have
wondered how opaque private companies like hedge funds use Python to make
(a lot of) money.
If you prefer to learn Python by reading check out the
best Python resources page
or
view all topics
.
General software development podcasts
These podcasts are not specific to Python but cover relevant software
engineering topics and often have episodes on Python topics. At the
very least you will become a better general software developer by
listening and learning from them.
Software Engineering Daily
incredibly has a podcast every day with a different developer on a
huge range of relevant development subjects.
All things Git
talks to developers
using, building and working with Git with new episodes every two weeks.
CodeNewbie
interviews developers
who are early in their software development journey to find out their
stories of why they are programming and what they are working on. There
are also interviews with experienced developers building well-known
projects.
Developer on Fire
interviews programmers,
architects and testers with their stories of success, failure and
excellence.
Command_line Heroes
covers
operating system
-level topics as
well as
DevOps
.
Embedded.fm
goes into embedded systems and
hardware hacking.
The Changelog
is a weekly podcast on
general software development matters.
Full Stack Radio
. No relation to
Full Stack Python but another one to check out!
Exponent
is not a software development podcast
but it covers the intersection of corporate strategy and technology in an
in-depth way that allows me to better understand the decisions businesses
make when building and releasing software. I listen to every episode
(at 1.5x speed) and it's well worth the 45 to 60 minutes spent
listening to Ben Thompson and James Allworth go deep on a weekly topic.
Test Talks
examines a software
testing topic each week, usually with a special guest focused on the
area being examined.
The Cloudcast
focuses on cloud computing
and DevOps-related topics.
Data science and analysis podcasts
The
data
science community does not only use Python as its
core programming language but it plays a big role in almost every
organization performing data analysis. The following podcasts cover
data science broadly and often get specific into Python ecosystem tools.
DataFramed
is a data
science podcast that often covers Python libraries and other areas of
interest to people using Python to analyze
data
.
Data Skeptic
covers data science,
statistics, machine learning, artificial intelligence and "scientific
skepticism".
Data stories
is a podcast on data visualization.
Partially Derivative
was a podcast for
machine learning, artificial intelligence and the data community. They
finished their last episode in late 2017 but the
episodes list
contains
a slew of existing content.
Those podcasts should help you get started. What's next?
Show me a list of the best Python learning resources.
I've built a Python web app, now how do I deploy it?
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
Learning Programming
Core Language
Why Use Python?
Python 2 or 3?
Enterprise Python
Python Community
Companies using Python
Best Python Resources
Best Python Videos
Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
» Best Python Podcasts
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Vim - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Vim
Vim
(
source code
),
short for Vi IMproved, is a configurable text editor often used as
a Python development environment. Vim proponents commonly cite the numerous
plugins, Vimscript and logical command language as major Vim strengths.
Why is Vim a good Python development environment?
Vim's philosophy is that developers are more productive when they avoid
taking their hands off the keyboard. Code should flow naturally from the
developer's thoughts through the keyboard and onto the screen. Using a mouse
or other peripheral is a detriment to the rate at which a developer's
thoughts become code. This "efficiency by keyboard"
keeps Vim as one of the most popular text editors
despite having been around for decades. Few programming tools have that kind
of staying power.
Vim has a logical, structured command language. When a beginner is learning
the editor she may feel like it is impossible to understand all the key
commands. However, the commands stack together in a logical way so that over
time the editor becomes predictable.
Vim is an implementation of the
text editors and IDEs
concept. Learn how these parts fit together in the
development environments
chapter or view
all topics
.
Configuring Vim with a Vimrc file
The Vimrc file is used to configure the Vim editor. A Vimrc file can range
from nothing in it to very complicated with hundreds or thousands of lines
of configuration commands.
Here's a short, commented example .vimrc file I use for Python development
to get a feel for some of the configuration statements:
"
enable syntax highlighting
syntax
enable
"
show line numbers
set
number
"
set tabs to have 4 spaces
set
ts
=4

"
indent when moving to the next line while writing code
set
autoindent
"
expand tabs into spaces
set
expandtab
"
when using the >> or << commands, shift lines by 4 spaces
set
shiftwidth
=4

"
show a visual line under the cursor's current line
set
cursorline
"
show the matching part of the pair for [] {} and ()
set
showmatch
"
enable all Python syntax highlighting features
let
python_highlight_all
= 1
Here is how these configuration options look with a dark background on
Mac OS X while editing the markdown for this webpage (how meta!).
Take a look at another example using these configuration options, this time
with a light background and editing Python code from my
Choose Your Own Adventures Presentations
project.
The Vimrc file lives under the home directory of the user account running
Vim. For example, when my user account is 'matt', on Mac OS X my Vimrc
file is found at
/Users/matt/.vimrc
. On Ubuntu Linux my .vimrc file
can be found within the
/home/matt/
directory.
If a Vimrc file does not already exist, just create it within the user's
home directory and it will be picked up by Vim the next time you open the
editor.
The following are a few resources for learning what to put in, and how to
structure a
.vimrc
file. I recommend adding configuration options one
at a time to test them individually instead of going whole hog with a Vimrc
you are unfamiliar with.
A Good Vimrc
is a fantastic,
detailed overview and opinionated guide to configuring Vim. Highly
recommended for new and experienced Vim users.
5 lines for a blank .vimrc
shows settings for case insensitive search, highlighting as you search,
disabling swap, and a couple more "must have" enhancements to the
default configuration.
Vim and Python
shows
and explains many Python-specific .vimrc options.
This
repository's folder with Vimrc files
has example configurations that are well commented and easy to learn from.
For people who are having trouble getting started with Vim, check out this
blog post on the
two simple steps that helped this author learn Vim
.
Vim tutorials
Vim has a reputation for a difficult learning curve, but it's much easier
to get started with these tutorials.
Learn Vim Progressively
is a wonderful tutorial that follows the path I took when learning Vim:
learn just enough to survive with it as your day-to-day editor then begin
adding more advanced commands on top.
A vim Tutorial and Primer
is an
incredibly deep study in how to go from beginner to knowledgeable in Vim.
Why Atom Can't Replace Vim
discusses one of Vim's core principles: command composability. Vim has
a language where simple commands are combined to execute more advanced
operations. For example, in command mode,
$
moves to the end of a line.
When
$
is preceded by
d
then everything to the end of the line is
deleted. Over time the simple commands become intuitive and the
combinations become more powerful than having distinct commands such as
a drop-down menu with a specific option to delete all text until the end
of the line.
Vim as a Language
explains the language syntax and how you can build up over time to master
the editor.
How to install and use Vim on a cloud server
along with
How to use Vim for advanced editing of code on a VPS
are two detailed Digital Ocean guides for getting up and running with Vim,
regardless of whether you're using it locally or on a cloud server.
PacVim: a commandline game to learn Vim commands
takes the PacMan theme and teaches you how to use Vim by forcing you
to move around and use Vim commands while gaming.
Ten years of Vim
provides an insightful retrospective on one experienced developer's
journey with using Vim as a primary text editor and development
environment. I found the part about going overboard with plugins before
switching back to a simpler configuration fascinating because it is
the same path I've found myself taking as I approach my own ten year
mark with Vim.
At least one Vim trick you might not know about
is a collection of non-obvious keyboard shortcuts, many of which are
infrequently used but still useful.
Vim Adventures
is a cute, fun browser-based
game that helps you learn Vim commands by playing through the adventure.
Things About Vim I Wish I Knew Earlier
explores the lessons one developer learned while exclusively using Vim
for several years. The author includes using relative instead of absolute
line numbering, setting numerous configuration options and fuzzy finding
to quickly open files in other directories rather than expanding the
whole path.
Seven habits of effective text editing
explains moving around efficiently, fixing errors quickly and forming good
habits.
Vim installation guides
These installation guides will help you get Vim up and running on Mac OS X,
Linux and Windows.
Upgrading Vim on OS X
explains why to upgrade from Vim 7.2 to 7.3+ and how to do it using
Homebrew
.
The easiest way to install Vim on Windows 7+ is to download and run the
gvim74.exe
file.
On Linux make sure to install the
vim package
with
sudo apt-get install vim
.
If you're using PyCharm as your IDE you won't need to install Vim as a
separate text editor - instead use the
IdeaVim
PyCharm plugin to get
Vim keybindings, visual/insert mode, configuration with ~/.ideavimrc and
other Vim emulation features.
Using Vim as a Python IDE
Once you get comfortable with Vim as an editor, there are several
configuration options and plugins you can use to enhance your Python
productivity. These are the resources and tutorials to read when you're
ready to take that step.
VIM and Python - a Match Made in Heaven
details how to set up a powerful VIM environment geared towards wrangling Python day in and day out.
The
python-mode
project is a Vim
plugin with syntax highlighting, breakpoints, PEP8 linting, code completion
and many other features you'd expect from an integrated development
environment.
Vim as Your IDE
discusses how to
set up Vim for greater productivity once you learn the initial Vim language
for using the editor.
Setting up Vim for Python
has a well written answer on Stack Overflow for getting started with Vim.
If you're writing your documentation in Markdown using Vim, be sure to
read this
insightful post on a Vim setup for Markdown
.
Vim Plugin resources
5 Essential VIM Plugins That Greatly Increase my Productivity
covers the author's experience with the Vundle, NERDTree, ctrlp, Syntastic
and EasyMotion Vim plugins.
Getting more from Vim with plugins
provides a list of plugins with a description for each one on its
usefulness. The comments at the bottom are also interesting as people have
suggested alternatives to some of the plugins mentioned in the post.
Powerline
is a popular statusline
plugin for Vim that works with both Python 2 and 3.
VimAwesome
is a directory of Vim plugins sourced
from Vim.org, GitHub and user submissions.
Command-T
is a Vim plugin for
fast fuzzy searching files.
YouCompleteMe
(
source code
) is a
code-completion engine and plugin that works for Python.
Vim Plugin Managers
If you use many Vim plugins together it is really handy to have a plugin
managers to sort out all of the dependencies. The following plugin managers
are the most commonly-used ones in the Vim ecosystem.
Vundle
comes highly recommended
as a plugin manager for Vim.
Pathogen
is a widely used
plugin manager.
Vim-plug
bills itself as a
minimalistic Vim plugin manager.
Niche tutorials
After you have been using Vim for awhile there will be features you bump
into without realizing they were ever there. The following tutorials show
how to use some specific niche features. You may already know about these
if you have been using Vim for awhile but everyone's learning path is
different so it's useful to do a quick scan to make sure you are not missing
anything.
Vimâs absolute, relative and hybrid line numbers
shows how to change the line numbering scheme. There was a period of
time I used relative line numbers although I eventually switched back
to absolute numbers. The usefulness of these schemes is often dependent
on what language you are working in.
A simpler Vim statusline
explains how to customize your bottom screen statusline
without
using
plugins such as
vim-powerline
or
vim-airline
.
The
vim-clutch
is a really cool
project and walkthrough that shows how you can create a foot pedal to
switch between Normal and Insert modes instead of using the typical ESC
key (or a remapped key).
How I'm able to take notes in mathematics lectures using LaTeX and Vim
explains how the author is able to keep up with mathematics
lectures by using Vim and LaTeX which produces gorgeous notes
that can be used to study.
Now that you know about Vim, what do you want to develop in it?
I want to know about working with data in Python.
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Vim
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Emacs - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Emacs
Emacs
(
source code
)
is an extensible text editor
that can be customized by writing Emacs Lisp (Elisp) code.
Why is Emacs a good choice for coding Python?
Emacs is designed to be customized via the built-in Lisp interpreter and
package manager. The package manager, named package.el, has menus for
handling installation. The largest Lisp Package Archive is
Melpa
, which provides automatic updates from upstream
sources.
Macros are useful for performing repetitive actions in Emacs. A macro
is just a recording of a previous set of keystrokes that can be replayed
to perform future actions.
Hooks, which are Lisp variables that hold lists of functions to call,
provide an extension mechanism for Emacs. For example,
kill-emacs-hook
runs before exiting Emacs so functions can be loaded
into that hook to perform necessary actions before the exiting completes.
Emacs is an implementation of the
text editors and IDEs
concept. Learn how these parts fit together in the
development environments
chapter or view
all topics
.
Python plus Emacs resources
Emacs is programming language agnostic by design so it takes some effort
to customize the editor as a Python-specific
development environment
. The following
resources will walk you through the setups that other developers have
created for working with Python.
Emacs - the Best Python Editor?
continues the excellent Real Python series showing how to get started
with editors. In addition to this Emacs post, there are also posts on
Vim
and
Sublime Text 3
specifically for Python development.
Python developers often use reStructuredText (RST) to document their
projects. This guide on
Emacs Support for ReStructuredText
is handy for properly configuring your environment to work with RST files.
Emacs as a Python IDE
is a video of a technical talk where the speaker sets up code completion,
documentation lookup and the
jedi-starter
kit on his
Emacs environment.
How do you create a robust Python IDE with Emacs (as the Text editor)
is a quality Stack Exchange thread that offers opinions about how to best
go about setting up Emacs for efficient Python development.
Tricked out emacs for python coding
is a short guide for handling ReStructuredText documents and adding
Python code metrics
tools to your Emacs environment.
General Emacs resources
Emacs, like any powerful tool, takes significant intentional practice to
use properly. These resources provide instructions for becoming comfortable
with the editor itself rather than specific Python environment configuration
advice.
GNU Emacs Manual
provides an official in-depth review for how to use Emacs.
Emacs is sexy!
provides a whole site with installation
instructions, cheat sheets and other materials for learning Emacs.
Emacs Redux
is a blog with tips and tricks for
how to use Emacs effectively.
Emacs Rocks
is a video tutorial series for Emacs.
The
Absolute Beginner's Guide to Emacs
and
Emacs as a Python IDE
are a couple of awesome detailed walkthroughs by
Jessica Hamrick
for setting up Emacs for
general development as well as Python coding.
Compiling and running scripts in Emacs
explains one workflow option you can use with Emacs to run code from
within the editor rather than bouncing out to a shell.
What the .emacs.d?!
provides a bunch of tiny
optimizations for Emacs' workflow.
The
Using Emacs Series
is
a set of videos along with an open source
Git repository of the configuration
for using and gaining experience with Emacs.
Programming Emacs with Elisp
Emacs can be completely customized and rewritten by using the Emacs-specific
Lisp programming language named Emacs Lisp (Elisp). The ability to completely
modify the editor is part of what led to the old joke "a great operating
system, lacking only a decent editor". Nevertheless, Elisp is what gives
Emacs its text editing power despite the perception that the editor is
overkill for working with text.
These tutorials will help you learn the Elisp language and use it to modify
Emacs for your own purposes.
An Introduction to Programming in Emacs Lisp
is the "official" introduction intended for a beginner programming
audience.
Emacs Lisp Guide
is for
developers that have been using Emacs for a while and want to start
making extensions to get more out of the editor.
The
Emacs Wiki
contains
advice and resources for getting oriented.
Practical Emacs Lisp
contains
a bunch of useful code and focuses on examples throughout the tutorial.
Notable Elisp Packages
Elisp
is the
LISP
programming language dialect that Emacs
using for adding and customizing functionality in the editor. The following
Elisp packages are existing Elisp libraries that many developers using Emacs
incorporate into their environment.
Magit
allows the user to inspect and modify
Git repositories from within Emacs.
company-mode
creates a modular in-buffer
completion framework.
Flycheck
provides syntax checking.
anaconda-mode
is specific
to Python development and allows code navigation, documentation lookup
and code completion.
web-mode.el
is a package for editing web templates
like
Jinja
. Many
Python template engines
are supported
including
Django templates
,
Mako
and
Cheetah
as well as
JavaScript
front-end frameworks.
Popular user configurations
Numerous custom Emacs user configurations exist that bundle together custom
Elisp packages and libraries to handle creating a powerful integrated
development environment. I recommend trying to configure Emacs yourself
before you dive into any of these configurations so it is easier to
learn base Emacs rather than get distracted by the customizations.
Prelude
is an enhanced Emacs
version 24 distribution.
A reasonable Emacs config
shows
a batteries-includes Emacs configuration bundle.
Emacs settings
is a repository of
configurations used in the Emacs Rocks screencasts.
Spacemacs
mashes together Emacs'
extensibility and Vim's ergonomic text editing features.
What's next once your development environment is set up?
Tell me about using the Vim editor for Python development.
I want to learn how to code a Python web application using a framework.
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Emacs
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Sublime Text - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Sublime Text
Sublime Text
is a commonly-used text editor
used to write Python code. Sublime Text's slick user interface along with its
numerous extensions for syntax highlighting, source file finding and analyzing
code metrics
make the editor more accessible to new
programmers than some other applications like
Vim
and
Emacs
.
Sublime Text is an implementation of the
text editors and IDEs
concept. Learn how these parts fit together in the
development environments
chapter or view
all topics
.
What makes Sublime Text awesome?
Sublime Text is often the first editor that newer programmers pick up because
it works on all operating systems and it is far more approachable than
Emacs
,
Vim
or even
PyCharm
.
It is easy to get started in Sublime because the menus and options are
accessible by using a mouse. There are no different modes to learn like
Vim's normal and insert modes. The keyboard shortcuts can be learned over
time rather than all at once in the case of Vim or Emacs.
Sublime Text works well for beginners as soon as they install it and then
can be extended with many of the features provided by an IDE like
PyCharm
as a developer's skill level ramps up.
An additional bonus of using Sublime Text as a Python developer is that
plugins are written in Python
.
Python developers can extend Sublime Text with their own programming language
rather than learn a new language like Emacs' Elisp or Vim's Vimscript.
Why use any other editor if Sublime is so great?
Picking a
text editor or IDE
to use tends to
be a weirdly personal decision for each developer. Yet it makes sense when
you realize that you are going to spend hours upon hours every day in your
chosen environment so why not make sure it is one that is enjoyable and
highly productive?
For some folks they prefer
Vim
's keyboard-driven style,
PyCharm
's Swiss Army Knife set of Python tools or one of
the many other editors with its own strengths and weaknesses.
The only "best" editor choice is to pick one that works really well for you
and stick to it. Master your tool so it gets out of your way and enables
as much time in
programming flow
as
possible.
Python-specific Sublime Text resources
There are many Python-specific Sublime Text tutorials and resources because
the editor is so frequently used to create Python applications. The following
links should get your editor customized with linters,
code metrics
, syntax checking and many other
integrated development environment
features.
Setting Up Sublime Text 3 for Full Stack Python Development
is a spectacular tutorial that covers installing Sublime Text and
configuring a multitude of helpful Python programming plugins.
Sublime Tutor
is an interactive in-editor
keyboard shortcuts tutorial that plugs into Sublime so you can learn and
become more productive as you use the editor.
Using Generators for Fun and Profit - Utility for developers
is not about setting up your Sublime Text environment but instead how to
create your own plugins using Python. The tutorial is written by the
author of a Sublime Text plugin who uses generators
to implement features with Sublime's API.
Turning Sublime Text Into a Lightweight Python IDE
shows the basic settings and configuration specific to using Sublime with
Python as more than just a text editor.
Setting up Sublime Text 3 for Python Type Checking
shows one way of setting up support for Python 3.6 static type checking in
Sublime.
Three steps to lint Python 3.6 in Sublime Text
walks through setting up
Flake8
to
enforce code style guidelines and show you the errors and warnings in
Sublime as you are working.
Text editing techniques every front-end developer should know
gives examples in Sublime Text of time-saving text manipulation you may
not have known existed such as line bubbling, ragged line selection,
AceJump and transpose. While the techniques can be used in most editors
the provided video clips show how to perform each of these shortcuts in
Sublime.
General Sublime Text resources
Sublime Text can be used for much more than Python development and there are
many useful tutorials that are not targeted at a specific programming language
which are still useful.
Super charge your Sublime Text 3 to increase your productivity
provides many shortcuts and tricks for using the editor.
Disassembling Sublime Text
uses a binary disassembler to dive into the reverse engineered
source code of Sublime Text because it is not open source software.
Sync your sublime text 3 configurations safely and easy
explains how to mitigate configuration conflicts that can arise when trying
to use copied files from one computer to another.
7 shortcuts of a highly effective Sublime Text user
shows keyboard shortcuts for opening any file, going to any specific
block of text, handling multiple cursors and more.
Sublime Plugin resources
Sublime Text plugins are written in Python which makes it convenient for
our ecosystem to customize the editor. The following resources provide
information on writing your own plugins as well as great community plugins
you will want to take a look at adding to your installation.
Sublime's documentation covers
plugin basics
, the
API for plugins
and
gives a
"Hello, world!"-level example
that you can extend.
Sublime Text plugin development basics
has some good advice and further resources.
The 25 Best Sublime Text Plugins for Front End Developers
is not specific to Python development but there is a bunch of overlap
between plugins useful for general front-end development and any Python
web development
project.
5 Awesome Sublime Plugins you Wonât Find in Top Plugin Posts
covers some lesser-known plugins and how you can find your own via
Package Control's trending plugins section
.
What do you want to code using Sublime Text?
I want to know about working with data in Python.
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Sublime Text
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

PyCharm - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
PyCharm
PyCharm
is a text editor and
integrated development environment specifically designed for writing
Python code.
PyCharm is an implementation of the
text editors and IDEs
concept. Learn how these parts fit together in the
development environments
chapter or view
all topics
.
PyCharm resources
JetBrains provides
courses for the PyCharm Educational Edition
that can be used to learn any edition of the IDE.
The
Mastering PyCharm
Talk Python to Me course is awesome when you want to invest in your skills
for using the IDE well.
Worth the switch to Pycharm?
is a solid discussion thread with different developers' perspectives
on using PyCharm for coding their applications.
Using PyCharm with Pyramid
is specific to developing and debugging
with the Pyramid web framework
.
Just switched from Atom to PyCharm
is a Reddit
/r/learnpython
thread with a positive experience of switching to PyCharm along with
some comments and feedback from other developers.
PyCharm Vs Visual Studio Code For Python Development
compares the editors on performance, extensions and resource consumption
for Python development.
PyCharm has excellent first-party official documentation for
getting started and configuring the IDE
.
The advantagee to using the official docs is that they tend to
be more up-to-date than community blog posts that were not
published recently because PyCharm has new major releases
twice per year.
Getting Started with PyCharm
is another JetBrains-produced tutorial that is exceptionally in-depth
and just right for beginners who need help with every step of setting
up and creating their first Python project.
Setting Up a Python Development Environment with PyCharm
is focused on the EV3 Lego Mindstorm Linux distribution but has some
good information and steps for anyone setting up PyCharm for the first time.
flask-pycharm-templates
are snippets that are commonly used when building Python,
Jinja2
and
Flask
applications that you can
import into your environment to use during development.
Unit Tests and Doctests in PyCharm
is a beginner's guide on why you would want to use tests and doctests in
your Python code and run them with PyCharm.
What do you want to learn about after PyCharm?
I want to know about working with data in Python.
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» PyCharm
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Jupyter Notebook - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Jupyter Notebook
Jupyter Notebook
(
open source code
), which began
as the iPython Notebook project, is a
development environment
for writing
and executing Python code. Jupyter Notebook is often used for exploratory
data analysis
and visualization.
Project Jupyter is the top-level project name for all of the subprojects under
development, which includes Jupyter Notebook. Jupyter Notebooks can also run
code for other programming languages such as
Julia
and
R
.
How does Jupyter Notebook work?
The key piece of Jupyter Notebook infrastructure is a web application that
runs locally for creating and sharing documents that contain embedded code and
execution results.
Jupyter Notebook is an implementation of the
text editors and IDEs
concept. Learn how these parts fit together in the
development environments
chapter or view
all topics
.
How are IPython Notebook and Jupyter Notebook related?
IPython Notebook was the original project that proved that there was great
demand among data scientists and programmers for an interactive, repeatable
development environment. Jupyter Notebook became the new official name for the
overall project during
The Big Split
after the IPython Notebook project matured into distinct submodules such as the
interactive shell, notebook document format and user interface widgets tools.
However, the IPython Notebook name sticks around as the Python backend for
Jupyter Notebook which is seriously confusing if you are searching the internet
and come across both current and old articles that use all of these names
interchangeably.
Jupyter Notebook beginner tutorials
Jupyter Notebook's powerful analysis and visualization environment can be
intimidating even for experienced developers that are new to the tool. The
following tutorials will explain the basics so you can quickly figure out
your own productive workflow.
Jupyter Notebook for Beginners: A Tutorial
is a great place to start if you have never before used the tool.
The guide covers installation, terminology, the user interface and
how to publish your notebooks to the web. Screenshots walk you
through some of the more confusing bits as you are getting up
and running.
First Python Notebook
is a free
guide on analyzing data with Python and Jupyter Notebook. It covers
many "Hello, World!"-style examples in both data analysis topics and
more general software development areas like Git, GitHub and Markdown.
IPython Or Jupyter?
covers the evolution of the Notebook concept from its origins in the IPython
Notebook implementation through the
IPython and Jupyter split
that happened in 2015 that separated IPython Notebook into logical subprojects.
The post kicks off with some fun lesser-known historical context on other
data science notebook projects such as MATLAB and Mathematica to set the stage
for IPython and Jupyter's creation.
How to use Jupyter Notebooks in 2020 (Part 1: The data science landscape)
is a high-level overview post that starts a series on Jupyter Notebooks.
This first post covers why a tool like Jupyter Notebook is needed in
the broader landscape of data science.
Part 2
examines the growth of the Jupyter ecosystem and the jump from exploratory
analysis notebooks to production notebooks.
Jupyter Notebook Best Practices
contains tips for beginners such as learning shortcuts and properly
documenting the analysis you work on.
How to Version Control Jupyter Notebooks
explains how Jupyter Notebooks are stored in JSON, the issues with that
format for
source control
and how to get
around the problem.
Example Notebooks
Example Notebooks are easy to fire up and see how other people are working.
These resources are highly recommended after you read a couple of tutorials
and play around with the tool.
Peter Norvig's collection of Jupyter Notebooks
is a an incredible resource for example projects.
Building and Exploring a Map of Reddit with Python
is a detailed notebook that digs into public Reddit data while explaining
the "what" and "why" along the way.
This
gallery of interesting Jupyter Notebooks
provides many great examples across numerous programming languages.
jupyter-samples
contains an extensive set of notebooks along with public data
sets that can be used for analysis.
learn-python3
is geared
towards Python beginners who want to learn basic syntax and standard
library features such as about string manipulation, functions and
iteration.
Intermediate to advanced Jupyter Notebook tutorials
Once you get the hang of the basics there are a slew of ways to connect
your notebooks to third party
APIs
and use more advanced Python libraries with your code. These walkthroughs
cover a range of topics from niche tricks to common but advanced situations
like advanced interactive visualizations.
Advanced Jupyter Notebook Tricks â Part I
and
Building Interactive Dashboards with Jupyter (Part 2)
have a ton more details on ways to set up Jupyter Notebooks as dashboards
and export results to other formats.
Creating Interactive Dashboards from Jupyter Notebooks
shows how to use public Reddit data for a data analysis project as
an example to display in dashboards running in a Jupyter Notebook.
mapboxgl-jupyter
library along
with the
quickstart
show you how to visualize geospatial data within your notebooks.
Reproducible Data Analysis in Jupyter
is a fantastic series of videos by
Jake Vanderplas
that shows how to move your
code from the interactive Jupyter environment into packaged, tested Python
code that is suitable for
deployment
to a production
environment.
How to use ipywidgets to make your Jupyter notebook interactive
is a tutorial on how to use the
ipywidgets
library
to make Jupyter Notebooks respond to users' input and go beyond
simply presenting data into having users be able to do some additional
analysis themselves.
28 Jupyter Notebook tips, tricks and shortcuts
explains many of the lesser-known keyboard shortcuts and mechanisms
to output settings.
Boost Your Jupyter Notebook Productivity
covers hotkeys, data plotting, shell commands, timing and other topics
you will eventually want to handle within your notebooks as you get
comfortable in the environment.
Making Publication Ready Python Notebooks
explores the plugins that the author uses when creating and exporting
reports from Jupyter.
PyData has an extensive
list of Jupyter Notebook talks
from past events.
JupyterCon
has a similarly extensive talks list that is also worth watching.
Integrate Google Sheets and Jupyter Notebooks
answers the common question of how to extract data directly from a Google
Sheet and start working with it in your Jupyter Notebook. The screenshots
help a lot to make sure you avoid getting lost in the sea of menus along
the way.
Analyzing Cryptocurrency Markets using Python
uses a freely-available Bitcoin API as a source data set
for a data analysis and visualization project in Jupyter.
nbdev: use Jupyter Notebooks for everything
shows how to use the
nbdev
tool to create a literate
programming environment within a Jupyter Notebook so that you can do
all of your debugging and refactoring there rather than switching between
a more traditional IDE and Jupyter.
Running Jupyter Notebooks on GPU on AWS: a starter guide
explains how to run notebooks on Amazon Web Services using a
graphics-processing unit (video card), which for some machine learning
situations can result in significantly faster execution times.
Python & Big Data: Airflow & Jupyter Notebook with Hadoop 3, Spark & Presto
walks through a data pipeline that combines several commonly-used
data analysis
tools with a Jupyter Notebook.
Ansible-jupyter-kernel
is a kernel that allows you to run
Ansible
tasks and
playbooks from within your Jupyter environment.
Jupyter Notebooks in the IDE
explains how to use Jupyter files in Visual Studio Code or
PyCharm
with Jupytext, which defines the
pairing information and notebook kernel.
The Notebook Wars
is not a
tutorial but instead points to the weaknesses that become apparent when
using Jupyter and the current generation of notebook projects. The
article raises many good points about barriers to entry although you
could also argue some of these issues have been mitigated by Jupyter, just
not as much as some people would like to see. Overall there is a lot to
enjoy reading here and reflect on so that the community can continue making
Jupyter a fantastic environment for development.
Creating Presentations with Jupyter Notebook
shows how to make slides out of your cells so you can present your
work like a traditional presentation.
The number of open source Jupyter Notebooks on GitHub is exploding and
this post attempts to estimate the growth
using Python,
pandas
and a scraped data set.
Reproducible Jupyter Notebooks with Docker
explains when to use
Docker
in combination with Jupyter
Notebooks as well as the instructions for creating a dockerfile to build
your images.
JupyterLab GPU Dashboards
contains a
Bokeh
server and TypeScript code for displaying
GPU utilization charts.
What do you want to build Jupyter Notebook?
I want to learn how to code a Python web application using a framework.
I want to know about working with data in Python.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Jupyter Notebook
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Bash shell - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Bash shell
The
Bourne-Again SHell
(
source code
), almost
always referred to simply as "
Bash
", interprets and executes input
entered from a source such as the user or a program. Bash is an
implementation of the
shell concept
and is often used
during Python software development as part of a programmer's
development environment
.
Bash is an implementation of the
shells
concept. Learn more in the
development environments
chapter or view the
table of contents
for all topics.
How do Python developers use Bash?
If you are programming in the terminal on
macOS
or
Linux
, or using the
Windows Subsystem for Linux on Windows 10
,
you can easily gain access to Bash if it is not already
your default shell.
You can show what shell you are currently using by echoing the
SHELL
environment variable, like so:
$ echo "
$SHELL
"
Which will then print the shell you are currently using. For example,
on macOS I am using Bash by default so the echo command prints:
/bin/bash
How much you use Bash or any shell will likely depend on your
development environment
, especially
if you are using an editor like
Vim
instead of an
IDE like
PyCharm
, because it is often easier to do
certain tasks in the shell. For example, most developers I know who
use PyCharm will search for some instance of source code right in
their IDE, whereas I use a combination of Vim and
tmux
so I frequently flip between panes to use commands like
grep
to
do my source code searches.
There is no right way to perform a task like source code searching, it's
really just what works for your brain as a developer that will guide
how often you interact with the Bash shell.
Getting started with Bash
Working with a shell, Bash or otherwise, is intimidating the first time
you try to get started. You are staring at the
$
prompt without a
whole lot of direction.
When you are completely new to using Bash, it is a good idea to at least
scan, if not take some additional time for in-depth reading of the
documentation for commands that every developer uses. The following
commands are used so frequently in Bash that an experienced developer
probably does not even think about them anymore, they become just a
natural part of your workflow:
echo
:
print text to the command line
ls
:
list the contents of a directory
cd
:
change the working directory
cp
:
copy a file or directory
mv
:
move one or more files
rm
:
delete one or more files or directories
If you know how to use the above commands then you will at least be able
to move around the file system, create, move and update files and know
what is on your storage device(s).
The following commands are somewhat more advanced but also frequently
used by developers:
su
:
run comamnds as different users or groups
whoami
:
print which user you are currently logged in as
grep
:
searches for patterns in files
The above lists are not even close to exhaustive for what commands
you need to know when working with Bash. Read some of the following
introductory tutorials to gain a better understanding of working
with this shell:
The Linux command line for beginner
by
Ubuntu
will provide you with context for how to
use the command line, working with files and directories, and handling
superuser commands.
Bash Guide for beginners
is an entire book for those new to working with command lines. It covers
commands, paths, Bash shell scripting, variables and many other critical
topics that are necessary to move from beginner to advanced Bash user.
101 Bash Commands and Tips for Beginners to Experts
gives a well-done laundry list of tricks to explore.
Bash Quick References
is a cheat sheet for
common operators and signals that come up when working with scripts.
Bash scripting
Bash is used not only as an interactive prompt but also for scripting, which
makes it possible to execute one or more Bash commands stored within a file.
These scripts can be short, with only a single command, or very complicated
with control-flow logic, for loops, and almost anything you want to automate
or compute because
Bash is a Turing-complete programming language
.
Complex Bash scripts sometimes get a negative reputation because they can be
difficult to read and understand if you are not the original author (or you
are reading your own script after a significant period of time has elapsed).
There are many ways to accomplish the same tasks with Bash so the files are
often confusing to read unless the author of a script included clear
documentation. This readability problem is typically less of an issue with
Python scripts because spacing is enforced and the standard library
encapsulates common tasks.
It's a good idea to think about how you want to structure your Bash scripts
as they grow larger. The following resources provide insight into what you
should consider while coding Bash scripts.
This
minimal safe Bash template
contains an 86-line Bash script that the author claims once you
understand and use it as a base then it will make your scripts
easier to maintain over time.
Creating a bash completion script
is a great tutorial that walks you through a reasonably complex Bash
script for completing syntax in other Bash shell scripts.
Anybody can write good bash (with a little effort)
covers the basics of shell scripting and provides some recommendations
for creating more maintainable scripts such as using linters and
formatters.
Google's
Shell Style Guide
covers how to write consistent, maintainable shell scripts, which is
particularly important if you have ever tried to debug a hacky shell
script that was never meant to be used by anyone other than the original
author.
Bash scripting quirks & safety tips
explains Bash basic programming constructs like
for
loops and variable
assignment then goes into ways to avoid weird issues in your code.
If all else fails when you're trying to use Bash scripts, this article
on
replacing Bash scripts with Python
is a guide on swapping in Python for administrative scripting, including
what to do about replacing invaluable command line tools such as
awk
,
sed
and
grep
.
Additional Bash resources
The following resources cover more advanced Bash use cases and what pitfalls
to try to avoid as you work with the shell or write scripts.
Advancing in the Bash shell
covers important concepts such as bang syntax, movement commands,
tab completion and aliases.
Mastering Bash and Terminal
shows methods for repeating commands, changing directories and
handling background processes.
Ten Things I Wish Iâd Known About Bash
covers some edge cases that are very useful to know about such as
proper exit code usage and configuration options through the
set
command. There is also a great follow up post called
Ten MORE Things I Wish I'd Known About Bash
that covers new topics such as on-the-fly command re-execution using the
carrot character. The
Seven Surprising Bash Variables
post continues the series by examining built-in variables such as
PROMPT_COMMAND
,
CDPATH
and
REPLY
which can simplify your
scripts by using values that Bash already has stored for you.
Safe ways to do things in bash
shows you how to not shoot yourself in the foot by using safe coding
practices with your shell scripts.
The
Bash Infinity Framework
source code
provides
boilerplate and a standard library for Bash projects so they are easier
to read and maintain. If you have ever tried to read someone else's
Bash scripts or even your own after setting them aside for a couple of
months, you know that anything which makes readability better is a major
step up from vanilla Bash.
Static status
is a Bash
application that generates a hostable, customizable status page for your
services.
Using Aliases to Speed Up Your Git Workflow
has a bunch of shell aliases that make it easier for you to execute
complicated or uncommon
Git
commands.
6 Tips Before You Write Your Next Bash Cronjob
covers starting your scripts with shebang, redirecting output, timeouts
and sudo privileges.
Better Bash history
shows how to make your Bash history more useful by having it store more
previous commands (which takes up more persistent storage but is not
a huge deal in 2019) and add timestamps to the
history
command.
9 Evil Bash Commands Explained
presents a list of commands
you should never run
, but can learn about
their destructive abilities by reading through the descriptions provided
by the author.
Faster bash startup
and
Even faster bash startup
are two great tutorials that will save you a bunch of time if you frequently
open new Bash shells. On many systems you can easily cut down the startup
time for the shell which can be unnecessarily sluggish.
Bash HTTP monitoring dashboard
(
source code
)
is a useful application fully written in Bash shell scripts that
monitors the health of one or more websites to make sure they are
up and running.
What do you want to learn about Python development?
What editor should I use to code my Python app?
I've built a Python web app, now how do I deploy it?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Bash shell
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Zsh shell - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Zsh shell
Zsh
interprets and executes input
entered from text sources such as user input or from another application.
Zsh is an implementation of the
shell concept
that is
frequently used during Python software development as part of a
programmer's
development environment
.
Zsh is an implementation of the
shells
concept. Learn more in the
development environments
chapter or view the
table of contents
for all topics.
Zsh beginner's resources
Getting Started with Zshell
has a short video showing off Zsh features and then shows how to handle
aliases, globbing and parameter expansion.
Switching to Zsh
goes on a
bit about how Zsh is better than
Bash
in his opinion, then shows how to use it as your default shell with a
custom theme.
Become A Command-Line Power User With Oh My ZSH And Z
provides a long in-depth tutorial on a slew of Zsh features and how
to use them if you have never previously used Zsh.
No, Really. Use Zsh.
goes through
the laundry list of advantages provided by Zsh compared to other shells.
Zsh configuration
Oh My Zsh
is a configuration
manager for Zsh.
Zsh Configuration From the Ground Up
is a wonderfully-written detailed post on the setup that the author
uses along with why he enjoys using Zsh for development.
What do you want to learn about Python development?
What editor should I use to code my Python app?
I've built a Python web app, now how do I deploy it?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Zsh
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

PowerShell - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
PowerShell
PowerShell
is a commandline
user interface for Windows that is often used as part
of a Python programmer's
development environment
.
PowerShell is an implementation of the
shells
concept. Learn more in the
development environments
chapter or view the
table of contents
for all topics.
PowerShell resources
A Python Developer's Guide to Powershell
explains the PowerShell scripting language then shows how to combine a
Python script and a PowerShell script to automate web scrapining downloads.
ChatOps with PowerShell
covers
how to use the Python-based chatbot named ErrBot. It also presents example code
to connect ErrBot to applications you are running.
PowerShell in Azure Functions
shows how to use PowerShell code in Azure
serverless
Functions.
Getting Started with Windows PowerShell
is a guide for your first steps with PowerShell.
Windows Command-Line: Backgrounder
and
Windows Command-Line: The Evolution of the Windows Command-Line
give historical perspective on how the Windows shell has evolved from
MS-DOS days into the current Windows 10 world.
Learning a New REST API with PowerShell
covers how to create the common GET, POST, PUT and DELETE requests that are
used to work with
RESTful APIs
.
The the tutorial also contains some tips and tricks for reading API
documentation and how to use PowerShell more effectively in these
situations.
PowerShell in Azure Functions
shows you how to use PowerShell scripting language code in your Azure
Functions. The language is only in experimental mode on Azure Functions
but could be useful if you have a bunch of existing scripts that you want
to use on the
serverless
platform.
PowerShell Core support in AWS Lambda
is an announcement post that PowerShell can be used in AWS Lambda Functions
along with how to get started.
PowerShellBuild
provides common
reusable tasks for building PowerShell modules.
Invoke-Build
is a build
automation tool. There is also extensive documentation on their
wiki
.
Two months with Powershell on a UNIX
examines one developer's experience using PowerShell not on Windows
but on a *nix
operating system
. The author
covers the advantages and disadvantages he found during his experience
and some of the bugs he hopes are fixed in PowerShell 7.
What do you want to learn about Python development?
What editor should I use to code my Python app?
I've built a Python web app, now how do I deploy it?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» PowerShell
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

tmux - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
tmux
tmux
(
source code
) is a
terminal multiplexer
implementation
often used during Python development on Linux and macOS. tmux grants
greater control over a programmers's
development environment
by making it
easier to use many shells at once and attaching to both local and remote
shell
sessions.
tmux is an implementation of the
terminal multiplexers
concept. Learn more in the
development environments
chapter or view the
table of contents
for all topics.
tmux resources
Tmux and Vim - even better together
explains how using tmux with the
Vim
editor provide better
multi-window navigation using only keystrokes and other benefits. As an avid
tmux+Vim user myself, I can attest to how great these two tools complement
each other.
Writing & Coding Workflow
shows one
developer's configuration that combines
Vim
and several plugins
with tmux for a productive setup.
Making tmux Pretty and Usable - A Guide to Customizing your tmux.conf
Tmux Pairing Anywhere: On Your Box
Using tmux Properly
The Power Of tmux Hooks
There are a slew of "cheat sheets" for tmux out there, here are a few
good ones:
tmux cheat sheet
shortcuts & cheatsheet
tmux & screen cheat-sheet
Multiplexers: tmux and screen
Learn more about dev environments or move to editors?
I want to learn how to code a Python web application using a framework.
Tell me about using the Vim editor for Python development.
I'd like to learn about Emacs for Python coding.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» tmux
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Screen - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Screen
Screen
(
source code
) is a
terminal multiplexer
implementation
often used during Python development on Linux and macOS
operating systems
. Screen makes it easier for
programmers to use many shells within a single terminal window while
developing their applications.
Screen is an implementation of the
terminal multiplexers
concept. Learn more in the
development environments
chapter or view the
table of contents
for all topics.
Screen resources
Learn to use screen, a terminal multiplexer
SCREEN - the terminal multiplexer
Using GNU Screen to Manage Persistent Terminal Sessions
Learn more about dev environments or move to editors?
I want to learn how to code a Python web application using a framework.
Tell me about using the Vim editor for Python development.
I'd like to learn about Emacs for Python coding.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Screen
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Application Dependencies - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Application Dependencies
Application dependencies are the libraries other than your project code
that are required to create and run your application.
Why are application dependencies important?
Python web applications are built upon the work done by thousands of open
source programmers. Application dependencies include not only web frameworks but
also libraries for scraping, parsing, processing, analyzing, visualizing,
and many other tasks. Python's ecosystem facilitates discovery, retrieval and
installation so applications are easier for developers to create.
Finding libraries
Python libraries are stored in a central location known as the
Python Package Index
. PyPi contains
search functionality with results weighted by usage and relevance based on
keyword terms.
Besides PyPi there are numerous resources that list common or "must-have"
libraries. Ultimately the decision for which application dependencies are
necessary for your project is up to you and the functionality you're looking
to build. However, it's useful to browse through these lists in case you come
across a library to solve a problem by reusing the code instead of writing it
all yourself. A few of the best collections of Python libraries are
Python.org's useful modules
which groups modules into categories.
GitHub Explore Trending repositories
shows the open source Python projects trending today, this week, and this
month.
Wikipedia actually has an extensive
page dedicated to Python libraries
grouped by categories.
Isolating dependencies
Dependencies are installed separately from system-level packages to prevent
library version conflicts. The most common isolation method is
virtualenv
. Each virtualenv is its
own copy of the Python interpreter and dependencies in the site-packages
directory. To use a virtualenv it must first be created with the virtualenv
command and then activated.
The virtualenv stores dependencies in an isolated environment. The web
application then relies only on that virtualenv instance which has a separate
copy of the Python interpreter and site-packages directory. A high level of
how a server configured with virtualenv can look is shown in the picture below.
Installing Python dependencies
The recommended way to install Python library dependencies is with the
pip
command when a virtualenv
is activated.
Pip and virtualenv work together and have complementary responsibilities.
Pip downloads and installs application dependencies from the central
PyPi
repository.
requirements.txt
The pip convention for specifying application dependencies is with a
requirements.txt
file. When you build a Python web application you
should include
requirements.txt
in the base directory of your project.
Python projects' dependencies for a web application should be specified
with pegged dependencies like the following:
django==1.11.0
bpython==0.12
django-braces==0.2.1
django-model-utils==1.1.0
logutils==0.3.3
South==0.7.6
requests==1.2.0
stripe==1.9.1
dj-database-url==0.2.1
django-oauth2-provider==0.2.4
djangorestframework==2.3.1
Pegged dependencies with precise version numbers or Git tags are important
because otherwise the latest version of a dependency will be used. While
it may sound good to stay up to date, there's no telling if your application
actually works with the latest versions of all dependencies. Developers should
deliberately upgrade and test to make sure there were no backwards-incompatible
modifications in newer dependency library versions.
setup.py
There is another type of dependency specification for Python libraries
known as
setup.py
.
Setup.py is a standard for distributing and installing Python libraries.
If you're building a Python library, such as
twilio
or
underwear
you must include setup.py
so a dependency manager can correctly install both the library as well as
additional dependencies for the library. There's still quite a bit of
confusion in the Python community over the difference between
requirements.txt and setup.py, so read this
well written post
for
further clarification.
Open source app dependency projects
pip and venv
are part of
Python 3's standard library as of version 3.3. However, there are numerous
other open source libraries that can be helpful when managing application
dependencies in your projects, as listed below.
Autoenv
is a tool for activating
environment variables stored in a
.env
file in your projects' home
directories. Environment variables aren't managed by virtualenv and although
virtualenvwrapper has some hooks for handling them, it's often easiest to
use a shell script or
.env
file to set them in a development environment.
Pipenv
is a newer Python
packaging and dependency management library that has seen some adoption
in place of the standard
pip
library.
Pipreqs
searches through a project for
dependencies based on imports. It then generates a
requirements.txt
file
based on the libraries necessary to run those dependencies. Note though that
while this could come in handy with a legacy project, the version numbers
for those libraries will not be generated with the output.
pip-check
presents a nicely-formatted
list of all your installed dependencies and the status of whether or not
updates are available for each of them.
pip-name
is a straightforward
library that looks up package names on PyPI and tells you whether or not
the library name is already taken.
Code library packaging guides
There are many steps in creating and distributing packages on PyPI and
your own hosted application dependency servers. Many of these steps involve
writing configuration files that are not as well documented as some other
areas of Python development. These resources are the best ones I have found
so far to get up to speed on building and releasing your own packages.
Python Packaging User Guide
provides a collection of resources to understand how to package and
distribute Python code libraries.
How to Publish Your Package on PyPI
is for developers who have created a code library they would like to
share and make installable for other developers.
How to Submit a Package to PyPI
presents the basic steps like signing up for a PyPI account and other
accounts that go along with the tutorial. It then walks through the
configuration code for setting up continuous integration and deploying
your package.
Application dependency resources
The following links provide advice on how to use Python packages as well
as package your own dependencies for projects or consumption by other
developers.
Python's New Package Landscape
covers the history of Python packaging tools and examines the
problems with dependency isolation and the dependency graphs that
newer tools such as
Pipenv
,
Poetry
,
Hatch
and
pipsi
aim to solve.
Python Packaging Is Good Now
is a wonderfully written blog post. It provides historical context on why
Python's code library packaging was painful for a long time, and what's
been fixed to make building and installing application dependencies so
much better.
A non-magical introduction to virtualenv and pip
breaks down what problems these tools solve and how to use them.
Thereâs no magic: virtualenv edition
breaks open the virtual environment "black box" to show you what the
tool is doing when you use its commands.
Using pyenv to manage your Python interpreters
explains how the pyenv tool can make it easier to switch between different
versions of Python for each project and gives a brief review of the
important things to know when using the tool such as local versus global
scope.
Testing & Packaging
examines
a configuration for ensuring tests run against your code and how to
properly package your project.
12 Alternatives for Distributing Python Applications in 2020
covers packaging with
Docker
, Vagrant, PyInstaller,
Briefcase, virtual environments, Pipx and several more options for
bundling and running Python code.
Python Application Dependency Management in 2018
presents some critical analysis and critique oof the existing Python
dependency management tools including newer ones such as pipenv and
Poetry.
Open source trust scaling
is a good piece for the
Python community
(and other programming communities) that is based on the
left-pad NPM situation
that broke many dependent packages in the Node.js community.
Major speed improvements were made in pip 7 over previous versions. Read
this article about the differences
and be sure to upgrade.
Typosquatting programming language package managers
shows how many packages on centralized dependency servers for Python,
Node.js and Ruby can be vulnerable to "typosquatting" where a developer
either confuses a fake package for the correct one or simply makes a
typo when specifying her dependency list.
The Many Layers of Packaging
goes up and down the packaging stack and even covers bits about virtual
environments and security. It's well worth investing some time to read
this post to get an overview of the many layers involved in dependency
packaging.
Application dependencies learning checklist
Ensure the libraries your web application depends on are all captured in
a
requirement.txt
file with pegged versions.
An easy way to capture currently installed dependencies is with the
pip freeze
command.
Create a fresh virtualenv and install the dependencies from your
requirements.txt
file by using the
pip install -r requirements.txt
command.
Check that your application runs properly with the fresh virtualenv and
only the installed dependencies from the
requirements.txt
file.
What's next after installing app dependencies?
What runs a Python application execute on the server?
Tell me about standard relational databases.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Application Dependencies
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Virtual environments (virtualenvs) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Virtual environments (virtualenvs)
Virtual environments, implemented by the library virtualenv and venv
(added to Python standard library in Python 3.3 via
PEP 405
), separate project
dependencies, such as the
Django
library code,
from your code projects. For example, if you have three projects,
one that uses Django 1.7, another that uses Django 2.0 and another project
that does not use Django at all, you will have three virtualenvs that
each contain those dependencies separated from each other.
How do virtualenvs work?
Virtualenv provides dependency isolation for Python projects. A
virtualenv creates a separate copy of the Python installation that is
clean of existing code libraries and provides a directory for new
application dependencies
on a
per-project basis. A programmer can technically use a virtualenv for many
projects at once but that is not consider to be a good practice.
Virtual environment resources
Package management in Python 2 or 3 (Linux and Mac) with virtualenv or venv
Thereâs no magic: virtualenv edition
Virtual environments dymystified
What is the relationship between virtualenv and pyenv?
Setting up Python on a Unix machine (with pyenv and direnv)
venv â Create Virtual Environments
Python development environment, 2018 edition
What's next after virtualenvs?
What runs a Python application execute on the server?
Tell me about standard relational databases.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Virtualenvs
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Localhost tunnels - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Localhost tunnels
A localhost tunnel establishes a connection between your local machine
and a remote connection. The connection is intended to proxy traffic
from a publicly-addressable IP address and URL to your local machine.
Localhost tunnels are most useful for allowing a tester to connect
to a server running on your local development system so they can try
out an in-development application you are building but have not yet
deployed
.
Localhost tunnel services
There are numerous localhost tunnel services that have similar features.
The following services are listed in order from ones I have had the most
experience with to the ones I have not used.
ngrok
is the service I use most often. It is
easy and worth the small fee to upgrade your account with a few
extra features such as fixed, customizable subdomains. There is
also a
Python wrapper for ngrok called pyngrok
that makes it easy to programmatically access the ngrok client
from Python applications.
Localtunnel
is a localhost
tunnel written in Node.js.
Burrow
provides another service, albeit one
that I have not used myself.
What to code now that you have a localhost tunnel?
I want to learn how to code a Python web application using a framework.
Show me a list of the best Python learning resources.
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Localhost tunnels
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Git - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Git
Git
is a distributed open source
source control
(also referred to as "version
control") system commonly used to track and manage file changes. Git is
frequently used as the version control system for Python projects.
Git is an implementation of the
source control
concept. Learn how these pieces fit together in the
development environments
chapter or view the
table of contents
for all topics.
Why is Git widely-used by developers?
Git is a
distributed
version control system (DVCS) compared to the
centralized models previously provided by
Subversion
and
CVS
.
Files would need to be "checked out" over the network by a single person at
a time while she was working. The network transfer speed as well as the
blocking check out model became a significant bottleneck, especially for
large development teams.
Git clones a full repository and its entire history instead of just the
current state of a file. Developers only require a network connection when
pulling updates and pushing changes to a backup repository. The commit log
and file histories are stored and transmitted far more efficiently than
prior version control systems to maximize the effectiveness of the
distributed version control design.
Another issue with traditional VCS was that it was difficult to create
branches. Take a look
at this tutorial on managing a CVS repository
as an example of the confusion the existing non-distributed models could
cause. Git simplified the branching process with simplified commands
such as
git checkout -b
and faster branch merging and clean up. In contrast
to earlier version control systems, Git encourages developers to create local
branches and experiment in them without impacting a stable
master
branch.
GitHub
also helped to drive Git as the overwhelming
version control favorite by providing the open source community with free open
remote Git repositories. GitHub's web application user interface, issue
tracking and pull request features for maintainers and consumers also
encouraged more collaboration than Git alone. Recently,
GitHub's third-party marketplace
has
begun to add more features by integrating
continuous integration
servers like
as
Jenkins
and
code metrics
services.
Beginner Git tutorials
Git can take awhile to wrap your head around, even for experienced software
developers. The following tutorials can quickly get you up to speed.
The
official Pro Git
book is available
online for free. It is awesome both as a step-by-step walkthrough and as
a bookmarked reference on specific topics.
Git from the inside out
provides a spectacular walkthrough for developers who have used Git before
but want to go deeper in understanding what each command does under the
covers instead of simply using the tool as a black box.
Think like a Git
is another introduction
that focuses more on the graph theory and conceptual ideas behind Git
to help the reader understand what's happening as they use Git commands.
Git and GitHub in plain English
is a high-level overview of both Git and GitHub. This guide is intended
for both non-programmers and junior developers who want to learn everything
from terminology to workflow.
A Hacker's Guide to Git
is a free ebook written for experienced developers that contains both
the syntax and the conceptual ideas behind how Git works.
A Designer's Guide to Git
gives a beginner's Git overview for non-programmers. The tutorial also
covers using Git clients such as the GitHub desktop application.
Git in Six Hundred Words
is a concise essay explaining what happens when you add and commit files
in a Git repository.
19 Tips For Everyday Git Use
is a laundry list of helpful Git tips on commands such as
git bisect
,
git stash
and
git difftool
.
git ready
presents beginner, intermediate and
advanced tips for how to use Git. The example commands and their results
are great for learning Git piece-by-piece.
Advanced Git tutorials and resources
You won't learn Git in an afternoon or even a few months of usage. After
six-plus years of working with Git I still get tripped up and have a lot to
learn. These tutorials have taught me some of the beyond-the-basics edge
cases.
Flight rules for git
contains common commands that answer specific desired tasks such as
"I want to discard specific unstaged files" (
git checkout filename
) and
"I want to rename a branch" (
git branch -m newname
).
Shadows Of The Past: Analysis Of Git Repositories
explains how you can extract some surprising data from Git repositories'
commit history, such as which developers are domain experts in certain
tools, potential hot spots in the code and coupling between source code
files. This is a great read once you get past the basics of using Git.
Write yourself a Git!
is a tutorial for building
your own version of Git from scratch with 503 lines of Python code. The
result is obviously not as full-featured as the real Git implementation
but this program is awesome for understanding how Git's internals work.
Phil Nash
shows how to use the
git reflog
command
in
Git back to the future
.
On undoing, fixing, or removing commits in git
is a fantastic overview of how to unscrew a whole slew of bad situations
you may find yourself in if you use Git for long enough.
High-level Problems with Git and How to Fix Them
is a long-form article on how to fork properly (and how not to use them)
and how to not go crazy using branches and remote repositories.
Specific Git resources
Large tutorials are great for getting started with Git. However, sometimes
you need tactical support or want to learn new tricks to add to your
workflow. These resources will come in handy for specific Git subjects.
How to Write a Git Commit Message
provides strong advice that will help you write consistent, concise and
contextual messages on your commits. Commit messages are especially
important when working with others on a long-lasting project where you
dive through the commit history via
git log
and related commands.
How to squash Git commits
explains how to use the
git rebase
command in interactive mode to
consolidated the number of commits in your history. This technique is
useful when a group of commits are related and it's easier to understand
them as a single commit rather than a collection of smaller commits.
Oh shit, Git!
is a profanity-filled description
of tips to get you out of binds you may find yourself in when you get too
tricky with Git commands.
Tips for a disciplined git workflow
is less about workflow and more about how to write self-explaining commit
messages, self-containing each commit and modifying branch history
when you muff up before it is merged into master.
Another Git catastrophe cleaned up
goes through a difficult merge scenario that required deep Git
understanding to properly fix.
Erlang's source code provides a concise explanation on
writing good commit messages
that any programming ecosystem can learn from.
Git internals
is a presentation that covers how Git stores data, how to work with
the Git history, and good practices for using Git based on the
knowledge of how it works internally.
Chasing a bad commit
examines the
git bisect
command and how it can be used in either
interactive mode or on its own with
git bisect run
to find the
problematic code commit that needs to be fixed.
GitTips
is a list of
pro tips to clean up common issues and how to dive through Git history
to find specific text.
Git allows command aliasing, which allowed one developer to create his
own list of
lesser known Git commands
that alias more complicated Git lines.
Little things I like to do with Git
has some nice tips such as easily viewing branches you recently worked
on and generating a changelog from your commits.
Git from the inside out
demonstrates how Git's graph-based data structure produces certain behavior
through example Git commands. This is a highly recommended read after you've
grasped the basics and are looking to go deeper with Git.
How I configure my git in a new computer
shows how to handle a
.gitconfig
file, with
an example Gist
that the author uses for his own environment.
How to Quickly and Correctly Generate a Git Log in HTML
is an interesting look at how string processing on *nix systems works
by generating an HTML page from a Git log. If you need to output your
Git commits somewhere and are having trouble writing your own script
you should check out some of the interesting solutions the author
presents.
Better Git configuration
explains global config options, revisions and merging along with several
other commands that can be customized to your taste.
Why does Git use a cryptographic hash function?
explains that the SHA-1 hash isn't used for security on Git, it's a
consistency check.
SHA-1 has been broken
in practice so Git needs to transition to a stronger hash without proven
collisions but it's not quite as big of a concern compared to
security-related projects that use SHA-1.
The anatomy of a git commit
digs into the tree and commit objects that underpin the Git source control
system. This is an awesome read to get a view on how Git works under the
commands you're using to manipulate these objects.
How to Undo Mistakes With Git Using the Command Line
is a video that covers topics like resetting a file to an old revision,
recovering deleted commits, squashing multiple commits into one with
interactive rebase and recovering deleted branches.
Git Workflows
Teams of developers can use Git in varying workflows because of Git's
distributed model and lightweight branching. There is no "right way" to
use Git, especially because development teams can range in size from a
single developer up to entire companies with thousands of developers in
a repository. The only correct answer is to let the developers decide on
a workflow that maximizes their ability to frequently commit code and
minimize merge conflicts.
git-flow
shows
one possible way for small teams to use Git branches.
GitHub Flow
explains
why at GitHub they do not use the git-flow model and provides an
alternative that solves some of the issues they found with git-flow.
Comparing workflows
provides a slew of examples for how developers on a team can handle merge
conflicts and other situations that commonly arise when using Git.
GitHub resources
GitHub is a software-as-a-service application
owned by Microsoft
that makes it easier to collaborate with other developers on centralized
Git repositories. The site also provides a remote backup location for
repositories as well as secure, private repository storage. The following
tutorials show how to get started using Git on GitHub.
Introduction to Git and GitHub for Python Developers
covers basic usage for Git and working with repositories locally and on
the GitHub service.
Hello World: GitHub edition
and
Git and GitHub learning resources
are GitHub's official guide and learning resources.
A Beginnerâs Git and GitHub Tutorial
shows how to perform your first commit and back it up on GitHub.
What else do you want to learn about?
I've built a Python web app, now how do I deploy it?
I want to learn more about app users via web analytics.
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Git
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Mercurial - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Mercurial
Mercurial
is a distributed open source
source control
(also known as "version
control") system written in Python for tracking and handling file
modifications. Mercurial can be used as the version control system for
Python projects.
Mercurial is an implementation of the
source control
concept. Learn how these pieces fit together in the
development environments
chapter or view the
table of contents
for all topics.
Mercurial tutorials
The official
Mercurial tutorial
goes through the basics. It has great examples for syntax and expected
output.
Getting started with Mercurial for version control
seems mistitled because it is actually a short tutorial on how to build
Mercurial extensions in Python. With a few lines of Python code it shows
how to create your first extension and test it.
Mercurial: The Definitive Guide
is a free online version of the
O'Reilly book
.
Monoroke
is a
Mercurial server written in Rust designed to be used for very large
monorepos that have thousands of commits affecting millions of files
per hour.
What else do you want to learn about?
I've built a Python web app, now how do I deploy it?
I want to learn more about app users via web analytics.
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
Text Editors & IDEs
Vim
Emacs
Sublime Text
PyCharm
Jupyter Notebook
Shells
Bash shell
Zsh
PowerShell
Terminal Multiplexers
tmux
Screen
Environment configuration
Application Dependencies
Virtualenvs
Localhost tunnels
Source Control
Git
Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
» Mercurial
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

PostgreSQL - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
PostgreSQL
PostgreSQL
, often written as "Postgres" and
pronounced "Poss-gres", is an open source
relational database
implementation frequently used by
Python applications as a backend for data storage and retrieval.
How does PostgreSQL fit within the Python stack?
PostgreSQL is the default database choice for many Python developers,
including the Django team when testing the
Django ORM
. PostgreSQL is often
viewed as more feature robust and stable when compared to MySQL, SQLServer
and Oracle. All of those databases are reasonable choices. However, because
PostgreSQL tends to be used by Python developers the drivers and example
code for using the database tend to be better documented and contain fewer
bugs for typical usage scenarios. If you try to use an Oracle database with
Django, you'll see there is far less example code for that setup compared
to PostgreSQL backend setups.
PostgreSQL is an implementation of the
relational database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Why is PostgreSQL a good database choice?
PostgreSQL's open source license allows developers to operate one or
more databases without licensing cost in their applications. The open
source license operating model is much less expensive compared to Oracle
or other proprietary databases, especially as replication and sharding
become necessary at large scale. In addition, because so many people
ranging from independent developers to multinational organizations use
PostgreSQL, it's often easier to find developers with PostgreSQL experience
than other relational databases. There is also
ancedotal evidence that PostgreSQL fixes bugs faster than MySQL
,
although to be fair there has not been a comprehensive study comparing
how the two projects handle defect resolution.
The PostgreSQL core team also releases frequent updates that greatly enhance
the database's capabilities. For example, in the
PostgreSQL 9.4 release
the
jsonb type
was added to enhance JavaScript Object Notation (
JSON
)
storage capabilities so that in many cases a separate
NoSQL database
is not required in an application's
architecture.
Connecting to PostgreSQL with Python
To work with relational databases in Python you need to use a database
driver, which is also referred to as a database connector. The most common
driver library for working with PostgreSQL is
psycopg
. There is
a list of all drivers on the PostgreSQL wiki
,
including several libraries that are no longer maintained. If you're
working with the
asyncio Python stdlib module
you should also take a look at the
aiopg
library which
wraps psycopg2's asychronouos features together.
To abstract the connection between tables and objects, many Python
developers use an
object-relational mapper (ORM)
with
to turn relational data from PostgreSQL into objects that can be used in
their Python application. For example, while PostgreSQL provides a
relational database and psycopg is the common database connector, there
are many ORMs that can be used with varying web frameworks, as shown in the
table below.
Learn more about
Python ORMs on that dedicated topic page
.
PostgreSQL data safety
If you're on Linux it's easy to get PostgreSQL installed using a package manager.
However, once the database is installed and running your responsibility is just beginning.
Before you go live with a production application, make sure to:
Lock down access with
a whitelist
in the
pg_hba.conf
file
Enable
replication
to another database that's preferrably on different infrastructure in
a separate location
Perform regular
backups and test the restoration process
Ensure your application prevents
SQL injection attacks
When possible have someone qualified do a
PostgreSQL security audit
to identify the biggest risks to your database. Small applications and
bootstrapped companies often cannot afford a full audit in the beginning but
as an application grows over time it becomes a bigger target.
The data stored in your database is the lifeblood of your application. If you have
ever
accidentally dropped a production database
or been the victim of malicious activity such as SQL injection attacks, you'll
know it's far easier to recover when a bit of work has been performed
beforehand on backups, replication and security measures.
Python-specific PostgreSQL resources
Many quickstarts and tutorials exist specifically for Django, Flask and
other web application frameworks. The ones below are some of the best
walkthroughs I've read.
Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04
provides instructions for getting a fresh Ubuntu install working with
PostgreSQL and Python 3.
This post on
using PostgreSQL with Django or Flask
is a great quickstart guide for either framework.
This article explains how and why PostgreSQL can handle
full text searching
for many use cases.
How to speed up tests in Django and PostgreSQL
explains some hacks for making your schema migration-backed run quicker.
Thinking psycopg3
is written by a developer who has worked on this critical Python library
for interacting with PostgreSQL since 2005. The author writes up thoughts
on what should change if backwards-incompatible changes are ever introduced
in a new hypothetical future version.
Records
is a wrapper around the psycopg2
driver that allows easy access to direct SQL access. It's worth a look if
you prefer writing SQL over using an
ORM
like SQLAlchemy.
o
Postgres Joins and Django Querysets
is a well done post with a specific example of how a standard
Django ORM query can lead to degraded performance due when obtaining
data from many related tables. The
prefetch_related
command and
database performance monitoring tools can help analyze and alleviate
some of the issues in these unoptimized queries.
Loading Google Analytics data to PostgreSQL using Python
is a quality tutorial that combines
API calls
with psycopg and PostgreSQL to take data from Google Analytics and save
it in a PostgreSQL database.
1M rows/s from Postgres to Python
shows some benchmarks for the performance of the
asyncpg
Python database client
and why you may want to consider using it for data transfers.
General PostgreSQL resources
PostgreSQL tutorials not specific to Python are also really helpful
for properly handling your data.
Why PostgreSQL? (5 years later)
covers the improvements that have been made to PostgreSQL over the
past five years. It's amazing to see how far this project has come and
how it continues to evolve.
The Internals of PostgreSQL
is a book
that goes into how PostgreSQL works, including core topics such as
query processing
,
concurrency control
and the
layout of heap table files
.
PostgreSQL Weekly
is a weekly newsletter of
PostgreSQL content from around the web.
My Favorite PostgreSQL Extensions - Part One
and
part two
are roundups of useful PostgreSQL extensions that augment the
standard PostgreSQL functionality.
An introduction to PostgreSQL physical storage
provides a solid walkthrough of where PostgreSQL files are located on
disk, how the files store your data and what mappings are important for
the underlying database structure. This post is an easy read and well worth
your time.
Braintree wrote about their experiences
scaling PostgreSQL
.
The post is an inside look at the evolution of Braintree's usage of the database.
There is no such thing as total security but this IBM article covers
hardening a PostgreSQL database
.
Handling growth with Postgres
provides 5 specific tips from Instagram's engineering team on how to scale
the design of your PostgreSQL database.
Inserting And Using A New Record In Postgres
shows some SQL equivalents to what many developers just do in their ORM
of choice.
Following a Select Statement Through Postgres Internals
provides a fascinating look into the internal workings of PostgreSQL
during a query.
Locating the recovery point just before a dropped table
and
logging transactions that dropped tables
are two posts that show you how to recover from an accidentally dropped
table. In the first post the author shows how recovery is possible with
recovery points while the second post shows how to put logging in place
to assist in future recoveries.
awesome-postgres
is a list of code libraries, tutorials and newsletters focused
specifically on PostgreSQL.
While you can use a graphical interface for working with PostgreSQL, it's
best to spend some time getting
comfortable with the command-line interface
.
Backing up databases is important because data loss can and does happen.
This article explains
how to back up a PostgreSQL database hosted on an Amazon Web Services EC2 instance
if managing your own database on a cloud server is your preferred setup.
Is bi-directional replication (BDR) in PostgreSQL transactional?
explores a relatively obscure topic with the final result that BDR is
similar to data stores with eventual consistency rather than consistency
as a requirement.
PostgreSQL-metrics
is a
tool built by Spotify's engineers that extracts and outputs metrics from
an existing PostgreSQL database. There's also a way to extend the tools
to pull custom metrics as well.
Creating a Document-Store Hybrid in Postgres 9.5
explains how to store and query JSON data, similar to how
NoSQL data stores
operate.
This
slideshow on high availability for web applications
has a good overview of various database setups common in production
web applications.
The
JSONB data type
was introduced in PostgreSQL 9.4 to make it easier to store
semi-structured data that previously
NoSQL databases
such as MongoDB covered. However, there are times when using JSONB
isn't a good idea and
this blog post covers when to avoid the column type
.
PostgreSQL monitoring and performance
Monitoring one or more PostgreSQL instances and trying to performance tune
them is a rare skillset. Here are some resources to get you started if you
have to handle these issues in your applications.
This
guide to PostgreSQL monitoring
is handy for knowing what to measure and how to do it.
Craig Kerstiens wrote a detailed post about
understanding PostgreSQL performance
.
The
Practical Guide to PostgreSQL Optimizations
covers using cache sizes, restore configurations and shared buffers
to improve database performance.
This article on
performance tuning PostgreSQL
shows how to find slow queries, tune indexes and modify your queries
to run faster.
What PostgreSQL tells you about its performance
explains how to gather general performance metrics and provides the exact
queries you should run to get them. The article also covers performance
monitoring and how to analyze trigger functions.
PostgreSQL monitoring queries
is a simple GitHub repository of SQL queries that can be run against
a PostgreSQL instance to determine usage, caching and bloat.
PgSQL Indexes and "LIKE"
examines why LIKE queries do not take advantage of PostgreSQL indexes
when the locale is set to something other than the default "C", which is
for the North American UNIX default. The gist is that you need to
build a special index to support LIKE whenever you use a locale other
than "C".
The
PostgreSQL page on PopSQL
has a ton of useful syntax snippets categorized by type of action you
want to perform using SQL.
Do you want to learn more about data or web apps?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to learn how to code a Python web application using a framework.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» PostgreSQL
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

MySQL - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
MySQL
MySQL is an open source
relational database
implementation for storing and retrieving data.
MySQL or PostgreSQL?
MySQL is a viable open source database implementation for Python web
applications. MySQL has a slightly easier initial learning curve than
PostgreSQL
. However, PostgreSQL's design is often
preferred by Python web developers, especially when data migrations are
run as an application evolves.
MySQL is an implementation of the
relational database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Python Drivers for MySQL
Accessing MySQL from a Python application requires a database driver (also
called a "connector"). While it is possible to write a driver as part of
your application, in practice most developers use an existing open source
driver.
There was a major issue with MySQL drivers since the introduction of
Python 3. One of the most popular libraries called
MySQLdb
did not work
in its existing form with Python 3 and there were no plans to update it.
Therefore a fork of MySQLdb named
mysqlclient
added Python 3
compatibility.
The mysqlclient fork was good in that existing MySQLdb users could drop
mysqlclient into existing projects that were upgrading to Python 3. However,
the fork often causes confusion when searching for which Python driver to
use with MySQL. Many developer simply decide to use
PostgreSQL
because there is better support for Python
drivers in the PostgreSQL community.
With that driver support context in mind, it's absolutely possible to build
a Python 3 web application with MySQL as a backend. Here is a list of
drivers along with whether it supports Python 2, 3 or both.
mysqlclient
is a fork
of MySQLdb that supports Python 2 and 3.
MySQL Connector
is Oracle's "official" (Oracle currently owns MySQL) Python connector.
The driver supports Python 2 and 3, just make sure to check the
version guide
for what
releases work with which Python versions.
MySQLdb
supports
Python 2 and was frequently used by Python web applications before the
mass migration to Python 3 began.
PyMySQL
is a pure Python
(no C low-level code) implementation that attempts to be a drop-in
replacement for MySQLdb. However, some MySQL APIs are not supported
by the driver so whether or not your application can use this connector
will depend on what you're building.
What organizations use MySQL?
The database is deployed in production at some of the highest
trafficked sites such as
Uber
,
Twitter
,
Facebook
and
many others major organizations
.
However, since
MySQL AB
, the company that
developed MySQL, was purchased by Sun Microsystems (which was in turn
purchased by Oracle), there have been major defections away from the
database by
Wikipedia
and
Google
.
MySQL remains a viable database option but I always recommend new Python
developers learn
PostgreSQL
if they do not already know
MySQL.
Python-specific MySQL resources
The following resources show you how to work with MySQL in your
Python code either directly through SQL queries or less directly with an
object-relational mapper (ORM)
like
SQLAlchemy
or the
Django ORM
.
Python MySQL tutorial
uses the MySQL Connector Python library to demonstrate how to run
queries and stored procedures in your Python applications.
Python 3.4.0 with MySQL database
and
Python 3 and MySQL
provide context for the commonly asked question about which database
MySQL driver to use with Python 3.
Terrible Choices: MySQL
is a blog post about specific deficiencies in MySQL's implementation that
hinder its usage with Django's ORM.
MySQL Python tutorial
uses the
MySQLdb driver to connect to a MySQL server instance and shows some
examples for inserting and querying data.
General MySQL resources
There are many programming language agnostic tutorials for MySQL.
A handful of the best of these tutorials are listed below.
How to Install and Use MySQL on Ubuntu 16.04
is a quick tutorial for getting up and running on Ubuntu Linux.
28 Beginner's Tutorials for Learning about MySQL Databases
is a curated collection on various introductory MySQL topics.
A Basic MySQL Tutorial
doesn't have the most original title but it's a good walkthrough of your
first few steps in MySQL for creating users and working with tables.
mycli
is a command line interface for MySQL
that includes command completion and other super handy features.
Bye Bye MySQL & MongoDB, Guten Tag PostgreSQL
goes into details for why the company Userlike migrated from their MySQL
database setup to PostgreSQL.
MySQL sharding at Quora
provides details behind Quora's at-scale infrastructure and
how their MySQL sharding evolved over time.
Growing up with MySQL
is
a story about how one company went through dramatic growth and had to keep
up with it by quickly scaling their MySQL database.
Monitoring MySQL metrics
is the first of a three part series, with the other parts on
collecting metrics
and
monitoring & collecting specifically with the DataDog tool
. The series explains what
metrics you should be collecting and monitoring in your production
database along with the purpose for why those metrics are important.
gh-ost
(
source code
) is a schema migration
tool built by GitHub and open sourced to the development community.
The advantages of gh-ost are sustainable workloads on the master node
to allow it to keep serving inbound query requests and the ability
to pause the migration. The post on how to use gh-ost pairs nicely with
GitHub's detailed write-up on how they perform backups, failover and
schema migrations in
MySQL infrastructure testing automation at GitHub
.
The
unofficial MySQL optimizers guide
is intended for experienced developers who need to get better performance
out of MySQL for their specific use cases.
The Ultimate Postgres vs MySQL Blog Post
provides comparisons of data types, default values, arrays, joins and
many other differences between MySQL and PostgreSQL.
Learn more about data or go to web frameworks?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to learn how to code a Python web application using a framework.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» MySQL
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

SQLite - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
SQLite
SQLite is an open source
relational database
included with
the Python standard library as of Python 2.5. The pysqlite database driver
is also included with the standard library so that no further external
dependencies are required to access a SQLite database from within Python
applications.
SQLite is an implementation of the
relational database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Useful SQLite tools and code
SQLite is used in such a wide variety of industries that there are open
source tools and example code for all kinds of edge case uses. Here are
several tools and bits of code I have found useful while coding my
applications:
sqlitebiter
(
source code
) is a command-line
tool for converting various data formats such as comma-separated
values (CSV), HTML, Markdown and JSON (among others) into a SQLite database
file.
Scout
(
source code
)
is a
Flask
-powered search server for SQLite backends. The
introductory post
is really handy for getting started with Scout.
Datasette
makes it easy to expose
JSON
APIs
from your SQLite
database without coding up a custom web application. Make sure to
check out the
Datasette getting started guide
as well.
SQLite Browser
is an open source graphical user
interface for working with SQLite.
The
Membership SQLite SQL scripts
provide example code for storing user accounts, roles and authentication
tokens in web applications.
ExtendsClass
is an online SQLite browser.
SQLite tutorials
It's a good idea to brush up on the basics for using SQLite before you use
the database in your project through SQL scripts or via an
object-relational mapper
. These
tutorials will help you get started.
A simple step-by-step SQLite tutorial
walks through creating databases as well as inserting, updating, querying and
deleting data.
A Minimalist Guide to SQLite
shows how to install SQLite, load data and work with the data stored in
a new SQLite database.
Python SQLite3 Basics
covers
how to connect to a SQLite database in Python, executing statements,
committing and retrieving saved values.
sqlite3 - embedded relational database
is an
extensive tutorial showing many of the common create, read, update and delete
operations a developer would want to do with SQLite.
The official
sqlite3 module in the Python stdlib docs
contains a bunch of scenarios with code for how to use the database from
a Python application.
Finding bugs in SQLite, the easy way
explains how a bug was found - and quickly fixed - in the SQLite codebase.
It's a great short read which shows that the code is well-tested and
maintained.
SQLite is not a toy database
is a whirlwind overview of some of the best aspects of SQLite and why
you should use it.
Data Analysis of 8.2 Million Rows with Python and SQLite
explains how you can load a large dataset in to SQLite and visualize it
using the Plotly service.
SQLite: The art of keep it simple
uses C code examples from SQLite's codebase to show how its design has been
kept consistent and tight throughout 15+ years of active development.
There's also a
great design document on the SQLite site
that covers many of these principles.
My list of SQLite resources
is a nice roundup of useful tools to use with SQLite and tutorials for
learning more about the database.
Python SQLite3 tutorial
provides another beginner's tutorial using the built-in
sqlite3
Python standard library module.
A SQLite tutorial with Python
covers both SQL and Python code to interact with SQLite.
Specific SQLite scenarios
These are solid resources if you are looking to solve a particular problem
you are having with SQLite rather than going through a general tutorial.
Let's Build a Simple Database
is an
awesome
read where the author re-creates a SQLite-type database
for learning purposes.
We are pretty happy with SQLite & not urgently interested in a fancier DBMS
gives the rationale behind one development teams' decision to stick to
SQLite instead of porting to another relational database such as
MySQL
or
PostgreSQL
.
This overview of SQLite as part of the
Databaseology Lectures
is amazing because they are given by the creator and he shines a ton
of light on how SQLite is built and why.
How SQLite is tested
digs into the
nitty-gritty behind the quality assurance practices for testing potential
SQLite releases.
Using the SQLite JSON1 and FTS5 Extensions with Python
shows how to compile SQLite 3.9.0+ with json1 and fts5 (full-text search)
support to use these new features.
SQLite with a fine-toothed comb
digs into the internals of SQLite and shows some bugs found (and
since fixed) while the author was researching the SQLite source code.
How to Store Multimedia Files in a SQLite3 Database with Python
goes through the Python code for storing and accessing BLOB-type objects.
Going Fast with SQLite and Python
shares essential knowledge for working effectively with SQLite in Python,
particularly when it comes to transactions, concurrency and commits.
Extending SQLite with Python
uses the
Peewee
object-relational mapper (ORM)
to implement virtual tables and aggregates on top of SQLite.
SQLite Database Authorization and Access Control with Python
covers how to control access to the SQLite database connection and
file even though SQLite normally allows unauthorized access by design.
Can I read and write to a SQLite database concurrently from multiple connections?
answers one of the concerns that was an issue in earlier versions of
SQLite that could have issues if more than one connection was writing
to the database at one time.
Appropriate uses for SQLite
is an
official documentation page that explains what types of applications
are designed to work well with SQLite as the backend.
How to corrupt a SQLite file
explains how the database file could potentially get corrupted if you
really work at screwing it up.
What do you want to learn next about data?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» SQLite
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

SQLAlchemy - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
SQLAlchemy
SQLAlchemy
(
source code
) is a well-regarded
database toolkit and
object-relational mapper (ORM)
implementation written in Python. SQLAlchemy provides a generalized
interface for creating and executing database-agnostic code without
needing to write SQL statements.
Why is SQLAlchemy a good ORM choice?
SQLAlchemy isn't just an ORM- it also provides SQLAlchemy Core for performing
database work that is abstracted from the implementation differences between
PostgreSQL, SQLite, etc. In some ways, the ORM is a bonus to Core that
automates commonly-required create, read, update and delete operations.
SQLAlchemy can be used with or without the ORM features. Any given project
can choose to just use SQLAlchemy Core or both Core and the ORM. The
following diagram shows a few example configurations with various
application software stacks and backend databases. Any of these
configurations can be a valid option depending on what type of application
you are coding.
A benefit many developers enjoy with SQLAlchemy is that it allows them
to write Python code in their project to map from the database schema
to the applications' Python objects. No SQL is required to create,
maintain and query the database. The mapping allows SQLAlchemy to handle
the underlying database so developers can work with their Python objects
instead of writing bridge code to get data in and out of relational tables.
SQLAlchemy is an implementation of the
object-relational mapping (ORM)
concept. Learn more in the
data
chapter or view
all topics
.
How does SQLAlchemy code compare to raw SQL?
Below is an example of a SQLAlchemy model definition from the open source
compare-python-web-frameworks project
that uses SQLAlchemy with Flask and Flask-SQLAlchemy.
class Contact(db.Model):
    __tablename__ =
'contacts'
id = db.Column(db.Integer, primary_key=True)
    first_name = db.Column(db.String(100))
    last_name = db.Column(db.String(100))
    phone_number = db.Column(db.String(32))

    def __repr__(self):
        return
'<Contact {0} {1}: {2}>'
.format(self.first_name,
                                               self.last_name,
                                               self.phone_number)
SQLAlchemy handles the table creation that otherwise we would have had
to write a create table statement like this one to do the work:
CREATE TABLE CONTACTS(
   ID INT PRIMARY KEY        NOT NULL,
   FIRST_NAME     CHAR(100)  NOT NULL,
   LAST_NAME      CHAR(100)  NOT NULL,
   PHONE_NUMBER   CHAR(32)   NOT NULL,
);
By using SQLAlchemy in our Python code, all records can be obtained with a
line like
contacts = Contact.query.all()
instead of a plain SQL such as
SELECT * FROM contacts
. That may not look like much of a difference in
syntax but writing the queries in Python is often faster and easier for
many Python developers once multiple tables and specific filtering on fields
for queries have to be written. In addition, SQLAlchemy abstracts away
idiosyncratic differences between database implementations in
SQLite
,
MySQL
and
PostgreSQL
.
SQLAlchemy Extensions, Plug-ins and Related Libraries
Take a look at the
SQLAlchemy extensions, plug-ins and related libraries
page for a curated list of useful code libraries to use with SQLAlchemy.
Using SQLAlchemy with Web Frameworks
There is no reason why you cannot use the SQLAlchemy library in any
application that requires a database backend. However, if you are
building a web app with
Flask
,
Bottle
or
another web framework
then take
a look at the following extensions. They provide some glue code along with
helper functions that can reduce the boilerplate code needed to connect
your application's code with the SQLAlchemy library.
SQLAlchemy is typically used with Flask as the database
ORM via the
Flask-SQLAlchemy
extension.
The
bottle-sqlalchemy
extension for
Bottle
provides a bridge between the standard
SQLAlchemy library and Bottle. However, from my experience using the library
it does not have quite as many helper functions as Flask-SQLAlchemy.
Pyramid
uses the
alchemy scaffold
to make it easy to add SQLAlchemy to a Pyramid web app.
While
Django
does not yet support easy swapping of the
default Django backend ORM with SQLAlchemy (like it does for
template engines
),
there are hacks for
using SQLAlchemy within Django projects
.
Morepath
has easy-to-use support for SQLAlchemy via its
more.transaction
module. There is a
morepath-sqlalchemy demo
that serves as a working example.
Merging Django ORM with SQLAlchemy for Easier Data Analysis
has details on why, how and when you may want to use SQLAlchemy to
augment the
Django ORM
.
Building a Simple Birthday App with Flask-SQLAlchemy
combines SQLAlchemy with Flask to create a birthday reminder application.
SQLAlchemy resources
The best way to get comfortable with SQLAlchemy is to dig in and write
a database-driven application. The following resources can be helpful if
you are having trouble getting started or are starting to run into some
edge cases.
There is an entire chapter in the
Architecture of Open Source Applications book on SQLAlchemy
.
The content is detailed and well worth reading to understand what is
executing under the covers.
The
SQLAlchemy cheatsheet
has many examples for querying, generating database metadata and many
other common (and not so common) operations when working with Core and
the ORM.
10 reasons to love SQLAlchemy
is a bit of a non-critical lovefest for the code library. However, the
post makes some good points about the quality of SQLAlchemy's
documentation and what a pleasure it can be to use it in a Python project.
SQLAlchemy and Django
explains how one development team uses the Django ORM for most of their
standard queries but relies on SQLAlchemy for really advanced queries.
This
SQLAlchemy tutorial
provides
a slew of code examples that cover the basics for working with SQLAlchemy.
Implementing User Comments with SQLAlchemy
gives a wonderful walkthrough of how to build your own online commenting
system in Python using SQLAlchemy.
Master SQLAlchemy Relationships in a Performance Friendly Way
dives into code that shows how to improve performance when setting and
accessing relationship-based data in your models.
SQLAlchemy and data access in Python
is a podcast interview with the creator of SQLAlchemy that covers the
project's history and how it has evolved over the past decade.
Most Flask developers use SQLAlchemy as an ORM to relational databases.
If you're unfamiliar with SQLAlchemy questions will often come up such as
what's the difference between flush and commit?
that are important to understand as you build out your app.
SQLAlchemy in batches
shows the code that a popular iOS application runs in background
batch scripts which uses SQLAlchemy to generate playlists. They provide
some context and advice for using SQLAlchemy in batch scripts.
Getting PostgreSQL transactions under control with SQLAlchemy
provides a quick introduction to the tool
Chryso
that they are working on
to provide better transaction management in SQLAlchemy connections.
SQLAlchemy compared to other ORMs
SQLAlchemy is one of many
Python object-relational mapper (ORM)
implementations. Several open source projects and articles are listed here
to make it a bit easier to understand the differences between these
implementations.
Introduction to SQLAlchemy ORM for Django Developers
is written by a developer who typically used the
Django ORM
at work and then had a chance to try SQLAlchemy for one project. He covers
differences in how each one handles transactions, models and queries.
SQLAlchemy vs Other ORMs
provides a detailed comparison of SQLAlchemy against alternatives.
If you're interested in the differences between SQLAlchemy and the Django
ORM I recommend reading
SQLAlchemy and You
by Armin Ronacher.
This
GitHub project named PythonORMSleepy
implements the same Flask application with several different ORMs:
SQLAlchemy, Peewee, MongoEngine, stdnet and PonyORM. Looking through the
code is helpful for understanding the varying approaches each library
takes to accomplish a similar objective.
Quora has several answers to the question of
which is better and why: Django ORM or SQLALchemy
based on various developers' experiences.
Open source code for learning SQLAlchemy
Many open source projects rely on SQLAlchemy. A great way to learn
how to properly work with this tool is to read the code that shows
how those projects use SQLAlchemy. This section alphabetically lists
these code examples by class and function in the SQLAlchemy code base.
SQLAlchemy
:
Extensions, Plug-ins and Related Libraries
&
Example Projects and Code
sqlalchemy.databases
mysql
sqlalchemy.dialects
mssql
,
mysql
,
oracle
,
postgresql
,
sqlite
sqlalchemy.dialects.mysql
pymysql
sqlalchemy.dialects.postgresql
ARRAY
,
BIGINT
,
BIT
,
DOUBLE_PRECISION
,
ExcludeConstraint
,
INTEGER
,
JSON
,
TSVECTOR
,
array
,
json
,
pypostgresql
sqlalchemy.dialects.postgresql.base
PGCompiler
,
PGIdentifierPreparer
,
PGTypeCompiler
sqlalchemy.dialects.postgresql.psycopg2
PGDialect_psycopg2
sqlalchemy.dialects.sqlite
pysqlite
sqlalchemy.engine
Connection
,
Engine
,
create_engine
,
default
,
url
sqlalchemy.engine.default
DefaultDialect
sqlalchemy.engine.interfaces
ExecutionContext
sqlalchemy.engine.result
ResultMetaData
,
RowProxy
sqlalchemy.engine.strategies
EngineStrategy
,
MockEngineStrategy
sqlalchemy.engine.url
make_url
sqlalchemy.events
SchemaEventTarget
sqlalchemy.exc
ArgumentError
,
DataError
,
DatabaseError
,
IntegrityError
,
InvalidRequestError
,
NoInspectionAvailable
,
NoSuchTableError
,
OperationalError
,
ProgrammingError
,
UnsupportedCompilationError
sqlalchemy.ext
compiler
sqlalchemy.ext.associationproxy
AssociationProxy
sqlalchemy.ext.automap
automap_base
sqlalchemy.ext.compiler
compiles
sqlalchemy.ext.declarative
DeclarativeMeta
,
declarative_base
sqlalchemy.ext.hybrid
HYBRID_METHOD
,
HYBRID_PROPERTY
,
hybrid_method
,
hybrid_property
sqlalchemy.ext.mutable
Mutable
sqlalchemy.inspection
inspect
sqlalchemy.orm
ColumnProperty
,
CompositeProperty
,
Load
,
Mapper
,
Query
,
RelationshipProperty
,
Session
,
SynonymProperty
,
aliased
,
attributes
,
backref
,
class_mapper
,
column_property
,
composite
,
interfaces
,
mapper
,
mapperlib
,
object_mapper
,
object_session
,
query
,
relationship
,
session
,
sessionmaker
,
strategies
sqlalchemy.orm.attributes
InstrumentedAttribute
,
QueryableAttribute
,
flag_modified
sqlalchemy.orm.collections
InstrumentedList
sqlalchemy.orm.exc
NoResultFound
,
UnmappedClassError
,
UnmappedInstanceError
sqlalchemy.orm.interfaces
MapperProperty
,
PropComparator
sqlalchemy.orm.mapper
Mapper
sqlalchemy.orm.properties
ColumnProperty
,
RelationshipProperty
sqlalchemy.orm.query
Query
,
QueryContext
sqlalchemy.orm.relationships
RelationshipProperty
sqlalchemy.orm.session
Session
,
object_session
sqlalchemy.orm.util
AliasedClass
,
AliasedInsp
,
identity_key
sqlalchemy.pool
NullPool
,
StaticPool
sqlalchemy.schema
CheckConstraint
,
Column
,
CreateIndex
,
CreateTable
,
DDLElement
,
ForeignKey
,
ForeignKeyConstraint
,
Index
,
PrimaryKeyConstraint
,
Table
sqlalchemy.sql
ClauseElement
,
Select
,
column
,
expression
,
extract
,
functions
,
operators
,
schema
,
select
,
sqltypes
,
table
sqlalchemy.sql.compiler
SQLCompiler
sqlalchemy.sql.elements
ColumnElement
,
Label
sqlalchemy.sql.expression
ClauseElement
,
ColumnClause
,
ColumnElement
,
Executable
,
FunctionElement
,
UnaryExpression
sqlalchemy.sql.functions
FunctionElement
,
GenericFunction
sqlalchemy.sql.naming
conv
sqlalchemy.sql.schema
Column
,
SchemaItem
sqlalchemy.sql.sqltypes
NULLTYPE
,
NullType
sqlalchemy.sql.util
ClauseAdapter
sqlalchemy.sql.visitors
traverse
sqlalchemy.types
BOOLEAN
,
Boolean
,
DATE
,
DATETIME
,
Date
,
DateTime
,
Enum
,
FLOAT
,
Float
,
INTEGER
,
Integer
,
Interval
,
NULLTYPE
,
NullType
,
String
,
TEXT
,
TIME
,
Text
,
Time
,
TypeEngine
,
UserDefinedType
,
to_instance
sqlalchemy.util
OrderedDict
,
OrderedSet
,
set_creation_order
,
symbol
,
topological
sqlalchemy.util.langhelpers
public_factory
,
symbol
What would you like to learn about building Python web apps?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» SQLAlchemy
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Peewee - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Peewee
Peewee
(
source code
) is a
object-relational mapper (ORM)
implementation for bridging data stored in
relational database tables
with Python objects.
What makes Peewee a useful ORM?
Peewee can be an easier library to wrap your head around than SQLAlchemy
and other ORMs. It is designed to be easier to hack on and understand,
similar to how
Bottle
is a smaller, one-file
web framework
compared to the comprehensive
Django
framework. If you are just getting started with
web development, it may be worth using Peewee for your database mapping
and operations, especially if you use a microframework such as Flask or
Bottle.
Peewee can be used with pretty much any web framework (although using it
with
Django
would currently be complicated due to its
tight built-in ORM coupling) or without a web framework. In the latter
case Peewee is good for pulling data out of a relational database in a
script or Jupyter notebook.
Any of the common relational database backends such as
PostgreSQL
,
MySQL
or
SQLite
are supported, although a database driver is
still required. The chart below shows a few example configurations
that could use Peewee as an ORM.
Peewee is an implementation of the
object-relational mapping (ORM)
concept. Learn more in the
data
chapter or view
all topics
.
How does Peewee compare to other Python ORMs?
The analogy used by the core Peewee author is that Peewee
is to
SQLAlchemy
as
SQLite
is to
PostgreSQL
. An
ORM
does not have to work for
every exhaustive use case in order to be useful.
Peewee resources
Peewee is a much newer library than several other Python ORMs.
For example, Peewee's
first public commit was in 2010
,
compared to
2005 for SQLAlchemy
.
The project is still over five years old though and matured substantially
in development during that time. However, there are typically less resources
and examples available to demonstrate how to use Peewee in your projects
than some other ORMs that have been around for a longer period of time.
Many of the best resources come from the project's author, Charles Leifer,
on his blog and on the official site. There are also hundreds of questions
answered on the
Stack Overflow peewee tag
,
so as usual that can be a rich source of examples for your Peewee-powered
Python applications.
An encrypted command-line diary with Python
is an awesome walkthrough explaining how to use SQLite, SQLCipher and
Peewee to create an encrypted file with your contents, diary or otherwise.
An Intro to Peewee â Another Python ORM
is a short tutorial that walks through creating a database model mapping,
adding data, deleting records and querying fields.
Introduction to peewee
uses an example public dataset, loads it into a
SQLite
database and shows how to query it using Peewee.
Shortcomings in the Django ORM and a look at Peewee
from the author of the Peewee ORM explains how some of the design
decisions made in Peewee were in reaction to parts of the Django ORM
that didn't work so well in practice.
The
official Peewee quickstart documentation
along with the
example Twitter clone app
will walk you through the ins and outs of your first couple Peewee-powered
projects.
Flask and Peewee 101
has some basic code for querying with Peewee and populating a drop-down in
a
Jinja2
template. Note that the
Flask-peewee
extension
is no longer maintained, although you do not need to use it to work with
both Flask and Peewee in an application.
How to make a Flask blog in one hour or less
is a well written tutorial that uses the
Peewee ORM
instead of
SQLAlchemy for the blog back end.
These posts on
querying the top item by group with Peewee ORM
and
querying the top N objects per group with Peewee ORM
provide working examples on how to properly query your data via Peewee.
There was a good discussion in a
Python subreddit thread
about the differences between Peewee and SQLAlchemy. Charles Leifer
even chimed in to add his own fair assessment of the differences in the
ORMs.
peewee-async
(
source code
) is an alpha
library for using Python 3's
asyncio
standard library
with Peewee. This library is worth watching if you use an async
web framework
and want to have Peewee serve as your
application's ORM.
Accessing remote MySQL database with peewee
debugs a question where the original author had issues accessing a remote
MySQL
database because they did not properly include the
Model
class from
peewee.py
when instantiating a mapper class.
What would you like to learn about building Python web apps?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Peewee
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Django ORM - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Django ORM
The
Django
web framework
includes
a default
object-relational mapping layer (ORM)
that can be used to interact with application
data
from various
relational databases
such as
SQLite
,
PostgreSQL
and
MySQL
.
The Django ORM is an implementation of the
object-relational mapping (ORM)
concept. Learn more in the
data
chapter or view
all topics
.
Django ORM resources
The Django ORM has evolved over the past dozen years since it was created
make sure to not only read up on the latest tutorials but also learn about
newer optimizations, such as
prefetch_related
and
select_related
,
that have been added throughout the project's history.
Django models, encapsulation and data integrity
is a detailed article by Tom Christie on encapsulating Django models for
data integrity.
Django Debug Toolbar
is a powerful Django ORM database query inspection tool. Highly recommended
during development to ensure you're writing reasonable query code.
Django Silk
is another inspection tool and
has capabilities to do more than just SQL inspection.
Django QuerySet Examples (with SQL code included)
teaches how QuerySets work and shows the corresponding SQL code behind the
Python code you write to use the ORM.
Making a specific Django app faster
is a Django performance blog post with some tips on measuring performance
and optimizing based on the measured results.
Why I Hate the Django ORM
is Alex Gaynor's overview of the bad designs decisions, some of which he
made, while building the Django ORM.
Going Beyond Django ORM with Postgres
is specific to using PostgreSQL with Django.
How to view Django ORM SQL queries
along with
django-sql-explorer
allow you to better understand the SQL code that is generated from the
Django ORM.
Migrating a Django app from MySQL to PostgreSQL
is a quick look at how to move from MySQL to PostgreSQL. However, my guess
is that any Django app that's been running for awhile on one
relational database
will require a lot more work to
port over to another backend even with the power of the ORM.
Adding basic search to your Django site
shows how to write generic queries that'll allow you to provide site
search via the Django ORM without relying on another tool like
ElasticSearch. This is great for small sites before you scale them up with
a more robust search engine.
The
Django ORM Cookbook
provides code recipes for various ways to use the Django ORM to insert and
query data.
How to use Django's Proxy Models
is a solid post on a Django ORM concept that doesn't frequently get a lot
of love or explanation.
Tightening Django Admin Logins
shows you how to log authentication failures, create an IP addresses white
list and combine fail2ban with the authentication failures list.
How to Turn Django Admin Into a Lightweight Dashboard
and
How to Use Grouping Sets in Django
are two great posts on how to add custom features to the Django Admin
as well as optimize with more advanced SQL when the first attempt
at the queries get slow due to larger amounts of data.
Sorting querysets with NULLs in Django
shows what to do if you're struggling with the common issue of sorting
columns that contain NULL values.
Best Practices working with Django models in Python
has a ton of great advice on proper model naming conventions, quirks to
avoid with
ForeignKey
field relationships, handling IDs and many other
edge cases that come up when frequently working with Django's ORM.
Merging Django ORM with SQLAlchemy for Easier Data Analysis
provides rationale for using the
SQLAlchemy
ORM
instead of Django's default ORM in some situations.
Working with huge data sets in Django
explains how to slice the data you retrieve by query into pages and then
use
prefetch_related
on a subset of the data rather than your whole
data set.
Solving performance problems in the Django ORM
gives a slew of great code snippets to use with
django.db.connection
so
you can discover issues such as unexpected extra queries and problematic
key relationships.
Full-text search in Django with PostgreSQL
is a very detailed example that shows how to work specifically with
a
PostgreSQL
backend.
Django Anti-Patterns: Signals
explains why you should avoid using Django ORM's
signals
feature
in your applications if you want to make them easier to maintain.
Django ORM optimization story on selecting the least possible
goes through one developer's Django ORM code refactoring to optimize the
performance and results of a single query.
Fixing your Django async job - database integration
is a great article on how to properly integrate the
RQ task queue
with a Django backend.
Django migrations resources
Django migrations
were added in
version 1.7
. Django
projects prior to 1.7 used the
South project
, which is now
deprecated and merged into Django. Migrations can be tricky to wrap your
head around as you're getting started with the overall framework but the
following resources should get you past the initial hurdles.
Django Migrations - a Primer
takes you through the new migrations system integrated in the Django core as of Django 1.7, looking specifically at a solid workflow that you can use for creating and applying migrations.
Django 1.7: Database Migrations Done Right
explains why South was not directly integrated into Django, how migrations
are built and shows how backwards migrations work.
Executing custom SQL in Django migrations
examines how you can hook in straight SQL that will run during a Django
migration.
Squashing and optimizing migrations in Django
shows a simple example with code for how to use the migrations integrated
into Django 1.7.
Supporting both Django 1.7 and South
explains the difficulty of supporting Django 1.7 and maintaining South
migrations for Django 1.6 then goes into how it can be done.
Writing unit tests for Django migrations
contains a ton of awesome code examples for testing your
migrations to ensure data migrations work well throughout
the lifecycle of your Django project.
Strategies for reducing memory usage in Django migrations
shows the large memory usage problem that often occurs with Django
migrations at scale and what you can do to mitigate the issue.
How to Create Django Data Migrations
has a straightforward blog ORM modeling example to show how to perform
data migration.
Keeping data integrity with Django migrations
shows two table modification scenarios, one where a column needs to be
added to an existing table, and another where a
Many-to-Many
field needs
to be converted to a standard
ForeignKey
column while retaining all
of the data.
Double-checked locking with Django ORM
shows how you can implement a double-checking locking pattern in the
Django ORM with
PostgreSQL
, which is useful
when you want to prevent multiple processes from accessing the same
data at the same time.
Using Django Check Constraints for the Sum of Percentage Fields
shows how you can combine several
PositiveIntegerField
model
fields with a checking constraint and a web form that ensures
all of the fields sum up to a precise amount, such as 100%.
Learn Django ORM - Query and Filters
is a video tutorials series that gives an overview of the ORM's
querying and filtering capabilities.
What would you like to learn about after the Django ORM?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Django ORM
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Pony ORM - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Pony ORM
Pony
(
source code
) is
a Python
object-relational mapper (ORM) library
(
database module source code
).
Pony can be used to interact and manipulate data in
relational databases
, including
PostgreSQL
,
SQLite
and
MySQL
.
Pony is an implementation of the
object-relational mapping (ORM)
concept. Learn more in the
data
chapter or view
all topics
.
Pony resources
Why you should give Pony ORM a chance
explains some of the benefits of Pony ORM that make it worth trying out.
An intro to Pony ORM
shows the basics of how to use the library, such as creating databases
and manipulating data.
The Pony ORM author explains on a Stack Overflow answer
how Pony ORM works behind the scenes
.
Worth a read whether or not you're using the ORM just to find out how
some of the magic coding works.
What about ORMs and databases do you want to learn next?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I want to know about working with data in Python.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Pony ORM
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Redis - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Redis
Redis
is an in-memory key-value pair
database typically classified as a
NoSQL database
.
Redis is commonly used for
caching
, transient data storage
and as a holding area for data during analysis in Python applications.
Redis is an implementation of the
NoSQL database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Redis tutorials
Redis is easy to install and start using compared to most other persistent
backends, but it's useful to follow a walkthrough if you have never
previously used Redis or any NoSQL data store.
How to Use Redis with Python 3 and redis-py on Ubuntu 16.04
contains detailed steps to install and start using Redis in Python.
How To Install and Use Redis
is a straightforward starter guide that includes installation instructions.
Redis with Python
Redis is easier to use with Python if you have a code library client that
bridges from your code to your Redis instace. The following libraries and
resources provide more information on handling data in a Redis instance
with your Python code.
Redis-py
is a solid
Python client to use with Redis.
Walrus
is a higher-level Python wrapper for Redis with some caching, querying
and data structure components build into the library.
Writing Redis in Python with Asyncio
shows a detailed example for how to use the new Asyncio standard library in
Python 3.4+ for working with Redis. There is also a
EuroPython video of the talk
that goes along with the code.
Cache_deco
is a generic Python
caching decorator library.
Write your own miniature Redis with Python
doesn't actually use Redis but shows how you can write a simplified
version of Redis' in-memory data store with Python. It's a good article
to understand more about how NoSQL data stores can work under the covers.
Introduction to Redis streams with Python
shows how to use the new (as of Redis version 5.0) append-only streams
functionality via Python code.
Redis tools and examples
Redis' wide applicability can be a downside if you don't know what to start
using it for in your application. The following code and posts provide common
use cases for Redis.
redis-labs-use-cases
has a couple of examples of using Redis to analyze geospatial data and
tweets.
redis-migrate-tool
is a library to make it easier to move data between redis clusters
and groups.
redis-rdb-tools
parses the Redis' database storage files and can dump the contents to
JSON files.
Redis Security
Redis should be customized out of its default configuration to secure it
against unauthorized and unauthenticated users. These resources provide
some advice on Reids security and guarding against data breaches.
Redis, just as with any relational or NoSQL database, needs to be secured
based on
security guidelines
. There is
also a post where the main author of Redis
cracks its security
to show the tradeoffs
purposely made between ease of use and security in the default settings.
For Godâs sake, secure your Mongo/Redis/etc!
digs into the unfortunate default security settings that come with many
NoSQL databases which can be used to compromise your systems. Make sure
to not only install your dependencies such as Redis, but automate modifying
default settings to lock them down against attackers.
Specific Redis topics
Once you have configured Redis, become comfortable using it and locked it
down against malicious actors, you will want to learn more about operating,
scaling and collecting metrics. The following resources should help you
get started in those areas.
A Key Expired In Redis, You Won't Believe What Happened Next
is a well-written post on issues one team found with their configuration
when they were using Redis for a lot of data caching.
Redis-playbook
is an Ansible
playbook for installing, configuring and securing a Redis instance.
Monitoring Redis
shows common commands for accessing meta data about your Redis databases,
such as
info
and
slowlog
.
GitHub wrote a retrospective on
moving persistent data out of Redis
and into
MySQL
that is worth a read as you scale up your
Redis usage.
Learn Redis the hard way (in production)
investigates problems found with a development team's Redis
infrastructure, how they went about debugging them and ultimately fixing
some of the issues, while being aware of limitations that could cause
them issues in the future.
This video on
Scaling Redis at Twitter
is
a detailed look behind the scenes with a massive Redis deployment.
Real World Redis Tips
provides some guidance from Heroku's engineers from deploying Redis at
scale. The tips include setting an explicit idle connection timeout,
using a connection pooler and avoiding using
KEYS
in favor of
SCAN
.
How to collect Redis metrics
shows how to use the Redis CLI client to grab key metrics on latency.
You should revise your Redis max connections setting
is a retrospective from a hard web application failure due to Redis
connections maxing out on Heroku, and how to avoid this in your own
applications by modifying your
redis.conf
settings.
A Speed Guide To Redis Lua Scripting
shows how to use the Lua programming language to create extensions
for Redis.
Better tests for Redis integrations with redislite
shows how to mock out a Redis instance using the
redislite
library and clean up
existing hacks you may be using to test your Redis usage.
Our journey from Redis 2 to Redis 3 while not taking the site down
explains their infrastructure and uptime demands in the gambling industry,
and how they were able to roll their upgraded Redis versions.
What do you want to learn about next?
Tell me about standard relational databases.
I've built a Python web app, now how do I deploy it?
I want to learn how to code a Python web application using a framework.
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Redis
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

MongoDB - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
MongoDB
MongoDB
is a document-oriented
NoSQL database
that is often used for
storing, querying and analyzing persistence data in Python applications.
MongoDB is an implementation of the
NoSQL database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
General MongoDB tutorials
It is worth taking some time to learn the ins and outs of MongoDB before
connecting it to your Python application. The following tutorials are
not specific to Python and will have you work directly with the MongoDB
command line and query language.
Getting Started with MongoDB - Part 1
and
Part 2
are programming language agnostic tutorials that show how to interact
via querying and various operators such as
$in
,
$lte
and
$gte
.
An Introduction to MongoDB
examines common commands frequently used to perform data operations.
MongoDB In 30 Minutes
goes over the basics for creating, querying, updating and deleting data
in MongoDB.
MongoDB queries do not always return all matching documents!
walks through discovering that potential pitfalls on how MongoDB queries
operate that were non-intuitive to developers who are new to using this
database.
On MongoDB
is not a tutorial
but instead discusses the culture and adoption patterns around how MongoDB
became such a common NoSQL database. This is a must read to understand
both the strengths and many weaknesses Mongo has despite what you may
read in other introductory tutorials.
This 3-part series on monitoring MongoDB with
WiredTiger
MMAP
and
Datadog
explains how to install and configure agents and gather metrics out
of your MongoDB instances.
How to Investigate MongoDB Query Performance
shows how to work with the MongoDB profiler, use the
explain
method
and check execution plans.
How to Optimize Performance of MongoDB
covers schema design, replication lag, resource provisioning and query
efficiency.
Getting Started With Google Cloud Functions and MongoDB
shows how to connect Mongo with a
Google Cloud Function
to store persistent data while running on a serverless platform.
Everything You Know About MongoDB is Wrong!
lists many of the common thoughts developers have about MongoDB and
why some of them are misconceptions. This is a good read for
developers who used MongoDB several years ago and want to know what
major improvements have been made since then.
MongoDB security
NoSQL databases can be a weak spot in a production deployment environment,
especially when default settings are built for ease of development instead
of proper access control. MongoDB is no exception with its loose default
security controls so make sure to lock down your instances.
For God's sake, secure your Mongo/Redis/etc!
explains the weak default security settings provided by many NoSQL
databases, including MongoDB. Make sure to automate locking down your
NoSQL databases just as you would any other component in your stack.
Before deploying a MongoDB instance to production, be sure to go through
each of the items on the
official MongoDB security checklist
.
The definitive guide to MongoDB security
is a high-level overview for the multitude of tasks you must perform
to lock down your MongoDB instances, such as appropriately using SSL
certificates and access-control lists.
MongoDB Security Basics For Your Deployments in AWS
is primarily a guide on AWS security from the perspective of using
installing and using MongoDB on your own instance. The post covers
authentication, SSL and firewalls.
This 4 post securing MongoDB series covers
Data Security Requirements for Regulatory Compliance
,
Database Access Control
,
Database Auditing and Encryption
and
Environmental Control & Database Management
.
Python with MongoDB resources
MongoDB is straightforward to use in a Python application when a driver
such as PyMongo is installed. The following tutorials show how to install,
configure and start using MongoDB with Python.
Introduction to MongoDB and Python
shows how to use Python to interface with MongoDB via PyMongo and
MongoEngine.
How To Set Up Flask with MongoDB and Docker
combines the
Flask
web framework with MongoDB then
containerizes the example application with
Docker
.
The
PyMongo project
creators
wrote a retrospective focusing on four decisions they would have done
differently with the benefit of hindsight:
start_request
use_greenlets
copy_database
MongoReplicaSetClient
Python and MongoDB
on the Talk Python to Me podcast has a great interview with the
MongoDB Python driver maintainer.
PyMongo Monday: Setting Up Your PyMongo Environment
is an introduction to using MongoDB with Python code. This first
part of the series shows how to set up the
development environment
required
for working with Mongo.
Testing MongoDB Failover in Your Python App
shows show to switch to a MongoDB replica in production failure scenarios
using the PyMongo library.
What topic do you want to learn next?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» MongoDB
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Apache Cassandra - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Apache Cassandra
Apache Cassandra
is a column-family NoSQL
data store designed for write-heavy persistent storage in
Python web applications
and
data projects
.
Apache Cassandra is an implementation of the
NoSQL database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Python with Cassandra resources
Cassandra is commonly used with Python for write-heavy application demands.
The following tutorials walk through several of the helper libraries that
can be used to interact with Cassandra, with and without web frameworks such
as
Django
.
DataStax's Python Cassandra driver
can be installed as an
application dependency
to make it
easier to access and work with Cassandra in your Python applications.
Async Python and Cassandra with Gevent
explains how you monkeypatch
gevent
into
a Python 2.7 application and work with Cassandra using gevent's coroutines.
Note that this post could have instead been written with
asycnio
if it were
coded with Python 3.
How to Install and Use Cassandra on Django
instructs how to use Cassandra with Django 1.8 but it should still be
relevant for newer Django versions as well.
Using Cassandra with Python and uWSGI
gives some short example code for connecting to a Cassandra cluster outside
the HTTP request-response cycle to prevent timeouts and blocking issues with
WSGI servers
.
The Stack Overflow thread asking about the
best Cassandra library/driver for Python?
has a good answer on why to use the
datastax/python-driver
project due to its CQL support and active development.
Cassandra performance in Python: Avoid namedtuple
covers the performance penalty of using the
namedtuple
type with the
DataStax Cassandra Python driver and how you can work around it.
How Companies Use Cassandra
These resources are written by engineering teams at organizations that
have large scale Cassandra deployments. The posts cover topics such as
monitoring, scaling and usage with billions of records.
How Discord Stores Billions of Messages
talks about the evolution of Discord's very large scale message store
system from a
MongoDB
instance to Cassandra for storing
messages in a distributed, replicated cluster.
Monitoring Cassandra at Scale
explains how the Yelp engineering team uses Cassandra to complement their
MySQL and ElasticSearch instances. The post does a nice job of enumerating
the warning signs to monitor and provides a short example of an issue with
replication that could be caught by their approach.
How Uber Manages A Million Writes Per Second Using Mesos And Cassandra Across Multiple Datacenters
shows why Uber needs accurate real-time data at large scale to make their
driver and passenger operations run properly. The post goes into the
overall architecture they use including cluster size, tolerable latency
and other libraries in their stack.
General Cassandra resources
Apache Cassandra can be used independently of Python applications for
data storage and querying. The learning curve for getting started is similar
to other
NoSQL data stores
but scaling, performance
and monitoring can be challenging. The following resources focus on addressing
those issues based on teams that have felt the pain and often released their
resulting tools as open source projects.
The official
getting started documentation for Cassandra
provides installation, configuration, and basic querying information.
How Not To Use Cassandra Like An RDBMS (and what will happen if you do)
gives examples in Cassandra's query language CQL of operations that are
typical with
relational databases
but go
terribly
wrong
with Cassandra, due to its NoSQL architecture that is optimized for other
types of operations.
Cassandra Query Language (CQL) Tutorial
explains the concepts and syntax behind the data management language that
is Cassandra's equivalent to relational database SQL.
Backup and Recovery for Apache Cassandra and Scale-Out Databases
covers issues encountered when trying to take snapshot backups of Cassandra
due to partitions and consistency lag time that occur with just about every
Cassandra setup.
Getting the Most Out of Cassandra
is a video for on data modeling and application development for developers
new to Cassandra.
The Total Newbieâs Guide to Cassandra
compares Cassandra to traditional
relational databases
.
On Cassandra Collections, Updates, and Tombstones
and
Undetectable tombstones in Apache Cassandra
present how developers often use Cassandra collections incorrectly
when they are not experienced with how the data store operates.
When to use Cassandra and when to steer clear
explains the advantages Cassandra provides such as high throughput on
writes (versus reads) and availability. The disadvantages are also
given such as strong consistency, typical relational database-style
(ACID) transactions and reads without knowing the primary key of the
record you want to access. These are common database tradeoffs you need
to understand based on your workload and decide upon
before
you build
out your whole data architecture!
Analyzing Cassandra Performance with Flame Graphs
and
Garbage Collection Tuning for Apache Cassandra
are two posts in a series on how to debug issues in operational
Cassandra deployments using appropriate data visualization, especially
when the issue is due to the Java Virtual Machine (JVM)'s garbage
collection methods.
What subject do you want to learn next?
What're these NoSQL data stores hipster developers keep talking about?
Tell me about standard relational databases.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Apache Cassandra
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Neo4j - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Neo4j
Neo4j
(
source code
)
is a
NoSQL
graph database that can be used to persist data in
Python web applications
and
data projects
. Neo4j has both
a commercial version and a community version
of the database.
Neo4j is an implementation of the
NoSQL graph database
concept. Learn more in the
data
chapter or view the
table of contents
for all topics.
Comparing Neo4j with relational databases
RDBMS & Graphs: Relational vs. Graph Data Modeling
Building social network with Neo4j and Python
explores varying approaches for performing social data analysis in
relational databases and graph databases.
The Newest RDBMS-to-Neo4j ETL Tool
explains the differences between traditional
relational database models
and the graph-based
structure Neo4j provides. The article also covers how to use an Extract,
Transform and Load (ETL) tool to move your data from one database such as
MySQL
into Neo4j.
Neo4j resources
Building a Recommendation Engine with Neo4j and Python
shows how to use Neo4j's Cypher query language to retrieve and process data.
Using Neo4j from Python
is the
official page with Python-based database drivers.
Getting started with Neo4j and Python
is a short tutorial for installing Neo4j and running your first query.
impfuzzy for Neo4j
is a Python script that uses Neo4j as a backend to analyze malware.
Neo4j runs an online monthly developer "meetup" and records the talks.
Here are a few that stand out:
Natural Language Understanding with Python and Neo4j
Analysing football transfers with Neo4j
Efficient Graph Algorithms in Neo4j
An introduction to Neo4j Bolt Drivers
A Pythonic Tour of Neo4j and the Cypher Query Language
is a PyData conference talk that gives a Python view of Neo4j's query
language.
Analyzing the Paradise Papers with Neo4j: A Closer Look at Queries, Data Models & More
uses the Neo4j Cypher Query Language to perform analysis on the leaked
Paradise Papers data.
How to Import the Bitcoin Blockchain into Neo4j
shows how to use an existing cryptocurrency data set within Neo4j to
perform analysis on the graph structure.
Getting Started with Data Analysis using Neo4j
is a programming language agnostic tutorial that explains how to
do analysis directly in the Neo4j Cypher Query Language.
What do you want to learn about after Neo4j?
Tell me about standard relational databases.
I've built a Python web app, now how do I deploy it?
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Neo4j
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

pandas - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
pandas
The
Python Data Analysis Library (pandas)
is a data structures and analysis library.
pandas resources
Intro to pandas data structures
,
working with pandas data frames
and
Using pandas on the MovieLens dataset
is a well-written three-part introduction to pandas blog series that
builds on itself as the reader works from the first through the third
post.
pandas exercises
is
a GitHub repository with Jupyter Notebooks that let you practice
sorting, filtering, visualizing, grouping, merging and more with pandas.
A simple way to anonymize data with Python and Pandas
is a good tutorial on removing sensitive data from your unfiltered
data sets.
Learn a new pandas trick every day!
is a running list of great pandas tips that the author originally
posted on Twitter and then aggregated onto a single webpage.
Time Series Analysis with Pandas
show you how to combine
Python 3.6
, pandas,
matplotlib
and
seaborn
to analyze and visualize open data from Germany's power grid. This is
a great tutorial to learn these tools with a realistic data set.
Analyzing a photographer's flickr stream using pandas
explains how the author grabbed a bunch of Flickr data using the
flickr-api
library
then analyzed the EXIF data in the photos using pandas.
Pandas Crosstab Explained
shows how to use the
crosstab
function in pandas so you can summarize
and group data.
Calculating streaks in pandas
shows how to measure and report on streaks in data, which is where
several events happen in a row consecutively.
How to Convert a Python Dictionary to a Pandas DataFrame
is a straightforward tutorial with example code for loading and adding
data stored in a typical Python dictionary into a DataFrame.
This two-part series on loading data into a pandas DataFrame presents
what to do
when CSV files do not match your expectations
and
how to handle missing values
so you can start performing your analysis rather than getting frustrated
with common issues at the beginning of your workflow.
Building a financial model with pandas
explains how to create an amortization schedule with corresponding table
and charts that show the pay off period broken down by interest and
principal.
Efficiently cleaning text with pandas
provides a really great practical tutorial on different approaches
for cleaning a large data set so that you can begin to do your analysis.
The tutorial also shows how to use the
sidetable
library, which
creates summary tables of a DataFrame.
tabula-py: Extract table from PDF into Python DataFrame
presents how to use the Python wrapper for the
Tabula
library that makes it easier to
extract table data from PDF files.
Time Series Forecast Case Study with Python: Monthly Armed Robberies in Boston
walks through the data wrangling, analysis and visualization steps
with a public data set of murders in Boston from 1966 to 1975. This
particular data problem may not be your thing but by going through
the process you can learn a lot that can be applied to any data set.
A Gentle Visual Intro to Data Analysis in Python Using Pandas
presents spreadsheet-like pictures to show conceptually what
pandas is doing with your data as you apply various functions like
groupby
and
loc
.
Data Manipulation with Pandas: A Brief Tutorial
uses some example data sets to show how the most commonly-used functions
in pandas work.
Analyzing Pronto CycleShare Data with Python and Pandas
uses Seattle bikeshare data as a source for wrangling, analysis and
visualization.
Stylin' with pandas
shows how
to add colors and sparklines to your output when using pandas for data
visualization.
Python and JSON: Working with large datasets using Pandas
is a well-done detailed tutorial that shows how to mung and analyze
JSON data.
Fun with NFL Stats, Bokeh, and Pandas
uses National (American) Football League data as a source for
wrangling and visualization.
Analyzing my Spotify Music Library With Jupyter And a Bit of Pandas
shows how to grab all of your user data from the Spotify API then
analyze it using pandas in
Jupyter Notebook
.
Scalable Python Code with Pandas UDFs
explains that pandas operations can often be parallelized for better
performance using the Pandas UDFs feature in PySpark version 2.3
or greater.
How to use Pandas read_html to Scrape Data from HTML Tables
has a bunch of great code examples that show how to load
data from HTML directly into your DataFrames.
How to download fundamentals data with Python
shows how to obtain and use financial data, such as balance sheets,
stock prices, and various ratios to perform your own analysis on.
How to convert JSON to Excel with Python and pandas
provides instructions for creating a spreadsheet out of JSON file.
Loading large datasets in Pandas
explains how to get around the
MemoryError
issue that occurs
when using
read_csv
because the data set is larger than the
available memory on a machine. You can use chunking with
the
read_csv
function to divide the data set into smaller parts that
each can be loaded into memory. Alternatively, you can use a
SQLite database
to create a
relational database
with the data then use SQL queries or an
object-relational mapper (ORM)
to load the data and perform analysis in pandas.
Real-world Excel spreadsheets are often a mess of unstructured data, so
this tutorial on
Reading Poorly Structured Excel Files with Pandas
gives example code for extracting only part of a file as well
as reading ranges and tables.
What else would you like to learn about Python and data?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» pandas
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

SciPy and NumPy - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
SciPy and NumPy
SciPy
is a collection of open source code libraries
for math, science and engineering.
NumPy
,
Matplotlib
and
pandas
are libraries
that fall under the SciPy project umbrella.
NumPy
(
source code
)
is a Python code library that adds scientific computing capabilities such as
N-dimensional array objects, FORTRAN and C++ code integration, linear algebra
and Fourier transformations. NumPy serves as a required dependency for many
other scientific computing packages such as
pandas
.
Blaze
is a similar, but separate, ecosystem
with additional tools for wrangling, cleaning, processing and analyzing data.
SciPy resources
Take a look at the pages on
Matplotlib
and
pandas
for tutorials specific to those projects. The
following resources are broader walkthroughs for the SciPy ecosystem:
SciPy Lecture notes
goes into the
overall Python scientific computing ecosystem and how to use it.
The
SciPy Cookbook
contains
instructions for various SciPy packages that were previously hosted
on the SciPy wiki.
Robots and Generative Art and Python, oh my!
uses Scipy, Numpy, and
Matplotlib
to generate
some nice looking art that can even be written to paper using a
plotter. This is a very cool example project that ties together
the scientific world and the art world.
A plea for stability in the SciPy ecosystem
presents concerns from one scientist's perspective about how fast the
Python programming ecosystem changes and that code can become backwards
incompatible in only a few years. The issue is that many science projects
last decades and therefore cannot follow the rate of change as easily
as typical software development projects.
NumPy resources
From Python to NumPy
is an awesome resource that shows how to use your basic
Python knowledge to learn how to do vectorization with NumPy.
The ultimate beginner's guide to NumPy
explains how to install and import NumPy, then digs into using arrays for
computation and how to perform operations that get the results you need
for your data analysis.
Scientific Computing in Python: Introduction to NumPy and Matplotlib
is a detailed tutorial that goes through the basics for NumPy and
then connects it to
Matplotlib
.
Math to Code
provides an interactive
tutorial to learn how to implement math in NumPy.
101 NumPy Exercises for Data Analysis
has a bunch of questions and answers to common ways to work with NumPy
and is useful to understand what you can do with this library.
NumPy: creating and manipulating numerical data
contains many code examples for common operations.
Python NumPy Array Tutorial
is a starter tutorial specifically focused on using and working
with NumPy's powerful arrays.
Beyond Numpy Arrays in Python
is a predecessor to a
Numpy Enhancement Proposal
that recommends how to prepare the scientific computing ecosystme for
GPU, distributed and sparse arrays.
Probability distribution explorer
contains graphs for understanding how different probabilities look
when plotted. There is also code for implementing the visuals in NumPy
and SciPy.
Example NumPy code
SmoothLife
is an
implementation of
Conway's Game of Life
using NumPy. The project uses a continuous space rather than the
traditional discrete board.
Advanced Numpy Techniques
is a
Jupyter Notebook
with code on
beyond-the-basics NumPy features.
What else would you like to learn about Python and data?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» SciPy & NumPy
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Bokeh - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Bokeh
Bokeh
is a data visualization
library that allows a developer to code in Python and output
JavaScript
charts and visuals in web browsers.
Why is Bokeh a useful library?
Web browsers are ideal clients for consuming interactive visualizations.
However, libraries such as
d3.js
can be
difficult to learn and time consuming to connect to your Python backend
web app. Bokeh instead generates the JavaScript for your application while
you write all your code in Python. The removal of context switching between
the two programming languages can make it easier and faster to create
charts and visualizations.
What do Bokeh visualizations look like?
Bokeh can create any type of custom graph or visualization. For example,
here is a screenshot of a bar chart created with the
figure
plot:
For more references, including interactive live demonstrations, check out
these sites:
The
official Bokeh gallery
has many example Bokeh visual formats.
Bokeh Applications
hosts numerous
data visualizations built with Bokeh.
Bokeh resources
Bokeh is under heavy development ahead of the upcoming 1.0 release. Note that
while all of the following tutorials are useful, it is possible some of the
basic syntax will change as the library's API is not yet stable.
Integrating Bokeh Visualisations Into Django Projects
does a nice job of walking through how to use Bokeh to render
visualizations in
Django
projects.
Responsive Bar Charts with Bokeh, Flask and Python 3
is my recommended
tutorial for those new to Bokeh who want to try out the library and get
an example project running quickly with
Flask
.
Fun with NFL Stats, Bokeh, and Pandas
takes an NFL play-by-play data set, shows how to wrangle the data into
an appropriate format then explains the code that uses Bokeh to visualize
it.
Visualizing with Bokeh
gives a detailed explanation with the code for number Bokeh visuals
you can output while working with a
pandas
data set.
Interactive Data Visualization in Python With Bokeh
is a great beginners tutorial that shows you how to structure your data,
draw your first figures and add interactivity to the visualizations.
Creating Bar Chart Visuals with Bokeh, Bottle and Python 3
is a tutorial that combines the
Bottle
web framework
Building Bullet Graphs and Waterfall Charts with Bokeh
covers buildings two types of useful visualizations into your applications
using Bokeh.
Interactive Visualization of Australian Wine Ratings
builds a non-trivial visualization with a nice sample set of data based
on wine ratings.
Visualization with Bokeh
Drawing a Brain with Bokeh
is a fun example of a chord diagram that represents neural connections in
the brain.
Bryan Van de Ven on Bokeh
is a podcast episode by one of the main Bokeh maintainers.
The Python Visualization Landscape
by Jake VanderPlas at PyCon 2017 covers many Python data visualization
tools, including Bokeh.
This
flask-bokeh-example
project has the code to create a simple chart with Bokeh and
Flask
.
Realtime Flight Tracking with Pandas and Bokeh
provides a great example of combining
pandas
for structuring
data with Bokeh for visualization.
How to Create an Interactive Geographic Map Using Python and Bokeh
shows how to use a
GeoJSONDataSource
as input for Bokeh and draw a
map with the data.
What else would you like to learn about Python and data?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Bokeh
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

d3.js - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
d3.js
Data-Driven Documents (d3.js)
is a
JavaScript
visualization library used to create
interactive visuals for web browsers.
d3.js tutorials
d3.js has a steep learning curve so it is a good idea to read several
tutorials before diving in and trying to create your own visualization
from scratch.
The Hitchhikerâs Guide to d3.js
is a wonderfully-written resource that explains the context for how
d3.js works and how all the pieces can be used to create your desired
visualizations.
d3.js first steps
contains the code and markup for building your first d3.js visual.
Let's Make a D3 Plugin
shows
you how to create your own reusable plugin that you can use across
multiple visualizations as a separate JavaScript library. d3.js
version 4 is now widely used so don't worry about the note at the
start of the article.
Reusable and extendable d3 charts
is a natural extension of the d3 plugin post. It shows how to reuse
visualization code between multiple visuals.
Visualizing Movement Data - Part I
provides a detailed example of how to draw a complex visualization.
This
Fantasy Map Generator
is such a cool example of what d3.js can procedurally generate based on
a set of inputs.
Building dashboards with Django and D3
Argyle
in
d3? Oh yes, the library can do that, and here is the code to prove it.
How and why to use D3 with React
is an awesome overview of the D3.js plugin ecosystem and how to use
the tool with a React-based JavaScript front end.
D3 is not a data visualization library
breaks down the parts to D3 and why it's not directly comparable to
a typical charting library.
Charts with d3.js
Responsive D3js Charts
shows how to take a static line chart and make it
responsive
when the browser size changes.
Resize to Scale with d3.js
gives code for a render function that adjusts the size of the viewing
window based on the parent element for the visualization.
Responsive Data Visualization
provides another approach for making responsive D3.js charts.
Make great-looking d3.js charts in Python without coding a line of JavaScript
combines a Python backend with the
python-nvd3
library to
generate d3.js charts without having to hand-write the JavaScript code.
If you are interested in a solution like this for your own visualizations
then you should also check out
Bokeh
.
How to make a modern dashboard with NVD3.js
uses the
NVD3.js
library that works as an
abstraction on top of d3.js to create charts. The post puts together
several charts to show how to build a dashboard based on public JSON
data.
d3-regression
is a module for calculating statistical regressions from two-dimensionala
data.
D3 ecosystem
The trouble with D3
is not a tutorial but it's an important read because it discusses why
D3 can be very difficult to learn: the learning curve depends on your
background. If you are a front-end developer you will likely have the
easiest time if you already understand
JavaScript
,
SVG and the browser Document Object Model (DOM). Non-technical designers
and analysts typically have the hardest time with using D3 because the
not only have to learn the tool itself but all the concepts and
web browser technologies that it is built upon.
This
visualization of d3.js modules and resources
is a wonderful map for understanding how various parts of the library
and the ecosystem fit together. The visual provides a useful map for where
to concentrate your learning depending on what type of visualization you
are working to build.
D3.js in Action, Second Edition
is partially an announcement for the authors book but also contains
good context for who uses D3 and why its usage continues to grow.
What else would you like to learn about Python and data?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» d3.js
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Matplotlib - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Matplotlib
Matplotlib is a data visualization plotting library where a developer can
code visuals in Python and output them as part of
Jupyter Notebooks
,
web applications
and graphical user interface (GUI)
toolkits.
Matplotlib resources
Effectively using Matplotlib
is an awesome getting started tutorial that breaks through the confusing
beginner steps so you can quick start using the plotting library.
Matplotlib Cheat Sheet: Plotting in Python
contains some handy snippets of code to perform common plotting operations
in Matplotlib.
5 Quick and Easy Data Visualizations in Python
shows several code examples with explanations for performing exploratory
data analysis using Matplotlib.
Introduction to MatplotlibâââData Visualization in Python
explains how to install and start using Matplotlib. The post has a ton
of detail on customizing your plots and graphs after creating the
initial visuals.
Visualize World Trends using Seaborn in Python
shows world life expectancy in plots generated by Matplotlib and Seaborn.
Pandas & Seaborn - A guide to handle & visualize data in Python
builds a visualization by starting with
pandas
for data
wrangling then outputs charts with Matplotlib and Seaborn.
Matplotlib Tips and Demos
is a long
Jupyter Notebook
with a ton of example
code that shows how to use Matplotlib in many ways.
Animation with Matplotlib
explains the
animation
base class and the main interfaces for
creating animations in your visualizations.
Matplotlib: Creating Plots
is a video tutorial series where each 15-ish minute episode covers
one important topic such as shading areas on line plots, drawing
pie charts or plotting a stream of updating data.
What else would you like to learn about data with Python?
Tell me about standard relational databases.
What're these NoSQL data stores hipster developers keep talking about?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Matplotlib
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Markdown - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Markdown
Markdown is a common markup language frequently used by developers to write
Python project documention.
Markdown's origin
Markdown was originally
developed by John Gruber
in 2004. The markup language's lightweight design helped it gain rapid
adoption by software developers and designers. The format's simplicity also
makes it easier to write parsers to convert the structured syntax into
other formats such as HTML and JSON.
Markdown resources
Markdown does not have an extensive set of strict rules like some other
text formats so you should be able to read up on the basics with these
articles then write a few practice documents to be comfortable with it.
The following resources are really helpful when you are getting started
or need a quick reference on a less commonly-used feature such as tables
or block quotes.
Say yes to Markdown, no to MS Word
provides a really awesome overview of why Markdown is a more usable file
format than Microsoft Word and similar proprietary file types. The article
also has a good list of useful Markdown-related tools such as a
Markdown-to-PDF converter
(a NodeJS package but easy enough to use with a basic development
environment).
Markdown syntax
is the defacto standard and wonderful reading for both initial learning
and random reference.
Markdown cheatsheet
is a quick reference that is a shortened version of the above Markdown
syntax page.
Markdown parsers in Python
reviews many of the most common Python Markdown parser implementations
to give insight into the advantages and disadvantages of each one.
reStructuredText vs Markdown for documentation
brings up some really good points about the downsides to Markdown's
simplicity. First, a lot of documentation needs more complex output that
is not possible with vanilla Markdown so you need to drop into plain old
HTML, which defeats the purpose of using a markup language. Second, some
of the syntax around inserting blank lines by adding spaces at the end
of lines is confusing if someone is using a
text editor or development environment
that
is not configured to show blank spaces. Worse yet, if your editor is set to
remove blank spaces at the end of lines, which is fairly common among
developers, then you can mistakenly break the formatting intended by
the original author. Overall this is a good piece to read for a balanced
view of Markdown and the reasons it provides are one reason why I use
both Markdown and reStructuredText depending on the project.
The Python Package Index (PyPI)
supports Markdown as of 2018
although there are still some tweaks being made to the flavors that can be
used such as GitHub-flavored Markdown.
PowerShell and Markdown
shows how to work with Markdown in
PowerShell
including customizing colors and listing some quirks you may need to get
around.
reStructuredText vs. Markdown for technical documentation
compares Markdown and reStructuredText specifically for documenting
software and explains where each one has advantages.
Reach for Markdown, not LaTeX
examines the virtues of using straight Markdown along with tools such
as
pandoc
to convert from one file format to
another, including how to use Markdown for presentations and not just
regular documentation.
Markdown page
is a JavaScript
file that makes it easy to render plain old Markdown as a webpage.
What else do you want to learn?
What is a static website generator?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» Markdown
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

reStructuredText - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
reStructuredText
reStructuredText
, sometimes
abbreviated as "RST" or "reST", is a
markup language
implementation that is often used to document Python projects.
reStructuredText resources
A brief tutorial on parsing reStructuredText (reST)
reStructuredText vs. Markdown for technical documentation
RestructuredText (reST) and Sphinx CheatSheet
reStructuredText cheat sheet
What do you want to learn next?
What is a static website generator?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
Relational Databases
PostgreSQL
MySQL
SQLite
Object-relational Mappers
SQLAlchemy
Peewee
Django ORM
Pony ORM
NoSQL Data Stores
Redis
MongoDB
Apache Cassandra
Neo4j
Data analysis
pandas
SciPy & NumPy
Data visualization
Bokeh
d3.js
Matplotlib
Markup Languages
Markdown
reStructuredText
Oracle
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
» reStructuredText
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Django - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Django
Django
is a widely-used Python web
application framework with a "batteries-included" philosophy. The principle
behind batteries-included is that the common functionality for building
web applications should come with the framework instead of as separate
libraries.
For example,
authentication
,
URL routing
, a
template engine
,
an
object-relational mapper
(ORM),
and
database schema migrations
are all included with the
Django framework
.
Compare that included functionality to the Flask framework which requires a
separate library such as
Flask-Login
to perform user authentication.
The batteries-included and extensibility philosophies are simply two different
ways to tackle framework building. Neither philosophy is inherently better
than the other one.
Django is an implementation of the
web frameworks
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Why is Django a good web framework choice?
The Django project's stability, performance and community have grown
tremendously over the past decade since the framework's creation. Detailed
tutorials and good practices are readily available on the web and in books.
The framework continues to add significant new functionality such as
database migrations
with each release.
I highly recommend the Django framework as a starting place for new Python web
developers because the official documentation and tutorials are some of the
best anywhere in software development. Many cities also have Django-specific
groups such as
Django District
,
Django Boston
and
San Francisco Django
so new developers can get help when they are stuck.
Django books and tutorials
There are a slew of free or low cost resources out there for Django. Make
sure to check the version numbers used in each post you read because
Django was released over 10 years ago and has had a huge number of updates
since then. These resources are geared towards beginners. If you are already
experienced with Django you should take a look at the next section of
resources for more advanced tutorials.
Tango with Django
is an extensive
set of free introductions to using the most popular Python web framework.
Several current developers said this book really helped them get over the
initial framework learning curve.
The
Django Girls Tutorial
is a great tutorial that doesn't assume any prior knowledge of Python or
Django while helping you build your first web application.
A Complete Beginner's Guide to Django
is a wonderful seven-part series that incrementally builds out a Django
project and handles
deploying the app
in the final
post. The seven parts are:
Getting Started
Fundamentals
Advanced Concepts
Authentication
Django ORM
Class-Based Views
Deployment
Test-Driven Development with Python
focuses on web development using Django and JavaScript. This book uses
the development of a website using the Django web framework as a real
world example of how to perform test-driven development (TDD). There is
also coverage of NoSQL, WebSockets and asynchronous responses. The book can
be read online for free or purchased in hard copy via O'Reilly.
Django OverIQ
is a
project-based tutorial for beginners that covers the required features
such as the
Django ORM
and
Django Templates
.
The
Django subreddit
often has links to
the latest resources for learning Django and is also a good spot to ask
questions about it.
This Django tutorial shows how to
build a project from scratch using Twitter Bootstrap, Bower, Requests and the Github API
.
The
recommended Django project layout
is helpful for developers new to Django to understand how to structure
the directories and files within apps for projects.
Django for Beginners: Build websites with Python and Django
by
William S. Vincent
is perfect if you are
just getting started with Django and web development, taking you from
total beginner to confident web developer with Django and Python.
Django videos
Are you looking for Django videos in addition to articles? There is a special
section for Django and web development on the
best Python videos
page.
Intermediate and advanced Django topics
These books and tutorials assume that you know the basics of building
Django and want to go further to become much more knowledgeable about
the framework.
2 Scoops of Django
by Daniel Greenfeld and Audrey Roy is well worth the price of admission if
you're serious about learning how to correctly develop Django websites.
The
Test-Driven Development with Django, Django REST Framework, and Docker
course details how to set up a development environment with Docker in
order to build and deploy a RESTful API powered by Python, Django,
and Django REST Framework.
User Interaction With Forms
explains general web form input, how Django handles forms via POST requests,
different types of input such as CharFields, DateFields and EmailFields,
and validating that input.
This 3-part Django project optimization guide covers a wide range of
advanced topics such as
Profiling and Django settings
,
working with databases
and
caching
.
Caching in Django
is a detailed
look at the configuration required for caching and how to measure the
performance improvements once you have it in place.
Mental Models for Class Based Views
provides some comparison points between class based views (CBVs) and
function based views and the author's opinions for how you can better
understand CBVs.
Working with time zones is necessary for every web application. This
blog post on pytz and Django
is a
great start for figuring out what you need to know.
A Guide to ASGI in Django 3.0 and its Performance
covers the new Asynchronous Server Gateway Interface (ASGI) that was
introduced in Django 3.0 and explains some of the nuances and gotchas
that you should consider if you decide to use it for your web apps.
REST APIs with Django: Build powerful web APIs with Python and Django
by
William S. Vincent
is the book for you
if you are just moving beyond the basics of Django and looking to get
up speed with
Django REST Framework (DRF)
and service-oriented architecture (SOA). It also dives into more advanced
topics like token-based authentication and permissions.
Django Stripe Tutorial
details how to quickly add Stripe to accept payments in a Django web app.
This
Python Social Auth for Django tutorial
will show you how to integrate social media sign in buttons into your Django
application.
Upgrading Django
provides a version-by-version guide for updating your Django projects'
code.
The
Django Admin Cookbook
and
Building Multi Tenant Applications with Django
are two solid "code recipe-style" free open source books that will teach
you more about the admin interface as well as building projects that
will be used by more than a single customer so their data needs to be
properly separated.
How to Create Custom Django Management Commands
explains how to expand the default
manage.py
commands list with your
own custom commands in your projects. The tutorial has a bunch of great
examples with expected output to make it easy to follow along and learn
while you work through the post.
Luke Plant writes about
his approach to class based views
(CBVs),
which often provoke heated debate in the Django community for whether they
are a time saver or "too much magic" for the framework.
Django Apps Checklist
gives some good practices rules for building reusable Django apps.
Django migrations
Paul Hallett wrote a
detailed Django 1.7 app upgrade guide
on the Twilio blog from his experience working with the django-twilio
package.
Real Python's
migrations primer
explores the difference between South's migrations and the built-in
Django 1.7 migrations as well as how you use them.
Andrew Pinkham's "Upgrading to Django 1.7" series is great learning
material for understanding what's changed in this major release and
how to adapt your Django project.
Part 1
,
part 2
and
part 3
and
part 4
are now all available to read.
Django migrations without downtimes
shows one potential way of performing on-line schema migrations with
Django.
How to Extend Django User Model
presents four main ways to expand upon the built-in
User
model that
is packaged with Django. This scenario is very common for all but the
simplest Django projects.
Creating a Custom User Model in Django
looks at how to create a custom User model in Django so that an email
address can be used as the primary user identifier instead of a
username for authentication.
Django Channels
Channels are a new mechanism in Django 1.9 provided as a standalone app.
They may be incorporated into the core framework in 2.0+. Channels provide
"real-time" full-duplex communication between the browser and the server
based on
WebSockets
.
This
tutorial shows how to get started with Django Channels in your project
.
The
channels examples repository
contains a couple of good starter projects such as a live blog and a
chat application to use as base code.
The
Developing a Real-Time Taxi App with Django Channels and Angular
course details how to create a ride-sharing app with Django Channels,
Angular, and Docker. Along the way, you'll learn how to manage
client/server communication with Django Channels, control flow and
routing with Angular, and build a RESTful API with Django REST
Framework.
Django testing
Integrating Front End Tools with Django
is a good post to read for figuring out how to use
Gulp
for handling front end tools in development and production Django sites.
Django Testing Cheat Sheet
covers many common scenarios for Django applications such as testing
POST requests, request headers, authentication, and large numbers of
model fields in the
Django ORM
.
Getting Started with Django Testing
will help you stop procrastinating on testing your Django projects if you're
uncertain where to begin.
Testing in Django
provides numerous examples and explanations for how to test your Django
project's code.
Django views automated testing with Selenium
gives some example code to get up and running with
Selenium
browser-based tests.
Django with JavaScript MVC frameworks
There are resources for JavaScript MVC frameworks such as
Angular
,
React
and
Vue.js
on their respective pages.
Django ORM tutorials
Django comes with its own custom object-relational mapper (ORM) typically
referred to as "the Django ORM". Learn more about the
Django ORM
on the its own page and more broadly about
ORMs on the
Python object-relational mappers page
.
Static and media files
Deploying and handling static and media files can be confusing for new
Django developers. These resources along with the
static content
page are useful for figuring out how
to handle these files properly.
Using Amazon S3 to Store your Django Site's Static and Media Files
is a well written guide to a question commonly asked about static and
media file serving.
Loading Django FileField and ImageFields from the file system
shows how to load a model field with a file from the file system.
Storing Django Static and Media Files on Amazon S3
shows how to configure Django to load and serve up static and media files, public and private, via an Amazon S3 bucket.
Django project templates
Project templates, not to be confused with a
template engine
, generate boilerplate code for
a base Django project plus optional libraries that are often used when
developing web applications.
Caktus Group's Django project template
is Django 2.2+ ready.
Cookiecutter Django
is a
project template from Daniel Greenfeld, for use with Audrey Roy's
Cookiecutter
. The template results
are Heroku deployment-ready.
Two Scoops Django project template
is also from the PyDanny and Audrey Roy. This one provides a quick scaffold
described in the Two Scoops of Django book.
Sugardough
is a Django project
template from Mozilla that is compatible with cookiecutter.
Open source Django example projects
Reading open source code can be useful when you are trying to figure
out how to build your own projects. This is a short list of some
real-world example applications, and many more can be found on the
Django example projects and code
page.
Openduty
is a website status checking
and alert system similar to PagerDuty.
Courtside
is a pick up sports web
application written and maintained by the author of PyCoder's Weekly.
These two Django Interactive Voice Response (IVR) system web application
repositories
part 1
and
part 2
show you how to
build a really cool Django application. There's also an accompanying
blog post
with detailed explanations of each step.
Taiga
is a project management
tool built with Django as the backend and AngularJS as the front end.
Chowist
is a web application
that replicates core features of Yelp and adds a couple more bells
and whistles.
Open source code to learn Django
There are many open source projects that rely on Django.
One of the best ways to learn how to use this framework is to read
how other projects use it in real-world code. This section lists
these code examples by class and method in Django's code base.
Django
:
Extensions, Plug-ins and Related Libraries
&
Example Projects and Code
django.apps.config AppConfig
django.conf
settings
,
urls.url
django.contrib.admin
filters.SimpleListFilter
,
django.contrib.admin.helpers
ActionForm
,
AdminForm
django.contrib.admin.options
IS_POPUP_VAR
,
IncorrectLookupParameters
,
ModelAdmin
,
csrf_protect_m
django.contrib.admin.sites
NotRegistered
,
register
,
site
django.contrib.auth
get_user_model
,
decorators login_required
,
hashers make_password
django.contrib.staticfiles
finders
,
.finders BaseFinder
,
.finders BaseStorageFinder
,
.finders find
,
.finders get_finders
.handlers StaticFilesHandler
storage
.storage CachedStaticFilesStorage
,
.storage HashedFilesMixin
,
.storage ManifestStaticFilesStorage
,
.storage StaticFilesStorage
,
.storage staticfiles_storage
.utils matches_patterns
django.core
cache
,
checks
,
exceptions
,
mail
,
mail.send_mail
,
mail.messages EmailMessage
,
management
,
management.base BaseCommand
,
serializers
,
signals
,
signing
,
validators
django.core.exceptions
DisallowedRedirect
,
FieldDoesNotExist
,
FieldError
,
ImproperlyConfigured
,
MiddlewareNotUsed
,
NON_FIELD_ERRORS
,
ObjectDoesNotExist
,
PermissionDenied
,
SuspiciousFileOperation
,
SuspiciousMultipartForm
,
ValidationError
django.db
DEFAULT_DB_ALIAS
,
DataError
,
DatabaseError
,
IntegrityError
,
OperationalError
,
ProgrammingError
,
connection
,
connections
,
migrations
,
router
,
transaction
.backends utils
django.db.migrations
RunPython
,
.autodetector MigrationAutodetector
,
.exceptions IrreversibleError
,
.executor MigrationExecutor
,
.loader MIGRATIONS_MODULE_NAME
,
.loader MigrationLoader
,
.operations.base Operation
,
.state ProjectState
django.db.models
AutoField
,
BooleanField
,
CharField
,
DateField
,
DateTimeField
,
FileField
,
ForeignKey
,
GenericIPAddressField
,
ImageField
,
IntegerField
,
Model
,
PositiveIntegerField
,
PositiveSmallIntegerField
,
signal
,
SlugField
,
SmallIntegerField
,
TextField
django.db.models.query
BaseIterable
,
EmptyQuerySet
,
ModelIterable
,
Prefetch
,
Q
,
QuerySet
,
prefetch_related_objects
django.db.models.query_utils
DeferredAttribute
,
PathInfo
,
Q
django.db.models.signals
post_delete
,
post_save
,
pre_delete
,
pre_save
django.dispatch.dispatcher Signal
django.forms
BaseForm
,
BooleanField
,
CharField
,
CheckboxInput
,
CheckboxSelectMultiple
,
ChoiceField
,
DateField
,
DateInput
,
DateTimeField
,
EmailField
,
Field
,
FileInput
,
FilePathField
,
Form
,
HiddenInput
,
ImageField
,
IntegerField
,
Media
,
MediaDefiningClass
,
ModelChoiceField
,
ModelForm
,
ModelMultipleChoiceField
,
MultipleChoiceField
,
Select
,
SelectMultiple
,
TypedChoiceField
,
ValidationError
django.http
HttpResponse
,
HttpResponseBadRequest
,
HttpResponseForbidden
,
HttpResponseNotModified
,
Http404
,
HttpResponsePermanentRedirect
,
HttpResponseRedirect
django.shortcuts
get_list_or_404
,
get_object_or_404
,
redirect
,
render
,
resolve_url
django.template.base
Context
,
FilterExpression
,
Node
,
NodeList
,
Parser
,
Template
,
TemplateSyntaxError
,
TextNode
,
Token
,
TokenType
,
VariableDoesNotExist
,
VariableNode
,
token_kwargs
django.template.context
Context
django.template.defaultfilters
escape
,
filesizeformat
,
safe
,
slugify
,
striptags
,
title
,
truncatechars
django.template.loader
get_template
,
render_to_string
,
select_template
django.template.loader_tags
BlockNode
,
ExtendsNode
,
IncludeNode
django.template.loaders.filesystem
Loader
django.template.response
SimpleTemplateResponse
,
TemplateResponse
django.urls
URLPattern
,
URLResolver
,
clear_url_caches
,
get_callable
,
get_resolver
,
get_script_prefix
,
include
,
path
,
re_path
,
register_converter
,
resolve
,
reverse
,
reverse_lazy
django.urls.exceptions
NoReverseMatch
,
Resolver404
django.utils
dateformat
,
dateparse
,
datetime_safe
,
formats
,
module_loading
,
termcolors
,
timezone
,
translation
,
tree
django.utils.cache
add_never_cache_headers
,
cc_delim_re
,
patch_cache_control
,
patch_response_headers
,
patch_vary_headers
django.utils.crypto
constant_time_compare
,
get_random_string
django.utils.datastructures
MultiValueDict
django.utils.dateparse
parse_datetime
,
parse_duration
django.utils.dates
MONTHS
django.utils.datetime_safe
datetime
django.utils.decorators
method_decorator
django.utils.deprecation
MiddlewareMixin
,
RenameMethodsBase
django.utils.duration
duration_string
django.utils.encoding
DjangoUnicodeDecodeError
,
filepath_to_uri
,
force_bytes
,
force_str
,
force_text
,
iri_to_uri
,
is_protected_type
,
smart_bytes
,
smart_str
,
smart_text
,
uri_to_iri
django.utils.formats
get_format
,
localize_input
,
sanitize_separators
django.utils.functional
LazyObject
,
Promise
,
SimpleLazyObject
,
keep_lazy
,
lazy
,
total_ordering
,
wraps
django.utils.html
conditional_escape
,
escape
,
escapejs
,
format_html
,
format_html_join
,
mark_safe
,
smart_urlquote
,
strip_tags
django.utils.http
base36_to_int
,
http_date
,
int_to_base36
,
is_safe_url
,
unquote
,
url_has_allowed_host_and_scheme
,
urlencode
,
urlquote
,
urlunquote
django.utils.ipv6
clean_ipv6_address
django.utils.itercompat
is_iterable
django.utils.module_loading
autodiscover_modules
,
import_string
,
module_has_submodule
django.utils.numberformat
format
django.utils.safestring
SafeData
,
SafeText
,
mark_safe
django.utils.termcolors
colorize
django.utils.text
Truncator
,
capfirst
,
format_lazy
,
get_text_list
,
get_valid_filename
,
slugify
django.utils.timezone
get_current_timezone
,
make_aware
,
now
,
timedelta
django.utils.translation
LANGUAGE_SESSION_KEY
,
activate
,
deactivate_all
,
get_language
,
get_language_from_request
,
gettext
,
gettext_lazy
,
ngettext
,
override
,
pgettext
,
pgettext_lazy
,
ugettext
,
ugettext_lazy
,
ungettext
,
ungettext_lazy
django.utils.version
get_complete_version
django.views
csrf
.debug get_default_exception_reporter_filter
.decorators.csrf csrf_exempt
.decorators.debug sensitive_post_parameters
.decorators.http require_GET
,
.decorators.http require_POST
django.views.generic
CreateView
,
DeleteView
,
DetailView
,
FormView
,
ListView
,
RedirectView
,
TemplateView
,
UpdateView
,
View
django.views.generic.base
RedirectView
,
TemplateResponseMixin
,
TemplateView
,
View
django.views.generic.detail
SingleObjectMixin
django.views.generic.edit
CreateView
,
DeleteView
,
DeletionMixin
,
FormMixin
,
FormView
django.views.generic.list
ListView
,
MultipleObjectMixin
django.views.i18n
JavaScriptCatalog
django.views.static
serve
,
was_modified_since
What do you need to learn next for your Django app?
My app runs but looks awful. How do I style the user interface?
How do I integrate existing web APIs into my application?
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Django
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Flask - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Flask
Flask
(
source code
)
is a Python
web framework
built with a
small core and easy-to-extend philosophy
.
Why is Flask a good web framework choice?
Flask is considered more
Pythonic
than the
Django
web framework because in common situations the
equivalent Flask web application is more explicit. Flask is also easy to get
started with as a beginner because there is little boilerplate code for getting a
simple app up and running.
For example, here is a valid "Hello, world!" web application with Flask:
from flask import Flask
app = Flask(__name__)


@app.route('/')
def hello_world():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run()
The above code shows "Hello, World!" on localhost port 5000 in a web browser
when run with the
python app.py
command and the Flask library installed.
The equivalent "Hello, World!" web application using the
Django
web framework
would involve significantly more boilerplate
code.
Flask was also written several years after Django and therefore
learned from the Python community's reactions as the framework evolved.
JÃ¶kull SÃ³lberg wrote a great piece articulating to this effect in his
experience switching between Flask and Django
.
Flask is an implementation of the
web frameworks
concept. Learn how these parts fit together in the
web development
chapter or
view all topics
.
How does Flask relate to the Pallets Projects?
Flask was originally designed and developed by Armin Ronacher as an
April Fool's Day joke in 2010
.
Despite the origin as a joke, the Flask framework became wildly popular as
an alternative to Django projects with their monolithic structure and
dependencies.
Flask's success created a lot of additional work in issue tickets and pull
requests. Armin eventually created
The Pallets Projects
collection of open
source code libraries after he had been managing Flask under his own GitHub
account for several years. The Pallets Project now serves as the
community-driven organization that handles Flask and other related Python
libraries such as
Lektor
,
Jinja
and
several others.
Flask tutorials
The "Hello, World!" code for Flask is just seven lines of code but learning how
to build full-featured web applications with any framework takes a lot of work.
These resources listed below are the best up-to-date tutorials and references
for getting started.
The Flask mega tutorial by
Miguel Grinberg
is a perfect
starting resource for using this web framework. Each post focuses on a
single topic and builds on previous posts. The series includes 18 parts:
#1 Hello World
,
#2 Templates
,
#3 Web Forms
,
#4 Database
,
#5 User Logins
,
#6 Profile Page and Avatars
,
#7 Unit Testing
,
#8 Followers, Contacts, and Friends
,
#9 Pagination
,
#10 Full Text Search
,
#11 Email Support
,
#12 Facelift
,
#13 Dates and Times
,
#14 I18n and L10n
,
#15 Ajax
,
#16 Debugging, Testing and Profiling
,
#17 Deployment on Linux
and
#18 Deployment on the Heroku Cloud
.
Miguel also wrote and recorded numerous
Flask Web Development content including a great book and video
book that are excellent resources worth the price, especially to support
his continuous revisions to the content.
Armin Ronacher, the creator of Flask, presented the technical talk
Flask for Fun and Profit
at PyBay 2016 where he discusses using the framework to build web apps
and
APIs
.
Explore Flask
is a public domain book that
was previously backed on Kickstarter and cost money for about a year before
being open sourced. The book explains best practices and patterns for
building Flask apps.
Learn to Build Web Applications with Flask and Docker
is a video course by
Nick Janetakis
that shows how to build a Software-as-a-Service (SaaS) application that
he
open sourced
which uses Flask for the
web framework
and
Docker
for the local
development environment
.
Flask by Example: Part 1
shows the basic first steps for setting up a Flask project.
Part 2
explains how to use PostgreSQL, SQLAlchemy and Alembic.
Part 3
describes text processing with BeautifulSoup and NLTK.
Part 4
shows how to build a task queue with Flask and Redis.
The blog post series "Things which aren't magic" covers how Flask's
ubiquitous @app.route decorator works under the covers. There are two
parts in the series,
part 1
and
part 2
.
How to Structure Large Flask Applications
covers a subject that comes up quickly once you begin adding significant
functionality to your Flask application.
Flask Blueprint templates
shows a way of structuring your
__init__.py
file with
blueprints
for expanding
projects into many files and modules.
If you're not sure why
DEBUG
should be set to
False
in a production
deployment
, be sure to read this article on
how Patreon got hacked
.
Developing a Single Page App with Flask and Vue.js
step-by-step walkthrough of how to set up a basic CRUD app with Vue and Flask.
Intermediate to advanced Flask resources
Once you move past the beginner tutorials and have created a few Flask
projects you will want to learn how to use Flask extensions,
deploy
your code and integrate
web APIs
to build more
extensive functionality. The following tutorials will guide you through
more advanced topics and provide solid learning materials, especially when
combined with the example real-world projects listed in the next section.
Microservices with Docker, Flask, and React
is an awesome course for beyond-the-basics work with Flask. There are
a couple of free chapters and the rest of the course is well worth paying
for to learn a bunch of valuable tools such as
Docker
,
React
and
microservices architectures
.
Visualize your trip with Flask and Mapbox
along with the
open source flask_mapbox GitHub repository
provides a fantastic example visualization of a trip to Iceland with
Flask as the backend web framework.
Microservices with Flask, Docker, and React
teaches how to spin up a reproducible Flask development environment with
Docker
. It shows how to
deploy
it to an
Amazon EC2 instance then scale the services on Amazon EC2 Container Service (ECS).
Build a Video Chat Application with Python, JavaScript and Twilio Programmable Video
shows how to use
Twilio
Programmable Video
to build cross-platform
(web, iOS and Android) video into Flask applications.
Why and how to handle exceptions in Python Flask
has some great example code and reasons why you should code defensively
by anticipating and handling the unhappy path exceptions in your Flask
applications. The examples are relevant to any web framework you will use
and are easy to copy and paste to test in your own applications.
The Flask Extensions Registry
is a
curated list of the best packages that extend Flask. It's the first location
to look through when you're wondering how to do something that's not in the
core framework.
How I Structure My Flask Application
walks through how this developer organizes the components and architecture
for his Flask applications.
Adding phone calling to your web application
is a killer Flask tutorial with all the code needed to create a
web app that can dial phones and receive inbound calls.
If you're looking for a fun tutorial with Flask and WebSockets, check out
my blog post on creating
Choose Your Own Adventure Presentations with Reveal.js, Python and WebSockets
.
Follow up that tutorial by
building an admin interface in part 1
,
part 2
and
part 3
that'll show you how to use forms and SQLAlchemy. There is also a
companion open source
GitHub repository
for the app with
tags for each step
in the blog posts.
One line of code cut our Flask page load times by 60%
is an important note about optimizing Flask template cache size to
dramatically increase performance in some cases.
Unit Testing Your Twilio App Using Pythonâs Flask and Nose
covers integrating the Twilio API into a Flask application and how to test
that functionality with
nose
.
The Flask documentation has some quick examples for how to deploy Flask
with
standalone WSGI containers
.
Serverless Python Web Applications With AWS Lambda and Flask
is a spectacular post that walks through how to run Flask applications
on AWS Lambda's
serverless
offering. The tutorial
has instructions on how to include
application dependencies
and handle
your
deployment
workflow.
Visualize your trip with Flask and Mapbox
uses geographic GeoJSON data and presents it in a Flask application
that uses
Mapbox
.
Handling Email Confirmation in Flask
is a great walkthrough for a common use case of ensuring an email address
matches with the user's login information.
Static websites with Flask
shows how to use Flask with
Frozen-Flask
to generate a
static website from a backend data source.
Running Flask on Docker Swarm
details how to run a Flask app on Docker Swarm.
Running Flask on Kubernetes
step-by-step walkthrough of how to deploy a Flask-based microservice (along with Postgres and Vue.js) to a Kubernetes cluster.
Dynamic Secret Generation with Vault and Flask
looks at how to use Hashicorp's Vault and Consul to create dynamic Postgres credentials for a Flask web app.
Open source Flask example projects
Flask's lack of standard boilerplate via a commandline interface for
setting up your project structure is a double edged sword. When you
get started with Flask you will have to figure out how to scale the
files and modules for the code in your application. The following open
source projects range from simple to complex and can give you ideas
about how to working on your codebase.
Skylines
is an open source
flight tracking web application built with Flask. You can check out a
running version of the application
.
Flask JSONDash
is a Flask
blueprint that creates JavaScript Object Notiation (JSON)
APIs
for
data
dashboards.
Microblog
is the companion
open source project that goes along with Miguel Grinberg's O'Reilly Flask
book.
Flaskr TDD
takes the official Flask
tutorial and adds test driven development and JQuery to the project.
Charles Leifer (author of
Peewee
and
Pony ORM
)
built a
note-taking app
along with the
source code in Gists
.
Reddit Job Search
uses the
Reddit API
for a jobs data set
and presents them via a Flask web app.
Bean Counter
is an
open source Flask app for tracking coffee.
FlaskBB
is a Flask app for a discussion forum.
psdash
is an app built with Flask and
psutils to display information about the computer it is running on.
Flask project templates
Flask's wide array of extension libraries comes at the cost of having a more
complicated project setup. The following project templates provide a starter
base that you can either use for your own applications or just learn various
ways to structure your code.
Use the
Flask App Engine Template
for getting set up on Google App Engine with Flask.
Flask Foundation
is a
starting point for new Flask projects. There's also a
companion website
for
the project that explains what extensions the base project includes.
Cookiecutter Flask
is a
project template for use with
Cookiecutter
.
Flask-Boilerplate
provides another starting project with sign up, log in and password
reset.
The company Sunscrapers provides this
Flask boilerplate project with SQLAlchemy, py.test and Celery
baked into the Flask project structure.
flask-webpack-cookiecutter
combines a Flask framework project structure with
Webpack
, a module bundler frequently used
in the JavaScript world.
Open source code for learning Flask
There are many open source projects that rely on Flask to operate.
One of the best ways to learn how to use this framework is to read
how other projects use it in real-world code. This section lists
these code examples by class and method in Flask.
Flask
:
Extensions, Plug-ins and Related Libraries
&
Example Projects and Code
flask.app
BadRequest
,
Flask
,
Headers
,
ImmutableDict
flask.blueprints
Blueprint
flask.cli
AppGroup
,
DispatchingApp
,
FlaskGroup
,
ScriptInfo
,
pass_script_info
,
with_appcontext
flask.ctx
after_this_request
,
has_app_context
,
has_request_context
flask.globals
current_app
,
g
,
request
,
session
flask.helpers
flash
,
get_root_path
,
make_response
,
safe_join
,
send_file
,
url_for
flask.json
JSONEncoder
,
jsonify
flask.sessions
BadSignature
,
SessionInterface
,
SessionMixin
flask.signals
Namespace
,
got_request_exception
flask.templating
render_template
,
render_template_string
flask.views
MethodView
,
View
,
http_method_funcs
What web development topic do you want to learn next?
I've built a Python web app, now how do I deploy it?
What other Python web frameworks exist?
How can I version and store my source code?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Flask
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Bottle - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Bottle
Bottle
(
source code
) is a
WSGI-compliant
single source file
web framework with no external dependencies other than the Python
standard library (stdlib)
.
Should I use Bottle for web development?
Bottle is awesome for a few web development situations:
Prototyping ideas
Learning how web frameworks are built
Building and running simple personal web applications
Prototyping
Prototyping simple ideas is often easier with Bottle than a more
opinionated web framework like
Django
because Django
projects start with a significant amount of boilerplate code. The
Model-View-Template
structure for Django apps within projects makes maintaining projects
easier, but it can be cumbersome on starter projects where you're
just playing with random ideas so you aren't worried about your
application's long-term code structure.
Learning about frameworks
Bottle is contained
within a single large source file
named
bottle.py
so it provides great reading when learning how
WSGI
web frameworks work. Everything you need to learn
about how your web application's code connects with the Bottle framework is
contained within that single source code.
Personal projects
Personal projects can be deployed with Bottle as the only dependency.
If you've never performed a
Python web app deployment
before, the number of concepts and steps can be daunting. By packaging
bottle.py
with your app's source code, you can skip some of the
steps to more easily get your web application up and running.
Bottle is an implementation of the
web frameworks
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Bottle resources
Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS
is a quick tutorial for getting an out-of-the-box default Ubuntu 16.04
image ready for Bottle development with
Green Unicorn
as the
WSGI server
.
Check out these Full Stack Python Bottle tutorials that'll teach you
how to write a few small but very useful Bottle web apps:
Creating Bar Chart Visuals with Bokeh, Bottle and Python 3
Dialing Outbound Phone Calls with a Bottle Web App
How to Monitor Python / Bottle Web Apps
Replying to SMS Text Messages with Python and Bottle
Digital Ocean provides an extensive
introductory post on Bottle
.
First Steps with Python and Bottle
is a quick 4 minute introduction that I created for developers so they
can get the simplest possible Bottle web app running. There is also a
companion blog post with the code
.
Getting Started with Python, Bottle and Twilio SMS / MMS
shows how to build a simple Bottle web application that can send and
receive text and picture messages.
How to Make and Receive Phone Calls with Python, Bottle and Twilio Voice
is a similar beginner's tutorial for handling phone calls with a Bottle
app using
Twilio
.
Developing With Bottle
details how to create a basic application with Bottle.
The
official Bottle tutorial
provides a thorough view of basic concepts and features for the framework.
Running a Bottle app with Gunicorn
shows how to execute a simple Bottle web app with
Green Unicorn
.
Here's a short code snippet for
creating a RESTful API with Bottle and MongoDB
.
Bottle, full stack without Django
does a nice job of connecting SQLAlchemy with Bottle and building an example
application using the framework.
Using bottle.py in Production
has some good tips on deploying a Bottle app to a production environment.
Jinja2 Templates and Bottle
shows how to use Jinja instead of the built-in templating engine for
Bottle page rendering.
Python patterns
contains a setup that combines Bottle,
Celery
and
Peewee
as the developer's choice for backend
web development
. The developer also uses
Vim
as the primary editor for working with Bottle.
Open source Bottle example projects
Pattle
is a pastebin clone built with
Bottle.
Decanter
is a library for structuring
Bottle projects.
compare-python-web-frameworks
provides an example application using Bottle as one of the implementations.
Bottle framework learning checklist
Download Bottle
or install via pip with
pip install bottle
on your local development
machine.
Work through the official
Bottle tutorial
.
Start coding your Bottle app based on what you learned in the official
tutorial plus reading open source example applications found above.
Move on to the
deployment section
to get your initial
Bottle application on the web.
What do you want to learn next?
I've built a Python web app, now how do I deploy it?
My app runs but looks awful. How do I style the user interface?
What other Python web frameworks exist?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Bottle
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Pyramid - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Pyramid
Pyramid
is an open
source
WSGI
web framework based on the
Model-View-Controller (MVC) architectural pattern.
Pyramid is an implementation of the
web frameworks
concept. Learn how these parts fit together in the
web development
chapter or view
all topics
.
Open source Pyramid example apps
These projects provide solid starting code to learn from as you are building
your own applications.
pyramid_blogr
is an example
project that shows how to build a blog with Pyramid modeled on the
Flaskr
tutorial.
pyramid-blogr-cf
is another
Pyramid web app that has a similar title to the one above but this one
is intended for teaching
web development
to new
developers.
pyramid_appengine
provides a project skeleton for running Pyramid on
Google App Engine
.
Pyramid-specific packages
The following packages are designed to make Pyramid play nicely with existing
open source libraries by reducing the boilerplate you need to add to your
project.
pyramid_celery
and
pyramid_rq
make it easier
to use the
Celery
task queue
in your
Pyramid applications for handling asynchronous work.
pyramid_zipkin
provides
distributed tracing via the
Zipkin
library.
Ramses
(
source code
) is a RESTful web API
generation framework, similar in concept (but not in implementation
details) to how Django REST Framework works with
Django
.
Pyramid resources
Pyramid has fantastic official project documentation on its site. Other
resources are harder to come by compared to other established
web frameworks
such as
Django
and
Flask
, but there are enough tutorials out there for you to
learn Pyramid if you choose to build your web applications with it.
Try Pyramid
is the official marketing website for
Pyramid, with resources for extending your Pyramid apps. It also provides
some sample "hello world!" code.
An introduction to the Pyramid web framework for Python
provides a detailed configuration and more than trivial code to
build a "to do" application. This post is one in a four part series
that compares Pyramid to
Flask
,
Django
and Tornado so there is some commentary on how this framework compares
to the others.
The
first Pyramid app
is a good place to start getting your hands dirty with an example project.
Six Feet Up explains why Pyramid is their choice for
rapid development projects
in that blog post.
Build a chat app with Pyramid, SQLDB, and Bluemix
is a Pyramid application walkthrough specific to IBM's Bluemix platform.
Developing Web Apps Using the Python Pyramid Framework
is a video from San Francisco Python with an overview of how to install,
get started and build a web app with the Pyramid framework.
This
podcast interview with the primary author of the Pyramid framework
explains how Pyramid sprang from Pylons and how Pyramid compares to other
modern frameworks.
Anyone using the Pyramid framework?
is a good /r/Python thread with responses by current users as well as
frustrations by developers who tried and decided against sticking with
the framework.
Do you want to learn more about frameworks or a different subject?
What is the Django web framework?
My app runs but looks awful. How do I style the user interface?
What other Python web frameworks exist?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Pyramid
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

TurboGears - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
TurboGears
TurboGears
, born as a full stack layer on top
of Pylons, is now a standalone
WSGI
web framework
that can act both as a full stack framework (like
Django
)
or as a micro framework (like
Flask
)
Originally inspired by RubyOnRails it's based on MVC
where the controller dispatches the request to a set of actions
exposed from the controller itself.
TurboGears, in its full stack mode, provides all the features
you would require during development of a web application:
Identification and Authentication
Authorization
Autogenerated Admin and CRUD
Sessions
Caching
Schema Migrations
Master/Slave Database Queries Balancing
Request Bound Transactions
Interactive Debugger
Builtin Profiling
Pluggable Applications
It's also one of the few web frameworks officially supporting
MongoDB as one of the primary storage backends, including
support into the TurboGears Admin to autogenerate CRUDs
from MongoDB models.
While TurboGears has always been a full stack framework
with same scope of projects like Django, it differentiates
from other frameworks due the its philosophy on two major
parts of a web framework:
Templating
and
Routing
Templating
While TurboGears provides support for multiple template
engines, the primary one has always been a fully
validated XML template engine.
Currently TurboGears ships with the
Kajiki
template engine,
which was developed within the project itself, but in the past
it relied on the Genshi and Kid template engines which were
mostly syntax compatible with Kajiki.
Historically validated xml template engines has always been
slower than text template engines, but the Kajiki project
was able to create a very fast template engine that usually
renders faster than Mako or Django Template while
still retaining all the expected features.
The fact that it relies on a validated XML engine provides
some benefits compared to plain text engines like Django
Template, Jinja2 and Mako:
Automatic Escaping
It automatically escapes content rendered into the
template, thus making easier to avoid XSS and injection
security issues:
<div>
${
value
}
</div>
with
value='<script>alert("hello")</script>'
will render as
<div>
&lt;
script
&gt;
alert(
&quot;
hello
&quot;
)
&lt;
/script
&gt;
</div>;
thus preventing any form of injection from user provided content.
Automatic Internationalization
The template engine parses the provided template document
and recognises the nodes that contain static text.
As the engine is able to distinguish text from markup it's
able to flag the text for translation.
Content like
<div>Hello World</div>
would get automatically
translated if a translation for
"Hello World"
is provided,
without having to wrap text in
gettext
calls.
Compatibility with WYSIWYG Editors
As the template engine syntax is purely valid XHTML
the template itself can be opened with WYSIWYG editors
and as far as they don't strip unknown attributes
the template can be edited and saved back from those editors.
Routing
Most web frameworks have been relying on regular expressions
to declare routing, through decorators or through a routing map.
TurboGears supports regular expressions through the
tgext.routes
extension, but the preferred way of routing is through the
Object Dispatch
system.
In Object Dispatch a root controller object is traversed while
resolving the URL. Each part of the url path is mapped to a property
of the controller (Which might point to a sub controller) until
a final callable action is encountered.
This leads to a very natural mapping between URLs and the code
serving them, allowing people with minimal knowledge of a project
to jump in and quickly find actions in charge of serving a specific page.
In Object Dispatch an URL like
/users/new?name=MyName
would be served by a hierarchy of objects like:
class
UsersController(TGController)
:
@expose
()
def
new(self,
name=None)
:
return
'Hi, %s'
%
name
class
RootController(TGController)
:
users
=
UsersController()
It's easy to see how
/users/new
actually resolves
to
RootController.users.new
and all options provided
to the URL are passed to the action serving the response
as arguments.
TurboGears Resources
TurboGears Introduction Video
An overview of TurboGears2 features presented at the PyConWeb
TurboGears Documentation
The official TurboGears documentation
Microframework Mode Tutorial
The official tutorial that focuses on starting TurboGears in microframework
mode and leads to developement of a single file web application
FullStack Tutorial
The Wiki in 20 minutes tutorial that showcases how to create a fully
functional wiki application with TurboGears in full stack mode.
The CogBin
The CogBin is a list of the most common pluggable applications for
TurboGears, it enlists ready made pieces you can plug into your
web application to provide features like Facebook Login,
Comments, Registration and so on...
React in Pure Python
An article showcasing how to create web applications relying on React
without the need to have NodeJS installed at all. The article
uses TurboGears as the web framework to develop the example application.
Turbogears and the future of Python web frameworks
is a Talk Python to Me podcast episode featuring an interview with one
of the TurboGears core developers.
What do you want to learn next?
I've built a Python web app, now how do I deploy it?
My app runs but looks awful. How do I style the user interface?
What other Python web frameworks exist?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» TurboGears
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Falcon - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Falcon
Falcon
is a
WSGI-compliant
web framework
designed to build
RESTful APIs
without requiring external code library dependencies.
Falcon is an implementation of the
web frameworks
concept. Learn how these parts fit together in the
web development
chapter or view
all topics
.
Falcon resources
Building Very Fast App Backends with Falcon Web Framework on PyPy
provides a walkthrough of a web API in Falcon that runs with PyPy and
Nginx
.
Asynchronous Tasks with Falcon and Celery
shows how to configure
Celery
with the framework.
The
official Falcon tutorial
has a meaty guide for building and deploying your first Falcon web
application.
Building Scalable RESTful APIs with Falcon and PyPy
shows a to-do list example with Falcon running on PyPy.
What web development topic do you want to learn next?
I've built a Python web app, now how do I deploy it?
I want to learn about the Flask web framework.
How can I version and store my source code?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Falcon
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Morepath - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Morepath
Morepath
is a micro web
framework with a model-driven approach to creating web applications and web
APIs.
Morepath's framework philosophy is that the data models should drive the
creation via the web framework. By default the framework routes URLs directly
to model code, unlike for example Django which requires explicit URL routing
by the developer.
Why is Morepath an interesting web framework?
Simple
CRUD web applications and APIs
can be tedious to build when they are driven straight from data models without
much logic between the model and the view. Learn more about how Morepath
compares with other web frameworks
from the creator.
With the rise of front end JavaScript frameworks, many Python web frameworks
are first being used to build
RESTful APIs
that return JSON
instead rendering HTML via a templating system. Morepath appears to have
been created with the RESTful API model approach in mind and cuts out the
assumption that templates will drive the user interface.
Morepath is an implementation of the
web frameworks
concept. Learn how these parts fit together in the
web development
chapter or view
all topics
.
Morepath resources
Morepath, with
its first commit using the Morepath name in 2013
,
is a much newer web framework than Django, Flask or Pyramid, which results
in fewer tutorials. There is also a lot of opportunity for newer Python
developers to fill the gaps with their own Morepath tutorials. However,
these resources below are a good place to get started.
On the Morepath
is a blog post by Startifact on how they use Morepath and some of the
features of the framework.
Build a better batching UI with Morepath and Jinja2
is an introductory post on building a simple web application with the
framework. The code for the application is also
open source and available on GitHub
.
podcast.__init__ interviewed Martijn Faassen
about Morepath and he described what makes the framework different from
other existing web frameworks as well as why someone should be convinced
to switch for a new project.
Morepath's creator gave a
great talk on the motivation and structure for the new framework
at EuroPython 2014.
Is Morepath Fast Yet?
includes some benchmarks and discusses performance implications of using a
Python-based
web framework
for your web application.
The
Morepath-cookiecutter
project handles project creation templates using
Cookiecutter
and
recommended file structure from the Morepath documentation.
Do you want to learn more about frameworks or move on to deployment?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Morepath
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Sanic - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Sanic
Sanic
is a
Python web framework
built on
uvloop
and
designed for fast HTTP responses via asynchronous request handling.
What are the tradeoffs of using Sanic?
Sanic cannot be developed or deployed on Windows due to its
necessary
uvloop
dependency.
Sanic is an implementation of the
web framework
concept. Learn how these parts fit together in the
web development
chapter or view
all topics
.
There was
an excellent discussion on the /r/python subreddit
about using one of the newer async frameworks such as Sanic or Japronto
compared with a traditional
web framework
like
Django
. One of the major tradeoff of adopting a newer
framework is simply that the code library ecosystem has not, and may never,
grow up around that framework. You have to accept the risk that you will
need to build a significant amount of the plumbing yourself rather than
pip
installing existing, well-tested libraries.
Sanic tutorials
Sanic is under very active development and is still in its infancy as a
web framework. The following tutorials will get you started but there is
a chance you will have to work through errors as Sanic is regularly updated.
Getting started with Sanic: the asynchronous, uvloop based web framework for Python 3.5+
is a "Hello, World!" style post for the framework and also shows how
to respond to SMS text messages using
Twilio
.
Fixing bugs and handling 186k requests/second using Python
is a fun benchmarking exercise that a developer ran when testing out
Sanic on a Digital Ocean droplet.
Exploring Asyncio - uvloop, sanic and motor
explains why asyncio is important to the Python community and how
uvloop & sanic fit into the bigger picture.
Python Sanic Tutorial
is a
video tutorial on how to write your first Sanic web apps.
A Guide to Instrumenting Sanic Applications, Part 1
shows how to add Prometheus-based monitoring to Sanic applications.
Sanic open source projects and examples
There are not many example applications and extensions for Sanic
compared to
Flask
,
Django
or
other web frameworks
because Sanic is
still so new. However, there are some initial projects that are
useful for figuring out how to build your first applications with
this framework.
Gutenberg-HTTP
is a
web application and API built with Sanic. It's a solid clean example
of how to build a decent-sized project with Sanic. There is even
a demo that was deployed to Azure
to show how it works.
Practical Log Viewers with Sanic and Elasticsearch - Designing CI/CD Systems
shows how to build a log viewer using Sanic that collects
data from various Docker containers being created through
a build system.
Sanic comes with
a slew of examples
in the official repository.
Sanic starter
bundles Sanic with
SQLAlchemy
and Alembic
(for data migrations) as a starter project.
Sanic-limiter
is an extension
for rate-limiting the number of requests from a single user on Sanic
APIs
.
Sanic-GraphQL
adds
GraphQL support to a Sanic web application.
Sanic OpenAPI
provides
a user interface for Sanic APIs.
This
Sanic & Nginx & docker-compose example
has boilerplate code for setting up a Sanic project using
Docker
and
Nginx
.
Sanic JWT
(
source code
) adds support for
authentication via
JSON Web Tokens (JWT)
.
More on web frameworks or move to deployment?
I want to learn how to code a Python web application using a framework.
What is the Django web framework?
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Sanic
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Other Web Frameworks - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Other Web Frameworks
Python has a significant number of newer and less frequently-used
web frameworks
that are still worth your time to
investigate. The list on this page does not include the following web
frameworks that have their own dedicated pages:
Django
Flask
Pyramid
TurboGears
Bottle
Falcon
Morepath
Sanic
web.py
web.py
is a Python web framework designed for simplicity
in building web applications.
See this Reddit discussion on
reasons why to not use web.py
for some insight into the state of the project.
web2py
Web2py
is a batteries-included philosophy framework
with project structure based on model-view-controller patterns.
CherryPy
CherryPy
is billed as a minimalist web framework,
from the perspective of the amount of code needed to write a web application
using the framework. The project has a
long history
and made a major transition between the second and third release.
Muffin
Muffin
is a web framework
built on top of the
asyncio
module in the Python 3.4+ standard library. Muffin takes inspiration from
Flask with URL routes defined as decorators upon view functions. The
Peewee ORM
is used instead of
the more common SQLAlchemy ORM.
Ray
Ray
is a framework for building RESTful APIs, similar to
Falcon
.
The
introductory post
provides some initial code to get started with creating endpoints, adding
authentication and protecting against malicious clients.
Vibora
Vibora
is an asynchronous model framework similar to
Sanic
that was inspired by
Flask
's syntax.
However, the framework's author rewrote many parts like the template engine
to maximize performance.
Pecan
Pecan
is inspired by
CherryPy and
TurboGears
. It purely focuses on HTTP
requests and responses via Python objects and does not integrate session
handling or
database
access.
Masonite
Masonite
is a modern, developer
centric, batteries-included Python web framework. It uses the MVC
(Model-View-Controller) architecture pattern and comes with a lot of
functionality out of the box with an extremely extendable architecture.
Check out the following resources to lean more:
5 reasons why people are choosing Masonite over Django
MasoniteCasts
Dockerizing Masonite with Postgres, Gunicorn, and Nginx
Other web framework resources
This
roundup of 14 minimal Python frameworks
contains both familiar and less known Python libraries.
The
web micro-framework battle
presentation goes over Bottle, Flask, and many other lesser known Python
web frameworks.
A Python newcomer asked the Python Subreddit to
explain the differences between numerous Python web frameworks
and received some interesting responses from other users.
Other frameworks learning checklist
Read through the web frameworks listed above and check out their project
websites.
It's useful to know what other web frameworks exist besides Django and
Flask. However, when you're just starting to learn to program there are
significantly more tutorials and resources for
Django
and
Flask
on the web. My recommendation is to start with one of
those two frameworks then expand your knowledge from there.
What do you need to learn next?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
What is the Django web framework?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Other Web Frameworks
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Jinja2 - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Jinja2
Jinja, also commonly referred to as
"
Jinja2
" to specify the newest
release version, is a Python
template engine
used to create HTML, XML or other markup formats that are returned to the
user via an HTTP response.
Why is Jinja2 useful?
Jinja2 is useful because it has consistent template tag syntax and the
project is cleanly extracted as
an independent open source project
so
it can be used as a dependency by other code libraries.
Jinja2 is an implementation of the
template engines
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
Jinja2 strikes a thoughtful balance on the template engine spectrum where
on one end you can embed arbitrary code in the templates and the other
end a developer can code whatever she wants.
Jinja2 origin and development
The first recorded public released of Jinja2 was in
2008 with 2.0rc1. Since then the engine has seen numerous updates and
remains under active development.
Jinja2 engine certainly wasn't the first template engine. In fact, Jinja2's
syntax is inspired by Django's built-in template engine, which was released
several years earlier. There were many template systems, such as
JavaServer Pages (JSPs)
,
that originated almost a decade before Jinja2. Jinja2 built upon the concepts
of other template engines and today is widely used by the Python community.
What projects depend on Jinja2?
Jinja2 is a commonly-used templating engine for
web frameworks
such as
Flask
,
Bottle
,
Morepath
and, as of its 1.8 update,
optionally
Django
as well. Jinja2 is also used as a template
language by
configuration management
tool
Ansible and the
static site generator
Pelican,
among many other similar tools.
The idea is that if a developer already knows Jinja2 from working with one
project then the exact same syntax and style can be used in another project
that requires templating. The re-use reduces the learning curve and saves the
open source project author from having to reinvent a new templating style.
Jinja2 resources
Real Python has a nice
Jinja2 primer
with many code examples to show how to use the template engine.
The
second part of the Flask mega tutorial
is all about Jinja2 templates. It walks through control flow, template inheritance
and other standard features of the engine.
Upgrading to Jinja2 Templates in Django 1.8 With Admin
shows how to fix an issue that can occur with Django 1.8 and using Jinja2 as
the template engine.
The official
Jinja2 templates documentation
is exceptionally useful both as a reference as well as a full read-through
to understand how to properly work with template tags.
When you want to use Jinja2 outside of a
web framework
or
other existing tool, here's a
handy quick load function snippet
so the template engine can be easily used from a script or the REPL.
When working with Jinja2 in combination with LaTeX, some of Jinja2's blocks
can conflict with LaTeX commands. Check out this post on
LaTeX templates with Python and Jinja2 to generate PDFs
to resolve those issues.
When you use Jinja2 for long enough, eventually you'll want to escape
large blocks of Jinja2-like text in your templates. To do so, you'll
need the
"raw" template tag
.
Python Templating Performance Showdown: Django vs Jinja
puts together some benchmarks for how
Django templates
compare with Jinja templates.
The usual benchmarking caveats apply here but there are some interesting
tests that examine how the template engines handle large numbers of
variables and other factors.
Universal Jinja
presents a high-level overview of what you could do using the Jinja-like
Nunchuks library
to perform
server-side template rendering for Django applications.
Learn more about template engines or move to a new topic?
What are template engines and why are they useful?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Jinja2
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Mako - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Mako
Mako is a
template engine built in Python
that is
used to generate output HTML, XML and similar formats.
Mako is an implementation of the
template engines
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
Mako resources
Exploring Mako
explains a bit about the template engines Myghty and Mason, which influenced
Mako's design. The post then shows a few basic examples for how to use Mako.
Configuration Templates with Python and Mako
shows some basic situations for how to use Mako in an example project.
Flask-Mako
is a
Flask
extension that makes it easier to use Mako as the template engine in your
Flask web app projects.
The Stack Overflow question on
What is the fastest template system for Python?
provides some basic benchmarks comparing Mako, Jinja and other template
engines. Any benchmark should be taken as a data point rather than a
rule on which engine is actually the fastest in real world scenarios.
In addition, if you are using Mako or any other template engine as part
of a static website generator then it will not really matter which one
is the fastest because the output is created before the website is
deployed rather than during the
web server
's
HTTP request-response cycle.
Learn more about template engines or another topic?
What are template engines and why are they useful?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Mako
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Django Templates - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Django Templates
The
Django web framework
contains its own
template engine
for generating HTML, XML and other
output formats.
What's the difference between a "project template" and Django templates?
A project template contains the files and code to start a new web application.
For example, when you run
django-admin.py startproject abc
, the Django
admin script creates a new
abc
directory along with several Python
configuration so the web app can be run by a
WSGI server
.
Django templates are different from a project template because they live
within a project and are written by the developer to generate output, most
commonly HTML.
Django templates are an implementation of the
template engines
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
Django template resources
Make ALL Your Django Forms Better
presents some tricks for customizing Django templates to handle
the widgets on your site.
Python Templating Performance Showdown: Django vs Jinja
provides some benchmarks for how Django templates compare with
Jinja
templates. Note that as with any benchmarks
these only provide a few data points that can be useful rather than
a definitive statement that one tool is always faster than the other.
Reconciling Backend Templates with Frontend Components
explains how to use React components with the traditional
server-side Django templates despite some mismatch in how
each tool approaches the end goal of rendering a webpage.
When and how to use Django TemplateView
is not specifically about using the Django template engine, but instead
how to use the
TemplateView
in your views which lead directly into
rendering a template.
Learn more about template engines or another topic?
What is the Django web framework?
What are template engines and why are they useful?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Django Templates
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Hypertext Markup Language (HTML) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Hypertext Markup Language (HTML)
Hypertext Markup Language (HTML) is the standard markup language that is
downloaded from a
web server
to a web browser
and is used to display website and web application content.
HTML resources
Mozilla's
HTML page
and
introduction to HTML
break down HTML by elements, metadata and forms before diving
into more advanced web development topics.
A few HTML tips
is written for beginners who are learning HTML. The article gives guidance
on common mistakes to avoid and what to do instead to write proper HTML.
CodeAcademy's
HTML basics
course provides an interactive environment for learning the
gist of the markup language.
A list of everything that
could
go in the head of your document
provides a comprehensive reference for elements that are required
or optional in the
<head>
element of your webpage.
(Why) Some HTML is "optional"
gives historical context for the
<p>
paragraph element as an example
to explain how HTML was originally designed. The backwards-compatibility
remains because there is not enough optimization juice to squeeze from
changing the implementation compared to the backwards-breaking changes
in rendering existing sites.
A Complete Guide to Links and Buttons
extensively covers what might be thought of as a simple topic: the
a
and
button
elements in HTML, along with their many attributes
and quirks.
HTML: the inaccessible parts
explains how even basic HTML elements can cause accessibility issues
for screen readers and other devices that help people with impairments
to use the web.
What's next to learn after HTML?
How do I improve an app's user interface?
How should I host and serve static content files?
How do I use JavaScript with my Python web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» HTML
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Cascading Style Sheets (CSS) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Cascading Style Sheets (CSS)
Cascading Style Sheet (CSS) files contain rules for how to display and
lay out the HTML content when it is rendered by a web browser.
Why is CSS necessary?
CSS separates the content contained in HTML files from how the content
should be displayed. It is important to separate the content from the rules
for how it should be rendered primarily because it is easier to reuse those
rules across many pages. CSS files are also much easier to maintain on large
projects than styles embedded within the HTML files.
How is CSS retrieved from a web server?
The HTML file sent by the web server contains a reference to the CSS file(s)
needed to render the content. The web browser requests the CSS file after the
HTML file as shown below in a screenshot captured of the Chrome Web Developer
Tools network traffic.
That request for the fsp.css file is made because the HTML file for Full
Stack Python contains a reference to
theme/css/fsp.css
which is shown
in the view source screenshot below.
CSS preprocessors
A CSS preprocessor compiles a processed language into plain CSS code. CSS
preprocessing languages add syntax such as variables, mixins and functions
to reduce code duplication. The additional syntax also makes it possible for
designers to use these basic programming constructs to write maintainable
front end code.
Sass
is currently the favored preprocessor in
the design community. Sass is considered the most powerful CSS preprocessor
in terms of advanced language features.
LESS
is right up there with Sass and has an ace up
its sleeve in that the
Bootstrap Framework
is
written in LESS which brings up its popularity.
Stylus
is often cited as the third
most popular CSS preprocessing language.
CSS preprocessor resources
The Advanced Guide to HTML and CSS book has a well-written chapter on
preprocessors
.
Sass vs LESS
provides a short answer
on which framework to use then a longer more detailed response for those
interested in understanding the details.
How to choose the right CSS preprocessor
has a comparison of Sass, LESS and Stylus.
Musings on CSS preprocessors
contains helpful advice ranging from how to work with preprocessors in a
team environment to what apps you can use to aid your workflow.
CSS libraries and frameworks
CSS frameworks provide structure and a boilerplate base for building a
web application's design.
Bootstrap
Foundation
Gumby
Compass
Profound Grid
Skeleton
HTML5 Boilerplate
Spectre
CSS resources
The languages which were almost CSS
contains the history of what might have been if other styling
proposals were adopted instead of CSS, such as RRP, PWP, FOSI, DSSSL,
PSL96 and CHSS. Many of those proposals came before CSS was first published
as a specification in 1996 so the article is a wonderful view into the
Web in its infancy.
Frontend Development Bookmarks
is one of the largest collections of valuable resources for frontend
learning both in CSS as well as JavaScript.
This series on how CSS works including
How CSS works: Parsing & painting CSS in the critical rendering path
and
How CSS works: Understanding the cascade
examines the rendering methods browsers use to display web pages along
with details of the algorithms they use to cascade style rules.
CSS Reference
provides much-needed visual
examples for every CSS property to show you what they are actually going
to look like on your pagee when you use them.
CSS coding techniques
provides advice on how to write simpler, easier-to-maintain CSS code
to reduce your need to rely on CSS preprocessors and build pipelines.
How to Detect Unused CSS or JavaScript
explains how to use
Chrome DevTools
to analyze a page's CSS and identify parts that are not used. Note that
even though a specific page does not use that CSS (or JS), there might
be another page that uses the same CSS files and
does
use that "unused"
code, so test your pages before and after making the changes to ensure
you did not inadvertently break something else!
CSS refresher notes
is
incredibly helpful if you've learned CSS in bits and pieces along the way
and you now want to fill in the gaps in your knowledge.
Mozilla Developer Network's CSS page
contains an extensive set of resources, tutorials and demos for learning
CSS.
CSS Positioning 101
is a detailed guide for learning how to do element positioning correctly
with CSS.
Did CSS get more complicated since the late nineties?
is a solid look back at how CSS evolved and where it has ended up today
compared to its origins.
Using feature queries in CSS
covers the
@supports
rule and how to use it in your stylesheets.
Learn CSS layout
is a simple guide that
breaks CSS layout topics into chapters so you can learn each part one
at a time.
How well do you know CSS display?
zooms into a single CSS property,
display
, to teach the reader about it
in-depth.
Google's Web Fundamentals class
shows how to create responsive designs and performant websites.
Can I Use...
is a compatibility table that shows
which versions of browsers implement specific CSS features.
How do you remove unused CSS from a site?
covers tools for identifying unnecessary CSS and the process for eliminating
rules that are overwritten by other rules and therefore do not need to
be sent to the client.
The
Web Design Museum
is an amazing
look back at how web design has evolved over the past 25+ years. Some of
the designs can still be seen in their current site's presentation such
as the top navigation of Apple's 2001 site.
The invisible parts of CSS
asks the question "can you describe what the
display:block
property
and value do? Most developers would have some sense of what it is for
but could not explain it to someone else beyond that. The article helps
fix this situation with
display
as well as other less visible properties
such as floats and
auto
width.
A brief history of CSS until 2016
explains how CSS originated at CERN in 1994 as a solution to the
problem of HTML not having reasonable styling features
(in-line
style
attributes on elements don't count).
Old CSS, New CSS
tells
the wonderful and painful story of web design in the early days of the
Web, when inline styling was required, HTML CAPS were mandatory, and
most websites wished they had design styles like the amazing
Space Jam
pages. Oh also, lots and lots of
talk about tables, because that was the only way to position anything
back in the day.
Improving Your CSS with Parker
shows how to use the static CSS analysis tool
Parker
to improve your stylesheets.
CSS and network performance
analyzes how splitting your CSS can affect browser render times and how
you can improve your site loading performance by changing how you
structure your CSS files. My recommendation: there's a lot you can do
with these techniques but it is probably a better idea to make your CSS
simpler and cut down the massive bloat that can accumulate as you build
your site as a first step to improving your performance.
A Guide To CSS Support In Browsers
analyzes features versus bugs in different browser versions and how
to test for support so that issues are less likely to hit your web app.
That Time I Tried Browsing the Web Without CSS
is an enlightening look at how crucial CSS is to the modern web. You can
view examples of what it is like to use Amazon, DuckDuckGo, GitHub
and several other sites.
Third party CSS is not safe
is a good reminder that any code you did not write yourself, especially
code served through 3rd party sources not under your control can contain
potentially malicious applications, such as the experimental CSS keylogger
hack that made the rounds in early 2018.
Understanding specificity in CSS
provides some wonderful detail on the various ways to select elements
via CSS selectors, including type selectors, pseudo-elements, class
selectors, attribute selectors and ID selectors.
Realistic Water Effect without JavaScript - HTML/CSS Only
is one of the coolest tutorials I have seen that uses CSS to create
a water effect over an image. This video provides an example of how
there are so many incredible ways to use CSS and web development
technologies.
CSS learning checklist
Create a simple HTML file with basic elements in it. Use the
python -m SimpleHTTPServer
command to serve it up. Create a
<style></style>
element within the
<head>
section in the HTML
markup. Play with CSS within that style element to change the look and
feel of the page.
Check out front end frameworks such as Bootstrap and Foundation and integrate
one of those into the HTML page.
Work through the framework's grid system, styling options and customization
so you get comfortable with how to use the framework.
Apply the framework to your web application and tweak the design until you
have something that looks much better than generic HTML.
Once your app is styled what do you need to learn next?
How do I improve an app's user interface?
How should I host and serve static content files?
How do I use JavaScript with my Python web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Cascading Style Sheets (CSS)
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Responsive Design - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Responsive Design
Responsive design is a method of using media queries in
Cascading Style Sheets (CSS)
to ensure a
site is usable on various devices with different screen sizes, from very
small to very large.
Full Stack Python uses responsive design to improve readability across
a broad range of devices that people use to read this site.
Responsive design resources
The
Responsive Design podcast
and accompanying
email newsletter
interview web designers who've dealt with creating responsive designs
from both a blank slate and retrofitting into an existing site.
This
site is entirely on responsive design
and has many articles on how to achieve readability across devices.
Using Media Queries For Responsive Design In 2018
contains a bunch of great examples for how to use media queries to
achieve a responsive design.
Making Tables Responsive With Minimal CSS
steps through a couple of ways to responsively handle tables.
Smashing Magazine's article from 2011 on
responsive design - what it is and how to use it
remains a definitive source for understanding why sites should be
responsive.
Fundamentals of responsive images
shows the code behind several ways to make your web images resize according
to browser window size.
ResponsiveViewer
is a Chrome plugin in that allows you to view multiple sizes and devices in the
same browser window. This is a handy tool to avoid constantly flipping between
tabs or resizing the same tab to see the changes you are making to a design.
What topic do you want to learn next?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
How do I improve an app's user interface?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Responsive Design
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Minification - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Minification
Minification is the process of reducing the size of
static content assets
that need to be transferred
from a
web server
to the web browser client. The goal
of minification is to make webpages and web applications load faster,
without changing how the assets are ultimately used after being downloaded
.
Cascading Style Sheet (CSS) files
,
JavaScript
and even HTML can be minified. The techniques
to minify an HTML file differ from a CSS file because the file's contents
and syntax are different.
CSS Minification example
Let's say your web application has a CSS file with the following four lines
to add some padding around every element with the
pad-me
class:
.pad-me
{
padding-top
: 10
px
;
padding-right:
5
px;
padding-left:
5
px;
padding-bottom:
10
px; }
That example has 122 characters. A CSS minifier would take the above four
lines and convert them to the following single line:
.pad-me
{
padding
:10
px
5
px
5
px
10
px
}
The result would have only a single line with 35 characters, that's 87 less
characters that would need to be sent from the web server to the web browser!
The minification process reduced the single CSS class by 71% but kept the exact
same result when the web browser applies
pad-me
to all elements with that
class.
The file size savings can be a major benefit when applied across hundreds or
thousands of lines in a typical CSS file. When you also multiply that savings
across every client that downloads the CSS from your web server or CDN it becomes
clear that minification is a powerful way to improve the efficiency of your
production web application.
CSS minification resources
CSS minifier
is an online form to copy and paste
CSS then retrieve the minified results on the same page.
JavaScript minification resources
JavaScript minifier
is similar to the
above CSS minifier but works with JavaScript syntax.
What do you want to learn about next?
How do I improve an app's user interface?
How should I host and serve static content files?
How do I use JavaScript with my Python web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Minification
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Bootstrap - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Bootstrap
Bootstrap
is a CSS framework that makes it
easier to create website and web application user interfaces. Bootstrap
is especially useful as a base layer of
CSS
to build sites with
responsive web design
.
Should I use Bootstrap 3 or 4?
Bootstrap 3
was out for almost five
years before
Bootstrap 4
was
finally released at the start of 2018. When learning Bootstrap you will
likely come across many tutorials that cover Bootstrap 3 but not version 4.
If you are completely new to Bootstrap and CSS frameworks in general then
I recommend learning Bootstrap 4. If you have already been working with
Bootstrap 3 then there is no major rush to upgrade to the latest version.
Bootstrap 4 is more complicated than version 3 because it has a lot more
features so the learning curve is a bit steeper.
Full Stack Python
is actually built
with an early version of Bootstrap 3. However, this site is so heavily
customized with my own CSS that I likely will never upgrade to Bootstrap 4
because there are no new features that I feel will be useful in my
specific situation.
Bootstrap resources
Getting Started with Bootstrap
provides a walkthrough of a sample starter template so you can understand
the
CSS
classes that Bootstrap uses. There
is also a follow up post that shows how to
create an effective sales page with Bootstrap 3
.
What is Bootstrap and how do I use it?
is an awesome tutorial that goes through many of the main Bootstrap
elements such as icons, navigation bars and "jumbotron"-style webpages.
Bootstrap 5 tutorial
covers
the alpha version of the fifth major revision for Bootstrap.
Bootstrap 4: What's New?
shows a slew of comparisons for how user interface elements have changed
design over the past several Bootstrap major version iterations.
Tabler
is a free, open source admin
theme for Bootstrap 4. You can also check out a
demo of the theme
.
How to use Bootstrap 4 forms with Django
shows how to combine the popular
django-crispy-forms
library with
Django
to create and obtain user data
through web forms that are styled with Bootstrap 4 CSS.
React Bootstrap
(
source code
replaces
the existing Bootstrap JavaScript with React components that do not
rely on jQuery.
What else do you want to learn about web development?
How do I improve an app's user interface?
How should I host and serve static content files?
How do I use JavaScript with my Python web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Bootstrap
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Foundation - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Foundation
Foundation
is a
Cascading Style Sheet (CSS) framework
that makes it
easier to create website and web application user interfaces. Bootstrap
is especially useful as a base layer of
CSS
to build sites with
responsive web design
.
What else do you want to learn about web development?
How do I improve an app's user interface?
How should I host and serve static content files?
How do I use JavaScript with my Python web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Foundation
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

React - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
React
React
is a
JavaScript
web
application framework for building rich user interfaces that run in web
browsers.
React is an implementation of the
JavaScript frameworks
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Beginner React tutorials
Generally before you start working with React you will want to learn how
to build your Python backend with a
web framework
such as
Django
,
Flask
or
Pyramid
. Once you get comfortable with the
web development
basics with one of those frameworks
as well as
JavaScript
then it will be much easier to
tack on React to build your client-side user interfaces.
JavaScript fundamentals before learning React
provides a gut check that you have the prerequisite knowledge to avoid
getting impossibly stuck while trying to learn React.
The
official React tutorial
is one of the best ways to start using React because many other tutorials
quickly fall out of date while this one tends to stick to the basics
that are relevant to beginners.
9 things every React.js beginner should know
is not a tutorial but instead the author gives some strong opinions for
what beginners should know as they start learning React.
React Bootstrap
(
source code
replaces
the existing Bootstrap JavaScript with React components that do not
rely on jQuery.
Python+React tutorials
How to set up Django with React
presents one developer's opinionated way of combining a
Django
-powered back end with React on the front end,
including how to serve up static assets.
Django REST with React (Django 2.0 and a sprinkle of testing)
combines a
Django
plus
Django REST Framework (DRF)
backend
with React on the front end and shows how to stich it all together.
This Modern Django 4-part tutorial series is well-done, has
freely available source code
and includes:
Setting up Django and React
Redux and React Router setup
Creating an API and integrating with React
Adding authentication to React SPA using DRF
Build a Simple CRUD App with Python, Flask, and React
shows how to combine a
Flask
backend with React.
Learn React app
is a Git repository with a code tutorial and instructions for how to
follow along, as well as exercises to ensure you are tested as you go.
Other React resources
React interview questions
is a good quiz to see what you know or still need to learn about the
fundamentals of using React.
Under-the-hood-ReactJS
examines the React codebase itself rather than teaching you how to use it.
Do you need to style your app or deploy it?
My app runs but looks awful. How do I style the user interface?
I've built a Python web app, now how do I deploy it?
How should I host and serve static content files?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» React
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Vue.js - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Vue.js
Vue.js
(
source code
)
is a
JavaScript
web application framework for building
rich apps that run in web browsers.
Vue.js is an implementation of the
JavaScript frameworks
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Vue.js-related projects
flask-vue-spa
is an example
project with a
Flask
API on the backend and Vue on the front.
django-vue-template
contains
example code for a
Django
backend. There is also another
project named
django-vue-template
by
a different developer so take a peek at that one as well if the first one
does not suit your needs.
vuepress
(
source code
) is a
static site generator
that uses Vue and
Markdown
to create pre-rendered static HTML pages.
Vue.js resources
Building web apps with Vue and Django
covers architectural decisions such as whether to use one or
two servers and then explains how to go down the one server
route with a
Django
back end.
A friendly introduction to Vue.js
contains the code and brief explanations of what it's doing so you can
learn to create your first Vue app.
Developing a Single Page App with Flask and Vue.js
walks through all of the environment configuration, project setup and
coding you need to do to build a legitimate Vue.js application that
uses a
Flask
API on the backend.
Building a SaaS using Django and Vue.js
shows how to create a software-as-a-service application with a
Django
back end and Vue on the front end via a
series of videos that are each between 10-15 minutes in length.
Learn Vue by Building and Deploying a CRUD App
is an awesome course that walks through the Vue basics and building
a whole application and deploying it to
Netlify
.
The official
Vue.js getting started documentation
is fantastic and highly recommended as a top starting resource.
Replacing jQuery With Vue.js: No Build Step Necessary
explains why you may want to replace existing jQuery code with Vue and how
to do so with minimal steps, depending on the complexity of your applicationi
code, of course!
Why we chose Vue.js
covers GitLab's reasons for using this JavaScript framework over other
options.
The Vue.js publishes their own documentation page on how Vue
compares with other frameworks
.
It is refreshing to see a straightforward technical analysis without the
posturing that often comes from authors of one project discussing other work
in the same space.
Build a Crud application using Vue and Django
combines
Django
and
Django REST Framework
with Vue.js in
this tutorial that shows how to build a simple web app for managing
subscriptions.
Building Modern Applications with Django and Vue.js
combines
Django
,
Django REST Framework
, Vue.js
and
Auth0
(an authentication web
API
)
in an introductory web application.
Vue.js And SEO: How To Optimize Reactive Websites For Search Engines And Bots
shows how pre-rendering and various other attributes of JavaScript MVC
frameworks like Vue.js can negatively impact your SEO. It then walks
through the most important items to address to mitigate these problems
on your own Vue-based sites.
Exploring Data with Serverless and Vue: Automatically Update GitHub Files With Serverless Functions
combines a
serverless
backend with Vue.js on the
front.
What's next after learning Vue?
My app runs but looks awful. How do I style the user interface?
How should I host and serve static content files?
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Vue.js
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Angular - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Angular
Angular
is a
JavaScript
web
application framework for building rich apps that run in web browsers.
Angular is an implementation of the
JavaScript frameworks
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Angular resources
This
end to end web app with Django-Rest-Framework & AngularJS part 1
tutorial along with
part 2
,
part 3
and
part 4
creates an example blog application with Djangular. There is also a
corresponding
GitHub repo
for the project code.
Django-angular
is a code
library that aims to make it easier to pair Django with AngularJS on
the front end.
Developing a Real-Time Taxi App with Django Channels and Angular
this course teaches you how to build and test a real-time ride-sharing
app with Django Channels and Angular.
What's next after learning Angular?
My app runs but looks awful. How do I style the user interface?
I've built a Python web app, now how do I deploy it?
How should I host and serve static content files?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Angular
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Celery - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Celery
Celery
is a
task queue
implementation for
Python web applications
used
to asynchronously execute work outside the HTTP request-response cycle.
Celery is an implementation of the
task queue
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
Why is Celery useful?
Task queues
and the Celery implementation in particular
are one of the trickier parts of a Python web application stack to
understand.
If you are a junior developer it can be unclear why moving work
outside the HTTP request-response cycle is important. In short, you want your
WSGI server
to respond to incoming requests as quickly
as possible because each request ties up a worker process until the response
is finished. Moving work off those workers by spinning up asynchronous jobs
as tasks in a queue is a straightforward way to improve WSGI server response
times.
What's the difference between Celeryd and Celerybeat?
Celery can be used to run batch jobs in the background on a
regular schedule. A key concept in Celery is the difference between the
Celery daemon (celeryd), which executes tasks, Celerybeat, which is a
scheduler. Think of Celeryd as a tunnel-vision set of one or more workers
that handle whatever tasks you put in front of them. Each worker will
perform a task and when the task is completed will pick up the next one.
The cycle will repeat continously, only waiting idly when there are no more
tasks to put in front of them.
Celerybeat on the other hand is like a boss who keeps track of when tasks
should be executed. Your application can tell Celerybeat to execute a task
at time intervals, such as every 5 seconds or once a week. Celerybeat can
also be instructed to run tasks on a specific date or time, such as 5:03pm
every Sunday. When the interval or specific time is hit, Celerybeat will
hand the job over to Celeryd to execute on the next available worker.
Celery tutorials and advice
Celery is a powerful tool that can be difficult to wrap your mind around
at first. Be sure to read up on
task queue
concepts
then dive into these specific Celery tutorials.
A 4 Minute Intro to Celery
is
a short introductory task queue screencast.
This blog post series on
Celery's architecture
,
Celery in the wild: tips and tricks to run async tasks in the real world
and
dealing with resource-consuming tasks on Celery
provide great context for how Celery works and how to handle some of the
trickier bits to working with the task queue.
How to use Celery with RabbitMQ
is a detailed walkthrough for using these tools on an Ubuntu VPS.
Celery - Best Practices
explains things you should not do with Celery and shows some underused
features for making task queues easier to work with.
Celery Best Practices
is a different author's follow up to the above best practices post that
builds upon some of his own learnings from 3+ years using Celery.
Common Issues Using Celery (And Other Task Queues)
contains good advice about mistakes to avoid in your task configurations,
such as database transaction usage and retrying failed tasks.
Asynchronous Processing in Web Applications Part One
and
Part Two
are great reads for understanding the difference between a task queue and
why you shouldn't use your database as one.
My Experiences With A Long-Running Celery-Based Microprocess
gives some good tips and advice based on experience with Celery workers
that take a long time to complete their jobs.
Checklist to build great Celery async tasks
is a site specifically designed to give you a list of good practices to
follow as you design your task queue configuration and deploy to
development, staging and production environments.
Heroku wrote about how to
secure Celery
when tasks are otherwise sent over unencrypted networks.
Unit testing Celery tasks
explains three strategies for testing code within functions that Celery
executes. The post concludes that calling Celery tasks synchronously to test
them is the best strategy without any downsides. However, keep in mind that
any testing method that is not the same as how the function will execute
in a production environment can potentially lead to overlooked bugs. There
is also an
open source Git repository with all of the source code
from the post.
Rollbar monitoring of Celery in a Django app
explains how to use
Rollbar
to monitor tasks. Super
useful when workers invariably die for no apparent reason.
3 Gotchas for Working with Celery
are things to keep in mind when you're new to the Celery task queue
implementation.
Dask and Celery
compares Dask.distributed with Celery for Python projects. The post gives
code examples to show how to execute tasks with either task queue.
Python+Celery: Chaining jobs?
explains that Celery tasks should be dependent upon each other using
Celery chains, not direct dependencies between tasks.
Celery with web frameworks
Celery is typically used with a
web framework
such as
Django
,
Flask
or
Pyramid
.
These resources show you how to integrate the Celery task queue with the
web framework of your choice.
How to Use Celery and RabbitMQ with Django
is a great tutorial that shows how to both install and set up a basic
task with Django.
Miguel Grinberg wrote a nice post on using the
task queue Celery with Flask
.
He gives an overview of Celery followed by specific code to set up the task
queue and integrate it with Flask.
Setting up an asynchronous task queue for Django using Celery and Redis
is a straightforward tutorial for setting up the Celery task queue for
Django web applications using the Redis broker on the back end.
A Guide to Sending Scheduled Reports Via Email Using Django And Celery
shows you how to use
django-celery
in your application. Note however there are other ways of integrating
Celery with Django that do not require the django-celery dependency.
Flask asynchronous background tasks with Celery and Redis
combines Celery with
Redis
as the broker and
Flask
for the example application's framework.
Celery and Django and Docker: Oh My!
shows how to create Celery tasks for Django within a
Docker
container. It also provides some
Asynchronous Tasks With Django and Celery
shows how to integrate Celery with
Django
and create Periodic Tasks.
Getting Started Scheduling Tasks with Celery
is a detailed walkthrough for setting up Celery with Django (although
Celery can also be used without a problem with other frameworks).
Asynchronous Tasks with Falcon and Celery
configures Celery with the
Falcon
framework, which is
less commonly-used in web tutorials.
Custom Celery task states
is an advanced post on creating custom states, which is especially useful
for transient states in your application that are not covered by the
default Celery configuration.
Asynchronous Tasks with Django and Celery
looks at how to configure Celery to handle long-running tasks in a
Django app.
Celery deployment resources
Celery and its broker run separately from your web and WSGI servers so it
adds some additional complexity to your
deployments
. The
following resources walk you through how to handle deployments and get the
right configuration settings in place.
How to run celery as a daemon?
is a short post with the minimal code for running the Celery daemon and
Celerybeat as system services on Linux.
Do you want to learn more about task queues, or another topic?
How do I execute code outside the HTTP request-response cycle?
I've built a Python web app, now how do I deploy it?
What tools exist for monitoring a deployed web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Celery
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Redis Queue (RQ) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Redis Queue (RQ)
Redis Queue (RQ)
is a Python
task queue
implementation that uses Redis to keep
track of tasks in the queue that need to be executed.
RQ is an implementation of the
task queue
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
RQ resources
Asynchronous Tasks in Python with Redis Queue
is a quickstart-style tutorial that shows how to use RQ to fetch data
from the
Mars Rover web API
and process URLs for each of the photos taken by NASA's Mars rover.
There is also a follow-up post on
Scheduling Tasks in Python with Redis Queue and RQ Scheduler
that shows how to schedule tasks in advance, which is a common way of
working with
task queues
.
The
RQ intro post
contains
information on design decisions and how to use RQ in your projects.
Build a Ghostwriting App for Scary Halloween Stories with OpenAI's GPT-3 Engine and Task Queues in Python
is a fun tutorial that uses RQ with OpenAI's
GPT-3
API
randomly write original stories inspired by creepy Halloween tales.
International Space Station notifications with Python and Redis Queue (RQ)
shows how to combine the RQ task queue library with Flask to send
text message notifications every time a condition is met - in this blog
post's case that the ISS is currently flying over your location on
Earth.
Asynchronous Tasks with Flask and Redis Queue
looks at how to configure RQ to handle long-running tasks in a Flask app.
How We Spotted and Fixed a Performance Degradation in Our Python Code
is a quick story about how an engineering team moving from
Celery
to RQ fixed some deficiencies in their RQ performance as they started
to understand the difference between how the two tools execute workers.
Flask by Example - Implementing a Redis Task Queue
explains how to install and use RQ in a
Flask
application.
rq-dashboard
is an awesome
Flask
-based dashboard for viewing queues, workers and
other critical information when using RQ.
Sending Confirmation Emails with Flask, Redis Queue, and Amazon SES
shows how RQ fits into a real-world application that uses many
libraries and third party APIs.
Background Tasks in Python using Redis Queue
gives a code example for web scraping data from the Goodreads website.
Note that the first sentence in the post is not accurate: it's not the
Python language that is linear, but instead the way workers in
WSGI servers
handle a single request at a time by
blocking. Nevertheless, the example is a good one for understanding how
RQ can execute.
Do you want to learn more about task queues, or another topic?
How do I execute code outside the HTTP request-response cycle?
I've built a Python web app, now how do I deploy it?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Redis Queue (RQ)
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Dramatiq - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Dramatiq
Dramatiq
(
source code
)
is a Python-based
task queue
created as an alernative to the ubiquitous
Celery
project
Dramatiq supports RabbitMQ and Redis as message brokers.
Dramatiq is an implementation of the
task queues
concept. Learn more in the
web development
chapter or view the
table of contents
for all topics.
Dramatiq resources
django_dramatiq
is an
app for integrating Dramatiq with
Django
.
django_dramatiq_example
is a simple Django project demoing how you can combine Django and Dramatiq.
flask_dramatiq_example
is an example
Flask
app that shows how to use Dramatiq.
Do you want to learn more about task queues, or another topic?
How do I execute code outside the HTTP request-response cycle?
I've built a Python web app, now how do I deploy it?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Dramatiq
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Pelican - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Pelican
Pelican
is a
static site generator
implemented in Python
that combines
Jinja
templates
with content written in
Markdown
or reStructuredText to
produce websites.
Pelican's
source code is available on GitHub
under the
AGPL 3 license
.
Pelican is an implementation of the
static site generators
concept. Learn how the parts fit together in the
web development
chapter or view
all topics
.
Why is Pelican a useful tool?
Static websites are easier to
deploy
than full web
applications built with a
web framework
that rely
on a
persistent database backend
. In addition, static
sites are typically much faster to load because there are no database
queries or middleware code to execute during the HTTP request-response
cycle.
A web server that hosts a static website simply responds to inbound HTTP
requests with the file being requests - no dynamic data is populated on the
server during the response.
Pelican resources
Static site generators like Pelican are a simple compared to
web frameworks
so most tutorials focus on
creating simple sites that you can style yourself, as well as deploying
to hosting services such as Amazon S3 and GitHub Pages.
How to Create Your First Static Site with Pelican and Jinja2
walks through installing, generating the boilerplate and customizing
your first static site using Pelican.
How I built this website, using Pelican
walks through getting your first Pelican site generated and running.
A Pelican Tutorial to Build A Static, Python-Powered Blog with Search & Comments
provides a walkthrough for how to build a great combination of useful
features into your static site such as search and comments with the
Staticman
library. Bonus
points at the end for showing how to deploy to
Netlify
as an alternative to GitHub Pages
or S3.
Creating your own blog with Pelican
covers the decision-making process with building a static versus dynamic
website. The post then dives into using Pelican as a static site
generator with a blog structure and basic theme.
Using Pelican to generate and manage static websites
explains how to use the
pelican-quickstart
command to generate
an initial site then adds the Tipue Search plugin to provide content
search despite the static site limitations.
Pelican Folder Structure
explains how the
pages
and
posts
structure under
content
works when using Pelican.
Pelican's official Plugin creation documentation
gives a great starting point for building your own plugins that can
take in new input markup formats, modify the generator process and
add handy features such as a custom table of contents.
Getting started with Pelican and GitHub pages
is a tutorial I wrote to use the Full Stack Python source code to create
and deploy your first static site.
Moving blogs to Pelican
talks about one developer's transition from Jekyll to Pelican for his
own sites.
Using Travis & GitHub to deploy static sites
shows how to automate deployments of a Pelican-based static site using
Travis CI.
What else do you want to learn about Python web dev?
I've built a Python web app, now how do I deploy it?
I want to learn how to code a Python web application using a framework.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Pelican
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Lektor - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Lektor
Lektor
is a static website generator with
content management system (CMS) and
web framework
features for creating websites.
Lektor's
source code is available on GitHub
under the
BSD 3-clause license
.
How is Lektor different from other static site generators?
Most static site generators such as
Pelican
are built with
programmers as the primary user. Lektor tries to be more accessible to
non-programmers by providing an admin panel for creating and updating
site content similar to Django or Wordpress.
Lektor is an implementation of the
static site generators
concept. Learn how the parts fit together in the
web development
chapter or view
all topics
.
Lektor example projects
PyCon Colombia's 2018 site
was built with Lektor and is freely available on GitHub.
freedombox.org
is also
available for reference.
Lektor resources
Lektor is a young project and therefore has a nascent community compared with
Pelican
and Jekyll (the most popular Ruby-based static
site generator). However, the official documentation and initial quickstarts
for the project are wonderful so getting a basic site up and running is
painless.
Introducing Lektor
is the background story for what motivated
Armin Ronacher
to start hacking on his own
static site generator project after jumping around from Django to Wordpress
for hosting content. The post also includes details on the differences
in the project compared to other static site generators.
Hello, Lektor
is
a wonderful getting started and overview post. The post walks through the
files Lektor generates, the admin content management system and pulling
data into pages from the Meetup API.
The
official Lektor quickstart
contains the first commands to use to generate a new project scaffold.
There is also a getting started screencast that walks through installing
and initial steps for getting set up with the project.
Lektor Static CMS, put the fun back into Content Management
is a short overview as the first part in what aims to be a continuing
series on how to use Lektor as a content management system.
In
Experiences Migrating to Lektor
the author gives his impression of Lektor after moving his 400+ articles
over from a home-grown blogging engine. He talks a bit about how he went
from deploying on GitHub Pages to surge.sh and finally over to Netlify.
Automating deployment of Lektor blog sites
covers using OpenShift to deploy a static site. Seems like a lot of work
when
AWS S3
deployments are a lot easier but
OpenShift has its own ecosystem to keep you away from AWS world if that's
your thing.
Anything else to learn about static site generators?
What is a static website generator?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Lektor
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

MkDocs - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
MkDocs
MkDocs
is a Python-based static site generator
that combines Markdown content with
Jinja2 templates
to
produce websites. MkDocs can be pronounced "McDocs" or "M-K Docs",
although the core committers do not have a strong preference
one way or the other on the name's pronunciation.
MkDocs'
source code is available on GitHub
under the
BSD 2-clause license
.
What's great about MkDocs?
MkDocs uses a YAML configuration file and can optionally use themes to
easy change the look-and-feel of the documentation output.
In addition to the easy configuration via a YAML file and the drop-in
themes, MkDocs also has a wonderful search feature. Search is often not
possible out of the box in other static site generators. With MkDocs search
can easily be added without plugins or code changes to the static site
generator.
MkDocs is an implementation of the
static site generators
concept. Learn how the parts fit together in the
web development
chapter or view
all topics
.
MkDocs resources
The official
Getting Started with MkDocs
is likely the best place to go when you are just getting set up with your
first site that uses this project.
Mkdocs documentation
is a quick
tutorial to get MkDocs installed and modify the initial mkdocs.yml file.
MkDocs making strides
is a post from one of the project's core commiters on some changes that
greatly improved the project such as site regeneration during development
when a file is modified, search, the command-line client and packageable
theming.
What do you need to learn about static site generators?
What is a static website generator?
I want to learn how to code a Python web application using a framework.
I've built a Python web app, now how do I deploy it?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» MkDocs
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Unit Testing - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Unit Testing
Unit testing is a method of determining the correctness of a single function
isolated from a larger codebase. The idea is that if all the atomic units
of an application work as intended in isolation, then integrating them
together as intended is much easier.
Why is unit testing important?
Unit testing is just one form of
testing
that works in
combination with other testing approaches to wring out the bugs from a
piece of software being developed. When several functions and classes are
put together it's often difficult to determine the source of a problem if
several bugs are occurring at the same time. Unit testing helps eliminate
as many of the individual bugs as possible so when the application comes
together as a whole the separate parts work as correct as possible. Then
when issues arise they can often be tracked down as unintended consequences
of the disparate pieces not fitting together properly.
Unit testing tools
There are many tools for creating tests in Python. Some of these tools, such
as pytest, replace the built-in unittest framework. Other tools, such as
nose, are extensions that ease test case creation. Note that many of these
tools are also used for
integration testing
by writing the test cases to exercise multiple parts of code at once.
unittest
is the built-in standard library tool for testing Python code.
pytest
is a complete testing tool
that emphasizes backwards-compatibility and minimizing boilerplate code.
nose
is an extension to
unittest that makes it easier to create and execute test cases.
Hypothesis
is a
unit test-generation tool that assists developers in creating tests that
exercise edge cases in code blocks. The best way to get started using
Hypothesis is by going through the well-written
quickstart
.
mimesis
generates synthetic test
data which is useful to apply in your tests.
testify
was a testing framework
meant to replace the common unittest+nose combination. However, the team
behind testify is transitioning to pytest so it's recommended you do
not use testify for new projects.
Unit testing resources
Unit tests are useful in every project regardless of programming language.
The following resources provide a good overview of unit testing from
several viewpoints and follow up with additional depth in testing
Python-specific applications.
Introduction to Unit Testing
provides a broad introduction to unit testing, its importance and
how to get started in your projects.
Unit Testing Your Twilio App Using Pythonâs Flask and Nose
is a detailed tutorial for using the nose test runner for ensuring a
Flask application is working properly.
Unit testing with Python
provides a high-level overview of testing and has diagrams to demonstrate
what's going on in the testing cycle.
The Python wiki has a page with a list of
Python testing tools and extensions
.
An Extended Introduction to the nose Unit Testing Framework
shows how this test runner can be used to write basic test suites.
While the article is from 2006, it remains relevant today for learning
how to use nose with your projects.
Revisiting Unit Testing and Mocking in Python
is a wonderful post with many code examples showing how and
why to use dependency injection and
@property
to mock unit
tests.
Unit Testing Doesnât Affect Codebases the Way You Would Think
presents research on how unit testing impacts project code and
ways that it does not. It is only one research report but the findings
on more unit tests leading to higher Cyclomatic Complexity per method
are interesting. Perhaps more tests are needed to keep a project
running due to the increased complexity.
Python unittest with Robert Collins
is the transcript of an interview with Robert Collins who is a core
committer of
unittest
.
Precise Unit Tests with PyHamcrest
is a short tutorial on using the
PyHamcrest
assertion tool for
unit testing.
Why most unit testing is a waste
discusses how low risk unit tests rarely fail even as the code
changes and why they do not matter as much to a project's health as
many developers are led to believe based on the test-driven development
dogma.
Writing Unit Tests for Django Migrations
digs into code examples for testing Django data migrations.
The business case for unit testing
makes arguments for management should buy into unit testing,
including risk management and faster development timelines.
Unit testing often requires a bunch of fake data to use as inputs that
otherwise are generated by users or oother parts of a system not
under test. Fake data generation tools can help create data instead
of having too write it all yourself. This post on
generating fake data with Faker
shows how to use the Faker tool with various seeds and outputs into
your tests.
Unit Testing Applications that use Flask-Login and Flask-SocketIO
explains how to set up a
WebSockets
unit test
with a couple of common
Flask
libraries.
What else do you want to learn about testing?
What code metrics should I be aware of?
How do I go about testing my Python code?
Can I automate testing and deployments for my app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Unit Testing
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Integration Testing - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Integration Testing
Integration testing exercises two or more parts of an application at once,
including the interactions between the parts, to determine if they function
as intended. This type of
testing
identifies defects in
the interfaces between disparate parts of a codebase as they invoke
each other and pass data between themselves.
How is integration testing different from unit testing?
While
unit testing
is used to find bugs in individual
functions, integration testing tests the system as a whole. These two
approaches should be used together, instead of doing just one approach over
the other. When a system is comprehensively unit tested, it makes
integration testing far easier because many of the bugs in the individual
components will have already been found and fixed.
As a codebase scales up, both unit and integration testing allow
developers to quickly identify breaking changes in their code. Many times
these breaking changes are unintended and wouldn't be known about until
later in the development cycle, potentially when an end user discovers
the issue while using the software. Automated unit and integration tests
greatly increase the likelihood that bugs will be found as soon as possible
during development so they can be addressed immediately.
Integration testing resources
Integration testing with Context Managers
gives an example of a system that needs integration tests and shows how
context managers can be used to address the problem.
Integration testing, or how to sleep well at night
explains what integration tests are and gives an example. The example is
coded in Java but still relevant when you're learning about integration
testing.
What is an integration test exactly?
is an awesome Stack Exchange thread that defines the differences in
testing approaches like
unit tests
versus integration
and other tests. There is also some practical advice like "Itâs not
important what you call it, but what it does" which as a pragmatic
programmer I am keen to agree on.
Consistent Selenium Testing in Python
gives a spectacular code-driven walkthrough for setting up Selenium
along with SauceLabs for continuous browser-based testing.
Where do our flaky tests come from?
presents Google's data on where their integration tests fail and how
the tools you use can sometimes lead to higher incidents of failed
tests than other testing tools.
Unleash the test army
covers the author's first impressions of using Hypothesis for testing
the properties of a system under test.
What else do you want to learn about testing?
How do I create unit tests?
Can I automate testing and deployments for my app?
What code metrics should I be aware of?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Integration Testing
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Debugging - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Debugging
Developers often find themselves in situations where the code they've written
is not working quite right. When that happens, a developer debugs their code
by instrumenting, executing and inspecting the code to determine what state
of the application does not match the assumptions of how the code should
be correctly running.
Why is debugging important?
There are bugs in every modest sized or larger application. Every
developer has to learn how to debug code in order to write programs that
work as correctly as time and budget allow.
In addition to fixing bugs, debugging is an important skill for improving
the efficiency of an application by optimizing performance and improving
the logic. Debugging is a complex skill that takes time and practice
for a developer to gain as a capability.
What are some common debugging techniques?
Some common debugging techniques include:
Printing out or displaying values of variables and state
at certain times during the execution of an application
Changing the state of a program to make it do different
things. This is called altering the "path" of the program
Stepping through the execution of a program line by line
Breakpoints
Trace Points
Stopping the program at certain events
Viewing the output of a program in a debugger window
Debugging tools
There are many debugging tools, some of which are built into
IDEs
like
PyCharm
and others
that are standalone applications. The following list contains mostly
standalone tools that you can use in any
development environment
.
pdb
is a debugger built
into the Python standard library and is the one most developers come across
first when trying to debug their programs.
Web-PDB
provides a
web-based user interface for pdb to make it easier to understand what is
happening while inspecting your running code.
wdb
uses
WebSockets
to allow you to debug running Python code from a web browser.
Pyflame
(
source code
) is a profiling tool
that generates
flame graphs
for executing Python program code.
objgraph
(
source code
) uses
graphviz
to draw the connections between
Python objects running in an application
pdb tutorials
pdb is the most commonly-used debugger for Python because it is built
into the standard library. The following walkthroughs will show you how
to use pdb while fixing your own code.
How to Use Pdb to Debug Your Code
is a wonderful code-first tutorial on getting started with pdb.
pdb - Interactive Debugger
is featured on
the Python Module of the Week blog and has some great detail on using
the program effectively.
pdb: Using the Python debugger in Django
is a tutorial specific to working with pdb in
Django
projects.
Debugging your Python code
walks through a scenario where
pdb
can be used to find a defect in a block of Python code.
pdb Tutorial
is a code-heavy
beginners tutorial for pdb.
Debugging in Python
elaborates on what pdb does and how it can be used.
Python-specific debugging tutorials
The Python ecosystem has a range of tools to help with debugging your code.
These tutorials show you how to either use a tool other than pdb or provide
an overview of the debugging ecosystem for Python.
Python debugging tools
provides a list of tools such as pdb and its derivatives ipdb, pudb and
pdb++ along with how they can be used in the hunt for defects.
Profiling Python web applications with visual tools
details a configuration for visualizing code execution using
KCachegrind
.
My Startling Encounter With Python Debuggers
along with
the follow-up second post
are a fantastic couple of posts that walk through a specific scenario
of how a well-tested distributed web crawler failed and how tools like
gdb, top and Winpdb were used to debug a multithreaded application.
Debugging Python like a boss
covers several Python debuggers such as pudb, pydbgr and ipdb.
The case of the mysterious Python crash
explains the symptoms that happened during a crash and what steps
the author took to figure out what was going on.
General debugging resources
The following resources are not specific to Python development but
give solid programming language-agnostic debugging advice.
The art of debugging
provides a whirlwind overview for how to fix issues in your code.
Linux debugging tools you'll love
is an awesome comic that covers the Linux ecosystem for debugging.
What's next after testing your application?
What code metrics should I be aware of?
Can I automate testing and deployments for my app?
How do I create unit tests?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Debugging
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Code Metrics - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Code Metrics
Code metrics can be produced by static code analysis tools to determine
complexity and non-standard practices.
Why are code metrics important?
Code metrics allow developers to find problematic codebase areas that may
need refactoring. In addition, some metrics such as technical debt assist
developers in communicating to non-technical audiences why issues with a
system are occurring.
Open source code metrics projects
Radon
is a tool for
obtaining raw metrics on line counts, Cyclomatic Complexity, Halstead
metrics and maintainability metrics.
Pylint
contains checkers for PEP8 code
style compliance, design, exceptions and many other source code analysis
tools.
PyFlakes
parses source files for
errors and reports on them.
Pyntch
is a
static code analyzer that attempts to detect runtime errors. It does not
perform code style checking.
Prospector
inspects Python source
code files to give data on type and location of classes, methods and
other related source information.
Flake8
is a code format style
guideline enforcer. Its goal is not to gather metrics but ensure
a consistent style in all of your Python programs for maximum readability.
The rules for Flask8 are all defined in
this list
, which rolls up
the Flake8 dependencies of pycodestyle, pyflakes and McCabe.
Black
is a Python code formatter with
strong, uncompromising assumptions about how your code must be formatted.
dlint
is a linter for secure coding
practices.
pylintdb
puts pylint results into
a
SQLite
database for programmatic access and searching.
Ned Batchelder coded it and wrote about how he uses the program in this
bite-sized command line tools: pylintdb
post.
Flask8-eradicate
(
source code
) is a Flask8
plugin for identifying dead code.
Hosted code metrics services
The following tools are ready to use by going to the service, punching in
the URL to your site, letting them perform their analysis and then reading
the results.
Coveralls
shows code coverage from test suites
and other metrics to help developers improve the quality of their code.
webhint
, formerly
Sonarwhal
scans your website for accessibility, speed and security. There is both
an online version that you can point at an arbitrary URL as well as
a command-line version for running yourself.
Codecov
hooks into GitHub, BitBucket or GitLab
and reports code coverage on your code repositories.
Code metrics resources
Code metrics are really useful when you have a team working on a project
for awhile and want to keep the code quality from degrading. However, you
can easily go overboard instrumenting everything and overanalyzing the
results. The following resources will introduce code metrics topics to
you as well as give perspective when metrics are useful to the point of
diminishing returns.
How do Ruby & Python profilers work?
explains the difference between sampling and tracing profilers then
digs into how they work and their advantages and disadvantages.
Moving Fast With High Code Quality
provides Quora's code quality goals and how they handle code reviews
with their internal tools.
Lessons from Building Static Analysis Tools at Google
is a fantastic in-depth read that explains why workflow integration
and adapting to developer feedback are critical for static analysis
tools adoption in development environments.
Static Code Analizers for Python
is an older article but goes over the basics of what Python static code
analyzers do.
Getting Started with Pylint
goes over setting up Pylint, generating the .pylintrc file and what's
in the configuration.
Linting as Lightweight Defect Detection for Python
presents a straightforward code example of how linters can detect certain
classes of errors in code that especially in dynamically-typed languages
are not caught at compile time. The post then shows how to use Flake8 in
your own code reviews.
Static Analysis at Scale
explains how Instagram's extremely high-trafficked Python-powered site
is enabled by linting, codemods, and type-checking with
Pyre
.
This /r/Python
poll on what linters the community uses
provides some input on using PyCharm just for its linting features as
well as some other approaches.
Automatically PEP8 & Format Your Python Code
shows how to use the
autopep8
library, including an
Emacs
plugin that lints your code for PEP8 compliance as you work.
How to use Flask8
explains what Flask8 is, its usage and expected output.
Pylint false positives
is a walkthrough of issues that Pylint detects in an example project,
which ones cannot be fixed and the ones where the tool was incorrect.
The author concludes that with all of the false positives that were
found the signal to noise ratio was not useful enough to use the
tool on a typical project. However, on a brand new project without
many dependencies it might be helpful to keep your code in a pristine
state before the code base grows beyond the nosiness false positives
threshold.
What is Flake8 and why we should use it?
covers why using a linting tool like Flake8 can improve the quality of
your Python code and how to install and configure it for your
environment.
Which Python static analysis tools should I use?
covers Pylint, PyFlakes and mypy with a short description of the
advantages and disadvantage for each one.
This
Stack Overflow question on Python static code analysis tools
contains comparison discussions of PyLint, PyChecker and PyFlakes.
Consistent Python code with Black
covers how to use Black and add it as a pre-commit hook in Git to
ensure consistency in repository updates.
Format Python however you like with Black
is a super short introduction on what Black does to keep your code
formatting consistent.
Intro to Black â The Uncompromising Python Code Formatter
contains some introductory examples for using Black and shows how to
use it on your source files.
Python static analysis tools
is a quick overview of the features for Black, Pylint, Pyflakes, Mypy,
Bandit and Prospector.
What's next after obtaining code metrics?
I've built a Python web app, now how do I deploy it?
Can I automate testing and deployments for my app?
I want to learn more about app users via web analytics.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Code Metrics
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

HTTPS - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
HTTPS
The HTTP Secure (HTTPS) protocol encyrpts data between a web server and the
client web browser.
HTTPS tutorials
How To Secure Nginx with Let's Encrypt on Ubuntu 18.04
walks through how to configure your
Nginx
server with
HTTPS using a free
Let's Encrypt
domain
certificate.
Switching Your Site to HTTPS on a Shoestring Budget
shows the steps for moving a GitHub Pages-based site or any site that
can be behind Cloudflare's free tier to HTTPS.
Additional HTTPS resources
The 6-Step "Happy Path" to HTTPS
covers how to obtain a free SSL certificate, permanently redirect HTTP
to HTTPS and fix insecure references to non-HTTPS resources.
HTTPS on Stack Overflow: the end of a long road
is a wonderfully in-depth post on transitioning from HTTP to HTTPS,
including redirecting all HTTP requests to HTTPS, for a very high
trafficked website.
TLS stats from 1.6 billion connections to mozilla.org
provides real-world data for which ciphersuites to use based on
mozilla.org connections.
HTTPS in the real world
is both an accesible read and gives the nitty gritty details beyond how
the HTTPS handshake and transmission work, along the assumptions it breaks
down about where the most likely attack vectors really come from.
How Let's Encrypt Works
is a
primer on how the free and now widely-used certificate service grants
and revokes domain certificates.
Performing & Preventing SSL Stripping: A Plain-English Primer
explains the KRACK Attack for stealing data despite an HTTPS connection
and how your site needs to use HSTS to prevent the attack.
HTTPS adoption has reached the tipping point
shows data about the growth of HTTPS and how most sites now serve more
than half their traffic via secure connections.
Google's
HTTPS transparency report card
shows the growth of HTTPS connections across Google's properties.
There is a clear upward trend but even some of Google's properties still
are not 100% using HTTPS over unencrypted HTTP connections.
An overview of TLS 1.3
and
TLS 1.3 - enhanced performance, hardened security
cover the high-level information on the latest approved version of
Transport Security Layer (TLS) 1.3.
What's next in your web application?
What editor should I use to code my Python app?
What runs a Python application execute on the server?
How should Python libraries be installed on a server?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» HTTPS
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

WebSockets - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
WebSockets
A WebSocket is a
standard protocol
for two-way data transfer between a client and server. The WebSockets
protocol does not run over HTTP, instead it is a separate implementation
on top of
TCP
.
Why use WebSockets?
A WebSocket connection allows full-duplex communication between a client
and server so that either side can push data to the other through an
established connection. The reason why WebSockets, along with the related
technologies of
Server-sent Events
(SSE)
and
WebRTC data channels
,
are important is that HTTP is not meant for keeping open a connection for
the server to frequently push data to a web browser. Previously, most web
applications would implement long polling via frequent
Asynchronous JavaScript and XML (AJAX) requests as shown in the below diagram.
Server push is more efficient and scalable than long polling because the
web browser does not have to constantly ask for updates through a stream
of AJAX requests.
While the above diagram shows a server pushing data to the client, WebSockets
is a full-duplex connection so the client can also push data to the server
as shown in the diagram below.
The WebSockets approach for server- and client-pushed updates works well for
certain categories of web applications such as chat room, which is why that's
often an example application for a WebSocket library.
Implementing WebSockets
Both the web browser and the server must implement the WebSockets protocol
to establish and maintain the connection. There are important implications for
servers since WebSockets connections are long lived, unlike typical HTTP
connections.
A multi-threaded or multi-process based server cannot scale appropriately for
WebSockets because it is designed to open a connection, handle a request as
quickly as possible and then close the connection. An asynchronous server such
as
Tornado
or
Green Unicorn
monkey patched with
gevent
is necessary for any practical WebSockets
server-side implementation.
On the client side, it is not necessary to use a JavaScript library for
WebSockets. Web browsers that implement WebSockets will expose all necessary
client-side functionality through the
WebSockets object
.
However, a JavaScript wrapper library can make a developer's life easier by
implementing graceful degradation (often falling back to long-polling when
WebSockets are not supported) and by providing a wrapper around
browser-specific WebSocket quirks. Examples of JavaScript client libraries
and Python implementations are shown in a section below.
Nginx WebSocket proxying
Nginx officially supports WebSocket proxying as of
version 1.3
. However, you have
to configure the Upgrade and Connection headers to ensure requests are
passed through Nginx to your WSGI server. It can be tricky to set this up
the first time.
Here are the configuration settings I use in my Nginx file as part of my
WebSockets proxy.
#
this is where my WSGI server sits answering only on localhost
#
usually this is Gunicorn monkey patched with gevent
upstream app_server_wsgiapp {
server
localhost:5000 fail_timeout=0;
}

server {
#
typical
web
server
configuration
goes
here
#
this
section
is
specific
to
the
WebSockets
proxying
location
/socket.io
{
proxy_pass
http://app_server_wsgiapp/socket.io;
proxy_redirect
off
;
proxy_set_header
Host
$host
;
proxy_set_header
X-Real-IP
$remote_addr
;
proxy_set_header
X-Forwarded-For
$proxy_add_x_forwarded_for
;
proxy_http_version
1.1
;
proxy_set_header
Upgrade
$http_upgrade
;
proxy_set_header
Connection
"upgrade"
;
proxy_read_timeout
600
;
  }
}
Note if you run into any issues with the above example configuration
you'll want to scope out the
official HTTP proxy module documentation
.
The following resources are also helpful for setting up the configuration
properly.
Nginx has
an official page for WebSocket proxying
.
Proxying WebSockets with Nginx
shows how to proxy with Socket.io.
Python WebSockets implementations
The following projects either implement WebSockets in Python or provide
example code you can follow to use WebSockets in your own projects.
Autobahn
uses Twisted and asyncio to
create the server-side WebSockets component while
AutobahnJS
assists on the
client web browser side.
Django Channels
is built
on top of WebSockets and is easy to integrate with existing or new
Django
projects.
Flask-SocketIO
is
a
Flask
extension that relies upon eventlet or gevent to
create server-side WebSockets connections.
websocket-client
provides low level APIs for WebSockets and works with both
Python 2 and 3
.
Crossbar.io
builds upon Autobahn and includes a
separate server for handling the WebSockets connections if desired by
the web app developer.
JavaScript client libraries
JavaScript is used to create the client side of the WebSocket connection
because the client is typically a web browser. While you do not need one
of these client-side libraries to use WebSockets, they are useful for
minimizing the amount of boilerplate code to establish and handle your
connections.
Socket.io
's client side JavaScript library can be
used to connect to a server side WebSockets implementation.
web-socket-js
is a Flash-based
client-side WebSockets implementation.
AutobahnJS
assists on the
client web browser side.
Example code for WebSockets in Python
There are numerous Python-based implementations for WebSockets so sometimes
it's just easiest to examine an example so you can build something for your
own project.
The Flask-SocketIO project has a
chat web application
that demos sending server generated events as well as input from users
via a text box input on a form.
The
python-websockets-example
contains code to create a simple web application that provides WebSockets
using Flask, Flask-SocketIO and gevent.
Python-specific WebSockets resources
The
"
Async Python Web Apps with WebSockets & gevent
"
talk I gave at San Francisco Python in January 2015 is a live-coded example
Flask web app implementation that allows the audience to interact with
WebSockets as I built out the application.
Real-time in Python
provides Python-specific context for how the server push updates were
implemented in the past and how Python's tools have evolved to perform
server side updates.
websockets
is a WebSockets
implementation for Python 3.3+ written with the
asyncio
module.
Speeding up Websockets 60X
is a cool experiment in coding loops different ways to eek out more
performance from WebSockets connections. It is unclear how generalizable
the results in the blog post are to other programs but it is a good example
of how tweaking and tuning can produce outsized returns in some
applications.
Adding Real Time to Django Applications
shows how to use Django and Crossbar.io to implement a publish/subscribe
feature in the application.
Async with Bottle
shows how to
use greenlets to support WebSockets with the Bottle web framework.
If you're deploying to Heroku, there is a
specific WebSockets guide
for getting your Python application up and running.
The
Reddit thread for this page
has some interesting comments on what's missing from the above content that
I'm working to address.
Creating Websockets Chat with Python
shows code for a Twisted server that handles WebSockets connections
on the server side along with the JavaScript code for the client side.
Synchronize clients of a Flask application with WebSockets
is a quick tutorial showing how to use Flask, the Flask-SocketIO extension
and Socket.IO to update values between web browser clients when changes
occur.
General WebSockets resources
WebSockets have wide browser support and therefore many
web frameworks
across all major programming languages
have libraries to make creating WebSockets connections easier. The following
resources are general guides and tutorials that provide context for the
protocol without getting into the weeds of how to use WebSockets in
Python.
The official W3C
candidate draft for WebSockets API
and the
working draft for WebSockets
are
good reference material but can be tough for those new to the WebSockets
concepts. I recommend reading the working draft after looking through some
of the more beginner-friendly resources list below.
WebSockets 101
by
Armin Ronacher provides a detailed assessment of the subpar state of HTTP
proxying in regards to WebSockets. He also discusses the complexities of
the WebSockets protocol including the packet implementation.
The "Can I Use?" website has a
handy WebSockets reference chart
for which web browsers and specific versions support WebSockets.
WebSockets for fun and profit
has a nice concise overview of WebSockets alternatives like long polling
and Server-Sent Events (SSE) before it goes into a WebSockets example
that includes
JavaScript
code for the client-side
implementation.
Mozilla's
Developer Resources for WebSockets
is a good place to find documentation and tools for developing with
WebSockets.
WebSockets from Scratch
gives a nice overview of the protocol then shows how the lower-level pieces
work with WebSockets, which are often a black box to developers who only
use libraries like Socket.IO.
websocketd
is a WebSockets server aiming to be
the "CGI of WebSockets". Worth a look.
How WebSockets Work â With Socket.io Demo
walks through the HTTP-to-WebSocket upgrade handshake and explains a
bit about how WebSockets work. The provided code is NodeJS on the backend
but the SocketIO client side JavaScript is the same as you would implement
in a Python-backed web application.
Can WebSockets and HTTP/2 Co-exist?
compares and contrasts the two protocols and shows how they have
differences which will likely lead to WebSockets sticking around for
awhile longer.
A Brief Introduction to WebSockets and Socket.io by Saleh Hamadeh
is a video on WebSockets basics and using the
Socket.io
JavaScript library
to wrap WebSockets functionality in web browsers.
Benchmarking and Scaling WebSockets: Handling 60000 concurrent connections
is a detailed examination of how WebSockets connections can scale to tens
of thousands of users.
Writing WebSocket servers
gets into the nitty-gritty of how WebSockets work. Well worth reading to
get a deep understanding of WebSockets connections.
What's next for your web application?
What runs a Python application execute on the server?
How should Python libraries be installed on a server?
What editor should I use to code my Python app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» WebSockets
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

WebRTC - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
WebRTC
Web Real-Time Communications (WebRTC)
is a specification for a protocol implementation that enables web apps to
transmit video, audio and data streams between client (typically a web
browser) and server (usually a
web server
).
WebRTC tutorials
How to Get Started Learning WebRTC Development
explains what you do and do not need to know as prerequisites for
building with WebRTC along with some sources for learning.
This post titled
WebRTC: a working example
and the
companion open source repository
provides a simple working example of WebRTC technology, without any 3rd party
dependencies. It allows 2 web browsers to exchange audio and video streams by
using the
aiohttp
and
python-socketio
modules.
The
Introduction to WebRTC video series
(
part 2
and
part 3
) can be a bit dry
at points but overall has a ton of good information that gives a solid
overview of the technology.
WebRTC issues and how to debug them
explains the various ways that implementations can go wrong and where
to start looking when you run into errors.
Other WebRTC resources
A Study of WebRTC Security
gives a
great overview of WebRTC and the new security concerns it can bring as it
is integrated into more web applications.
How Discord Handles Two and Half Million Concurrent Voice Users using WebRTC
provides detailed insight into the what and why of the highly scalable
Discord
technical architecture that relies
upon WebRTC for communication. There are a bunch of great examples here
for why some of the service must be centralized (to prevent client IP
addresses from leaking to other clients) while others are decentralized
to assist with scaling the number of possible connections.
Architectures for a kickass WebRTC application
is a video of a technical talk that covers some of the tools and protocols
that can be used to create your WebRTC projects and why you would choose
one tool other another.
WebRTC connection times and the power of playing around with data
provides data on connection times and potential reasons for WebRTC
connection quality suffers in some cases.
A closer look into WebRTC
covers the Safari WebRTC implementation in WebKit and explains some of the
nuances for that specific web browser's implementation.
STUN/TURN servers are used to relay data to a non-public IP address in a
WebRTC application. This blog post on
Do you still need TURN if your media server has a public IP address?
answers some frequently asked questions about when a TURN server is
truly required.
An Intro to WebRTC and Accessing a Userâs Media Devices
goes into the JavaScript needed to use a computer's media devices such as
the microphone and video camera through the web browser's APIs.
AIORTC: An Asynchronous WebRTC Framework
is an interview with the developer of an async WebRTC framework that is
built upon asyncio.
What do you need to learn next for your web app?
What editor should I use to code my Python app?
What runs a Python application execute on the server?
How should Python libraries be installed on a server?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» WebRTC
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Microservices - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Microservices
Microservices are an application architecture style where independent,
self-contained programs with a single purpose each can communicate with
each other over a network. Typically, these microservices are able to be
deployed independently because they have strong separation of
responsibilities via a well-defined specification with significant
backwards compatibility to avoid sudden dependency breakage.
Why are microservices getting so much buzz?
Microservices follow in a long trend of software architecture patterns
that become all the rage. Previously,
CORBA
and (mostly XML-based) service-oriented architectures (SOA) were the
hip buzzword among ivory tower architects.
However, microservices have more substance because they are typically based
on
RESTful APIs
that are far
easier for actual software developers to use compared with the previous
complicated XML-based schemas thrown around by enterprise software companies.
In addition, successful applications begin with a monolith-first approach using
a single, shared application codebase and deployment. Only after the application
proves its usefulness is it then broken down into microservice components to
ease further development and deployment. This approach is called the
"monolith-first" or
"
MonolithFirst
" pattern.
Microservice resources
Martin Fowler's
microservices
article is one of the best in-depth explanations for what microservices are
and why to consider them as an architectural pattern.
Developing a RESTful microservice in Python
is a good story of how an aging Java project was replaced with a
microservice built with Python and Flask.
Microservices: The essential practices
first goes over what a monolith application looks like then dives into what
operations you need to support potential microservices. For example, you really
need to have continuous integration and deployment already set up. This is a
good high-level overview of the topics many developers aren't aware of when they
embark on converting a monolith to microservices.
Using Nginx to Load Balance Microservices
explains how an Nginx instance can use configuration values from etcd
updated by confd as the values are modified. This setup can be useful for
load balancing microservices as the backend services are brought up
and taken down.
How Microservices have changed and why they matter
is a high level overview of the topic with some quotes from
various developers around the industry.
The State of Microservices Today
provides some general trends and broad data showing the increasing
popularity of microservices heading into 2016. This is more of an
overview of the term than a tutorial but useful context for both
developers and non-developers.
bla bla microservices bla bla
is a transcript for a killer talk on microservices that breaks down the
important first principles of distributed systems, including asynchronous
communication, isolation, autonomicity, single responsibility,
exclusive state, and mobility. The slides along with the accompanying
text go into how reality gets messy and how to embrace the constraints
inherent in distributed systems.
In the
Microservices with Docker, Flask, and React
course bundle, you will learn how to quickly spin up a reproducible
development environment with Docker to manage a number of microservices.
Once the app is up and running locally, you'll learn how to deploy it to
an Amazon EC2 instance. Finally, we'll look at scaling the services on
Amazon EC2 Container Service (ECS).
Should I use microservices?
contains a high-level perspective on why or why not use microservices
as an architectural choice.
Zuul is open source proxy for combining multiple microservices into a
unified API call. Check out this post on
Using Netflix Zuul to Proxy your Microservices
to learn more and get started using it.
The Majestic Monolith
explains the advantages of a monolithic architecture and how it's worked
amazingly well for the Basecamp small development team.
Developing a RESTful micro service in Python
goes into detail on how one development team rebuilt an existing Java
application as a microservice in Python with
Flask
.
Documenting microservices
has some good thoughts on how to explain your microservice API to
other developers such as clearly showing all of the endpoints as well as
the intersection of multiple endpoints.
Best practices for building a microservice
is an exhaustive (and somewhat exhausting to read!) list with what you
should think about as you build your microservice.
The Hardest Part About Microservices: Your Data
presents a data-centric view on how to structure and transport data
in a microservices architecture.
Deleting data distributed throughout your microservices architecture
examines how Twitter handles issues with discoverability, access and erasure
in their microservices-heavy production environment.
What's next after learning about microservices?
I've built a Python web app, now how do I deploy it?
What is Docker and how does it fit with Python deployments?
How do I create an API for my web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Microservices
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Webhooks - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Webhooks
Webhooks are user-defined HTTP callbacks that allow interactions between
otherwise independent web applications.
Webhooks projects
Thorn
is a Python framework for
building webhooks and event-driven applications. There is also an
introduction post with more information on using Thorn
.
PyWebhooks
is a proof-of-concept library for
building webhooks-based services.
Webhook Tester
Webhook resources
Building Webhooks Into Your Application: Guidelines and Best Practices
is an extensive high-level guide that defines what webhooks are, why you
will want to build them if you need to proactively notify other applications
of events, and what security considerations you need to have when
creating them.
What's a webhook?
is a high-level
explanation of this concept that also contains some basic security
considerations when using them.
Webhooks for Beginners - Full Course
is an entire free video course that shows both how to use and implement
webhooks into applications.
Should you build a webhooks API?
Why Are Webhooks Better Than Serverless Extensibility?
Webhooks Provide an Efficient Alternative to API Polling
is a high-level overview of the advantages of webhooks over
alternatives such as constant polling for updates.
Webhooks: the devil in the details
How to use webhooks for recovering customers
What's next for your project after webhooks?
What are web application programming interfaces (APIs)?
Show me a list of the best Python learning resources.
How do I integrate existing web APIs into my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Webhooks
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Bots - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Bots
Bots are software programs that combine requests, which are typically
provided as text, with contextual data, such as geolocation and payment
information, to appropriately handle the request and respond. Bots are
often also called "chatbots", "assistants" or "agents."
Open source bot examples
Limbo
is an awesome Slack chatbot
that provides a base for Python code that otherwise would require
boilerplate to handle the Slack API events firehose.
python-rtmbot
is the bot
framework for building Slack bots with the Real Time Messaging (RTM) API
over
WebSockets
.
The
GitHub bots search results
and the
bots GitHub topic
contain tens of
thousands of example bots you take analyze to see how they are built.
Errbot
can work with
multiple backends
such
as Hipchat, Discord, Slack and Telegram. It's designed to be deployed
"as is" except for your credentials but the
Python source code
can also be customized.
Python-specific bot resources
How to Buid an SMS Slack Bot
is a tutorial on using
SMS text messages
to communicate with a Slack bot that can post and receive messages. The
bot is a good base for a more complicated Slack bot that could use
natural language processing or other more advanced parsing techniques.
Either Python 2 or 3 can be used
with the code which is also available on GitHub
.
Dropbox open sourced their security Slack bot
,
which is
built in Python
.
The bot converses with a user when backend systems detect strange behavior on
one of their accounts to check if there has been a security breach.
Making a Reddit + Facebook Messenger Bot
builds a bot for two platforms and shows how to deploy it to Heroku.
Build a Slack Bot that Mimics Your Colleagues with Python
is a humorous post that uses the
markovify
Markov Chains library to
generate responses that are similar to ones other Slack users have said.
A Slack bot with Python's asyncio
shows how to connect a bot to Slack via the web API using the Python 3
asyncio standard library
.
Facebook-Message-Bot
is an open source Facebook Messenger bot written in Python.
Build a Reddit bot
is a four part tutorial series that starts with reading posts, continues
with
replying to posts
,
automating the bot
and finally
adding behavior and a personality to the bot
.
Additional Bots resources
Bots: An introduction for developers
explains the technical details of how to create
Telegram
bots.
Building better bots with AWS Lex: Part 1
and
part 2
show how to use Amazon's service offering for better natural language
processing in your bots.
Slack bot token leakage exposing business critical information
is a detailed look at a search on GitHub for Slack tokens that are used
mostly for bots but must be kept secret. Otherwise those tokens expose
the entire Slack team's messaging to outside parties.
The Economist wrote a general piece on
why bots look like they'll gain adoption in various market segments
.
The piece doesn't have much technical depth but it's a good overview of
how some businesses are looking at the opportunity.
Three challenges youâre going to face when building a chatbot
provides insightful thoughts on problems to anticipate based on the
author's experience building, deploying and scaling chatbots.
Bots won't replace apps
is a fantastic piece by WeChat's product manager on how text-based bots
alone typically do not provide a good user experience. Instead, chat
apps with automated responses, user data and basic web browser
functionality are what has allowed bot concepts to bloom in Asian markets.
There's a lot of good information in this post to unpack.
Principles of bot design
contains some general, common-sense ideas to keep in mind when building
bots such as do not pretend to be a human (because it will be quickly
discovered that your bot is not a human) and keep it as simple as possible
so people can actually use the damn thing.
6 things I learned creating my own Messenger chatbot
contains some solid general advice for building your custom bots.
What else would you like to learn about Python?
I want to know about working with data in Python.
I've built a Python web app, now how do I deploy it?
Why is Python a good programming language to use?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Bots
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

API Frameworks - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
API Frameworks
API frameworks are code libraries that provide commonly-used functionality
when building your own
web application programming interfaces
(APIs).
Python API Frameworks
Django REST Framework
API Star
Starlette
Flask RESTful
What's next after building an API?
Tell me about standard relational databases.
How do I integrate existing web APIs into my application?
Show me a list of the best Python learning resources.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» API Frameworks
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Django REST Framework - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Django REST Framework
Django REST Framework
(
source code
),
typically abbreviated "DRF", is a Python library for building web
application programming interfaces (APIs)
.
Django REST Framework resources
How to Developer APIs with Django REST Framework
covers the steps for creating a development environment for your Django+DRF
project then creating API endpoints with the test-driven development (TDD)
approach.
The
official DRF tutorial
is one of the best first-party pieces of documentation on any open source
project. The
rest of the DRF docs are spectacular as well
.
Django: Building REST APIs
is the first part in an excellent multi-part series on DRF:
Getting started with DRF
Serializers
ModelSerializer and Generic Views
ViewSet, ModelViewSet and Router
Authentication and Permissions
JSON Web Tokens (JWT)
How to optimize your Django REST Viewsets
provides a good step-by-step example about using
select_related
and
prefetch_related
in the
Django ORM
layer to avoid
large numbers of unnecessary queries in your views. Also, props to the
author for wearing a UVA t-shirt in his picture when his blog says he
works as a developer in Blacksburg, Virginia (where Virginia Tech is
located).
How to Save Extra Data to a Django REST Framework Serializer
is a concise, handy tutorial for combining additional data
with the already-defined DRF serializer fields before saving
everything to a database or similar action.
Django polls api using Django REST Framework
gives a great walkthrough for creating a question polling application
backend with code and the explanation as you build it.
Django REST Framework Permissions in Depth
has code examples and explains permission classes versus authentication
classes in DRF.
Optimizing slow Django REST Framework performance
Simple Nested API Using Django REST Framework
Building APIs with Django and Django Rest Framework
What's next after building an API?
Show me a list of the best Python learning resources.
How do I integrate existing web APIs into my application?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Django REST Framework
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Twilio - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Twilio
Twilio
is a
web application programming interface (API)
that software developers can use to add communications such as
phone calling
,
messaging
,
video
and
two-factor authentication
into their
Python
applications.
Why is Twilio a good API choice?
Interacting with the standard telephone networks to send and receive
phone calls and text messages without Twilio is extremely difficult
if you do not know the unique telecommunications protocols such as
Session Initiation Protocol (SIP). Twilio's API abstracts the
telecommunications pieces so as a developer you can simply use your
favorite programming languages and frameworks in your application.
For example, here's how you can send an
outbound SMS
using a few lines of Python code:
# import the Twilio helper library (installed with pip install twilio)
from twilio.rest import TwilioRestClient

# replace the placeholder strings in the following code line with 
# your Twilio Account SID and Auth Token from the Twilio Console
client = TwilioRestClient("ACxxxxxxxxxxxxxx", "zzzzzzzzzzzzz")

# change the "from_" number to your Twilio number and the "to" number
# to any phone number you want to send the message to 
client.messages.create(to="+19732644152", from_="+12023358536", 
                       body="Hello from Python!")
Learn more about the above code in the
How to Send SMS Text Messages with Python tutorial
.
How is Twilio's documentation for Python developers?
Twilio is a developer-focused company, rather than a traditional
"enterprise company", so their tutorials and
documentation
are written by developers
for fellow developers.
More Twilio resources
Most
Twilio Tutorials
have
idiomatic Python versions with entire open source applications in
Django
and
Flask
.
Automate the Boring Stuff with Python
includes
a chapter on sending text messages
that uses Twilio to get the job done.
Build a Simpsons Quote-Bot with Twilio MMS, Frinkiac, and Python
combines picture messages sent via Twilio MMS with
Frinkiac
to create and sent Simpsons cartoon
quotes to any phone number.
Finding free food with Python
is a fun web scraping tutorial that uses Beautiful Soup 4 to obtain
some data from websites then uses the
Twilio SMS API via some Python code
to send a text message with the results.
The
Python tag on the Twilio blog
provides walkthroughs for
Django
,
Flask
and
Bottle
apps to learn from while building your own projects.
Serverless Phone Number Validation with AWS Lambda, Python and Twilio
walks through using the Python runtime on
AWS Lambda
and Twilio's APIs for validating phone number information.
Receive Flask Error Alerts by Email with Twilio SendGrid
shows how to use Twilio to add email error reports to
Flask
web applications.
Google Cloud recommends developers use Twilio
for communications in their apps and provides a short walkthrough for
Python developers.
SMS Tracking Notifications
is a fun tutorial that combines two APIs together - Twilio and
Easypost
to track packages sent through the
Easypost service. There is also another tutorial on
shipment notifications specifically for Flask
.
Build a Video Chat Application with Python, JavaScript and Twilio Programmable Video
shows how to use
Flask
and the
Twilio Programmable Video API
to
build cross-platform video into new and existing applications.
This video titled
"
We're No Strangers to VoIP: Building the National Rick Astley Hotline)
"
presents a hilarious hack that uses Python and
AWS Lambda
as a
serverless
backend to power thousands of Rick Rolling calls in several countries
with Twilio.
Stripe SMS Notifications via Twilio, Heroku, and Python
is a quick tutorial that demonstrates how to combine multiple services
to receive helpful notifications via SMS.
Disclaimer
I
currently work at Twilio
on the
Developer Network
and run the
Developer Voices
team.
Do you want to know more about integrating or creating APIs?
What are web application programming interfaces (APIs)?
How do I create an API for my web application?
How do I integrate existing web APIs into my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Twilio
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Stripe - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Stripe
Stripe is a web
application programming interface (API)
for processing payments.
Stripe is an implementation of the
web APIs
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Stripe tutorials
How to Create a Subscription SaaS Application with Django and Stripe
shows how to build a
Django
application with models for
the subscription data in the
Django ORM
and create
a pricing page.
Dirt Cheap Recurring Payments with Stripe and AWS Lambda
explains how to use the Stripe API with
AWS Lambda
to handle recurring payments instead of using a more expensive service
like Chargify or Recurly if you only have minimal requirements.
Django Stripe Tutorial
looks at how to quickly add Stripe to accept payments on a Django/Python website.
Setting up Stripe Connect with Django
this tutorial looks at how to integrate Stripe Connect into a Django application.
Adding a Custom Stripe Checkout to a Flask App
looks at how to add a custom Stripe checkout to a
Flask
application for processing payments.
Resources about Stripe
Stripeâs payments APIs: the first ten years
has a ton of great context about how Stripe's payments API has evolved,
its architecture, how they expanded it over time, and generally a bunch
of solid storytelling behind how it has been built.
How Stripe Designs Beautiful Websites
explains the process for how Stripe creates their gorgeous design that
makes people want to use the service and explore what else they can
build with it.
Creating a Culture of Observability
is a technical talk about monitoring systems at scale. The presenter works
at Stripe so much of his
Implementing API Billing with Stripe
covers billing and invoicing requirements for a video calling API product.
They explain how they matched their requirements to what Stripe offers
then what they had to build themselves to get everything working the way
they intended.
Learn more about integrating or building APIs?
What are web application programming interfaces (APIs)?
How do I integrate existing web APIs into my application?
How do I create an API for my web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Stripe
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Slack - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Slack
Slack provides a web
application programming interface (API)
for programmatically interacting with its messaging service.
The Slack API is an implementation of the
web application programming interfaces
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Slack resources
How to Build Your First Slack Bot with Python
contains all the code for getting a Slack bot up and running with Python
even if you have not previously worked with their API or built other
bots
.
Use a Slack bot to deploy your app
gives the sample code to a simplified bot that you can engage with in
your chat channels to perform application deployments.
How I built a Slack bot to help me find an apartment in San Francisco
is a story about how the author had issues finding an apartment while
moving from Boston to San Francisco. He started scraping Craigslist to
gather apartment data and built a Slack bot to message him as soon as
something that matched his criteria became available so he could take
a look at it.
Slack on an SNES
is not
a Python tutorial but it provides a crazy hack for communicating
with Slack using a Super Nintendo.
Hacking Slack accounts: As easy as searching GitHub
explains how secret Slack API keys are often committed to public GitHub
repositories which allows malicious actors to easily break into an
organization's messaging systems. Secret credentials in public repositories
is a problem for any API and it is a particular problem for ones that are
critical to a business' private communications.
Serverless Slash Commands with Python
shows how to build a
serverless
Flask
plus Zappa framework web app that is hosted on
AWS Lambda
and can use the Slack API.
Hacking Slack using postMessage and WebSocket-reconnect to steal your precious token
examines a bug that the author found in Slack's WebSockets reconnection
operation that he reported to Slack. Slack fixed the issue and paid him a
bug bounty for his work.
Posting messages to Slack using incoming webhooks and Python3 Requests API
is a short script that uses the
Requests
library instead of the Slack-provided Python helper libraries to interact
with the API.
Build a Google Analytics Slack Bot with Python
walks through creating a bot that posts Google Analytics data into
Slack channels by combining the Slack and Google APIs.
Example Slack bots
python-rtmbot
is the
Slack-provided library for working with the Slack API and
WebSockets
connection.
slackify
is a lightweight
framework for building bots and the quickstart walks you through
how to create a simple example bot.
slack-starterbot
slack-api-python-examples
contains the example code from several Slack bot blog posts.
slackbot
another popular
Slack bot implementation.
Learn more about APIs, or web development in general?
I want to learn how to code a Python web application using a framework.
What are web application programming interfaces (APIs)?
How do I create an API for my web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Slack
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Okta - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Okta
Okta
is an
application programming interface (API)
for authentication and identity management in web applications.
Okta is an implementation of the
web APIs
concept. Learn how these pieces fit together in the
web development
chapter or view the
table of contents
for all topics.
Okta resources
How to Add User Authentication to Flask Apps with Okta
covers using OpenID Connect with the
Okta API
for handling user authentication in
Flask
applications.
Read more about integrating or building APIs?
What are web application programming interfaces (APIs)?
How do I create an API for my web application?
How do I integrate existing web APIs into my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» Okta
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

SQL Injection - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
SQL Injection
SQL injections are a category of web application security vulnerabilities that
can affect both
relational databases
and
NoSQL data stores
.
SQL Injection resources
How security flaws work: SQL injection
is an approachable primer on the history and danger of how unsanitized
inputs to a database work.
Preventing SQL injections
provides a
PostgreSQL
and psycopg2 example for how
to avoid getting bit by a SQL injection vulnerability.
Securing your site like it's 1999
covers a bunch of common web application vulnerabilities including
SQL injection.
Automating Blind Sql Injection
shows how to use Python to execute SQL injection on the example
Damn Vulnerable Web Application
project.
What web development topic do you want to learn about next?
Tell me about standard relational databases.
What can I do to mitigate security vulnerability in my web app?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» SQL Injection
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Cross-Site Request Forgery (CSRF) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Cross-Site Request Forgery (CSRF)
Cross-Site Request Forgery is a type of web app vulnerability that forces users to execute unwanted actions when authenticated to an application.
Cross-Site Request Forgery (CSRF) resources
Preventing cross-site attacks using same-site cookies
explains how Dropbox's engineering team rolled out their same-site
cookie defense that augments other CSRF protections for users.
Securing your site like it's 1999
covers many common web application vulnerabilities including Cross-Site
Request Forgery issues.
What Python subject do you want to learn next?
What're these NoSQL data stores hipster developers keep talking about?
What tools exist for monitoring a deployed web app?
What can I do to mitigate security vulnerability in my web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
Web Frameworks
Django
Flask
Bottle
Pyramid
TurboGears
Falcon
Morepath
Sanic
Other Web Frameworks
Template Engines
Jinja2
Mako
Django Templates
Web Design
HTML
Cascading Style Sheets (CSS)
Responsive Design
Minification
CSS Frameworks
Bootstrap
Foundation
JavaScript
React
Vue.js
Angular
Task Queues
Celery
Redis Queue (RQ)
Dramatiq
Static Site Generators
Pelican
Lektor
MkDocs
Testing
Unit Testing
Integration Testing
Debugging
Code Metrics
Networking
HTTPS
WebSockets
WebRTC
Web APIs
Microservices
Webhooks
Bots
API Creation
API Frameworks
Django REST Framework
API Integration
Twilio
Stripe
Slack
Okta
Security
SQL Injection
CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
» CSRF
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Servers - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Servers
Servers are the physical infrastructure to run all the layers of software
so your web application can respond to requests from clients such as web
browsers.
Why are servers necessary?
Your web application must live somewhere other than your own desktop or
laptop. Servers should ideally be accessible 24 hours a day, 7 days a week,
with no unplanned downtime. The servers that host your web application for
actual users (as opposed to test users) are known as
production
servers.
Production servers hold real data (again as opposed to test data) and must be
secure against unauthorized access.
Bare metal servers
The term
bare metal
refers to purchasing the actual hardware and hooking
it up to the Internet either through a business-class internet service
provider (ISP) or
co-locating the server
with other servers. A "business-class" ISP is necessary because
most residential Internet service agreements explicitly prohibit running
web servers on their networks. You may be able to get away with low traffic
volume but if your site serves a lot of traffic it will alert an ISP's
filters.
The bare metal option offers the most control over the server configuration,
usually has the highest performance for the price, but also is the most
expensive upfront option and the highest ongoing maintenance. With bare
metal servers the ongoing operating cost is the electricity the server(s)
use as well as handling repairs when server components malfunction. You're
taking on manual labor working with hardware as well as the rest of the
software stack.
Buy actual hardware from a vendor either pre-built or as a collection of
components that you assemble yourself. You can also buy
pre-configured servers from Dell or HP. Those servers tend to be in
smaller case form factors (called "blades") but are correspondingly more
expensive than putting off-the-shelf components together yourself in a
standard computer case.
Virtualized servers
Virtual private servers (VPSs) are slices of hardware on top of a larger
bare metal server. Virtualization software such as
Xen
and
VMWare
allow providers such as
Linode
and
prgmr
(as well as a many others) to provide
fractions of a full server that appear as their own instances. For example,
a server with an 8-core Xeon processor and 16 gigabytes of memory can be
sliced into 8 pieces with the equivalent of 1-core and 2 gigabytes of
memory.
The primary disadvantage of virtualized servers is that there is resource
overhead in the virtualization process. In addition, physical constraints
such as heavy I/O operations by a single virtualized instance on persistent
storage can cause performance bottlenecks for other virtualized instances on
the shared server. Choosing virtualized server hosting should be based on
your needs for urgency of service ticket requests and the frequency you
require for ongoing maintenance such as persistent storage backups.
Virtualized servers resources
Choosing a low cost VPS
reviews the factors that you should weigh when deciding on hosting
providers.
How to set up your Linode for maximum awesomeness
shows how to work with a VPS once you've got the server up and running.
CPU Load Averages
explains how to measure CPU load and what to do about it.
Which cloud hosting company to choose in 2017?
compares DigitalOcean, Linode, Vultr, OVH and Scaleway in various
benchmarks such as CPUs, memory, disk space, network performance, traffic
capacity and cost. At the end of the article the author also provides some
qualitative feedback on the strengths and weaknesses of each services'
offerings.
Infrastructure-as-a-service
Infrastructure-as-a-service (IaaS) overlaps with virtualized servers
because the resources are often presented in the same way. The
difference between virtualized servers and IaaS is the granularity of the
billing cycle. IaaS generally encourages a finer granularity based on minutes
or hours of server usage instead of on monthly billing cycles.
IaaS can be used in combination with virtualized servers to provide
dynamic upscaling for heavy traffic. When traffic is low then virtualized
servers can solely be used. This combination of resources reduces cost at
the expense of greater complexity in the dynamically scaled infrastructure.
The most common IaaS platforms are
Amazon Web Services
and
Rackspace Cloud
.
The disadvantage to IaaS platforms is the lock-in if you have to write
custom code to deploy, dynamically scale, and generally understand your
infrastructure. Every platform has its quirks. For example,
Amazon's standard
Elastic Block Store
storage
infrastructure has at least an order of magnitude worse I/O throughput
than working with your local disk. Your application's database queries may
work great locally but then when you deploy the performance is inadequate.
Amazon has
higher throughput EBS instances
but you will pay correspondingly more for them. EBS throughput is just
one of many quirks you need to understand before committing to an
IaaS platform.
Infrastructure-as-a-service resources
The cloud versus dedicated servers
5 common server setups for your web application
is a great introduction to how hosting can be arranged.
Apache Libcloud
is a Python library that
provides a unified API for many cloud service providers.
Amazon Web Services has official documentation
for running Python web applications.
boto3
is an extensive and well-tested
Python library for working with Amazon Web Services.
Poseidon
is a Python commandline
interface for managing Digital Ocean droplets (servers).
Servers learning checklist
Sign up for a hosting provider. I recommend getting a
Linode VPS
to set up your initial infrastructure and deploy your web application
there.
Digital Ocean
and
prgrmr
are other VPS options. You can change
hosting providers later after the deployment process is automated.
Provision your first server. It will be ready but in a shutdown state
while awaiting your instructions.
Move to the
operating systems
section to learn
how to load Ubuntu 14.04 LTS as a base OS for Python web applications.
Keep going with server set up or try a PaaS deployment?
I have a server, how do I set up the operating system?
Which web server should I use?
How do I use a platform-as-a-service to deploy my Python app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Servers
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Static Content - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Static Content
Some content on a website does not change and therefore should be served
up either directly through the web server or a content delivery network (CDN).
Examples include JavaScript, image, and CSS files.
Types of static content
Static content can be either assets created as part of your development
process such as images on your landing page or user-generated content. The
Django framework calls these two categories
assets
and
media
.
Content delivery networks
A content delivery network (CDN) is a third party that stores and serves
static files.
Amazon CloudFront
,
CloudFlare
and
Fastly
,
are examples of CDN services. The purpose of
a CDN is to remove the load of static
file requests from web servers that are handling dynamic web content. For
example, if you have an nginx server that handles both static files and
acts as a front for a Green Unicorn WSGI server on a 512 megabyte
virtual private server, the nginx server will run into resource
constraints under heavy traffic. A CDN can remove the need to serve static
assets from that nginx server so it can purely act as a pass through for
requests to the Green Unicorn WSGI server.
CDNs send content responses from data centers with the closest proximity to the requester.
Static Content Resources
Crushing, caching and CDN deployment in Django
shows how to use django-compressor and a CDN to scale static and media
file serving.
Using Amazon S3 to host your Django static files
CDNs fail, but your scripts don't have to
django-storages
is
a Django library for managing static and media files on services such as
Amazon S3 and other content delivery networks.
RevSys has a nice article on a range of
important static file optimizations
such as setting cache headers, optimizing JavaScript and reducing the
size of images.
Twelve folks with significant experience working on and with CDNs
provide their perspectives in this piece:
CDN experts on CDNs
.
Serving Static Files from Flask with WhiteNoise and Amazon CloudFront
looks at how to manage static files with Flask, WhiteNoise, and
Amazon CloudFront.
Static content learning checklist
Identify a content delivery network to offload serving static content
files from your local web server. I recommend using Amazon S3 with
CloudFront as it's easy to set up and will scale to high bandwidth demands.
Update your web application deployment process so updated static files are
uploaded to the CDN.
Move static content serving from the www subdomain to a static (or
similarly named) subdomain so browsers will load static content in
parallel to www HTTP requests.
What's next for building your web app?
How can I cache repeated requests for better performance?
I want to learn more about app users via web analytics.
How do I automate server configuration and deployments?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Static Content
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Content Delivery Networks (CDNs) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Content Delivery Networks (CDNs)
Content delivery networks (CDNs) serve static assets via globally distributed
servers to improve web app loading speed.
CDN resources
The 5 hour CDN
explains the basics of what CDNs are and how they are a combination of
many standard web server components, but used globally and at scale.
MaxCDN vs CloudFlare vs Amazon CloudFront vs Akamai Edge vs Fastly
compares and contrasts the most popular CDN services based on features,
performance and pricing. Note
that
Full Stack Python
uses Cloudflare
to serve all content.
Crushing, caching and CDN deployment in Django
explains how to use the
django-compressor
package with the
django-storages
library
to deploy static assets for a
Django
application to a CDN.
Do not let your CDN betray you: Use Subresource Integrity
describes the security implications for CDNs with unexpectedly modified
content and how Subresource Integrity in modern web browsers can mitigate
this vulnerability if used properly.
What's next for deploying your web app?
How do I log errors that occur in my application?
How do I automate server configuration and deployments?
I want to learn more about app users via web analytics.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» CDNs
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Linode - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Linode
Linode is a virtual private server service provider that is frequently
used for deploying production Python web applications.
Linode resources
How I survived going viral on a $5 Linode
shows the traffic behind a high-trafficked site that runs on an
inexpensive Linode virtual private server. The author explains that
because the site was a single-page application with minimal JSON
server requests it was able to easily withstand the load from hundreds
of concurrent connections.
What else do you need to learn about deploying web apps?
Tell me about standard relational databases.
Show me options for bare metal and virtualized servers.
I have a server, how do I set up the operating system?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Linode
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

DigitalOcean - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
DigitalOcean
DigitalOcean is a virtual private server provider and deployment
platform that can be used for running Python applications.
DigitalOcean resources
Creating a Kubernetes Cluster on DigitalOcean with Python and Fabric
shows how to configure a three node Kubernetes cluster using
Ubuntu
16.04 LTS.
Setting up a Digital Ocean server for Selenium, Chrome, and Python
gives the code and instructions for setting up a testing server
that uses Selenium for executing user interface tests.
The
digitalocean tag
on GitHub
has a slew of open source projects such as
digitalocean-developer-firewall
to make it easier to configure firewalls and other services on your
droplets.
Useful tools for working with DigitalOcean
python-digitalocean
is a helper library for interacting with
DigitalOcean's APIs
so you can,
for example, spin up and shut down your servers.
vagrant-digitalocean
is a
Vagrant
provider plugin for managing
DigitalOcean infrastructure.
What else do you need to learn about deploying web apps?
What runs a Python application execute on the server?
Show me options for bare metal and virtualized servers.
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» DigitalOcean
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Lightsail - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Lightsail
Lightsail
is Amazon Web Services'
virtual private server service that can be used for running production
Python applications.
Anything else you'd like to learn about deploying Python apps?
What runs a Python application execute on the server?
Take me back to the Full Stack Python introduction.
What is the Django web framework?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Lightsail
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Heroku - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Heroku
Heroku
is an implementation of
the platform-as-a-service (PaaS) concept that can be used to more
easily
deploy
Python applications.
Heroku resources
Migrating your Django Project to Heroku
is a full tutorial on using Heroku to run
Django
web
applications. It includes instructions on converting from
MySQL
to
PostgreSQL
if necessary
as well as how to properly handle your settings files.
How to deploy Django project to Heroku using Docker
explains that although
Buildpacks
are the most common way to deploy to Heroku, packaing your app in a
Docker
container is also a viable approach. It walks through
the steps needed to deploy a
Django
app in the remainder
of the article.
Heroku's
official Python documentation
is fantastic and walks through deploying WSGI applications in short order.
Production Django Deployments on Heroku
aims to simplify the process of deploying, maintaining, and scaling production-grade Django apps on Heroku.
Deploying Django to Heroku With Docker
looks at how to deploy a Django app to Heroku with Docker via the Heroku Container Runtime.
Heroku Chatbot with Celery, WebSockets, and Redis
is a walkthrough with
available source code
to build
a
Django
and
Redis
-based chat
bot
that can be easily deployed to Heroku.
What else do you want to learn about deployment?
I have a server, how do I set up the operating system?
How do I use a platform-as-a-service to deploy my Python app?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Heroku
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

PythonAnywhere - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
PythonAnywhere
PythonAnywhere
is an
implementation of the
platform-as-a-service (PaaS)
concept
and can be used to
deploy
and operate Python
applications.
PythonAnywhere resources
Turning a Python script into a website
shows how to take a simple script and deploy it to PythonAnywhere so you
can have it running somewhere other than your local machine.
What else do you need to learn about deployment?
Show me options for bare metal and virtualized servers.
Tell me about standard relational databases.
How do I use a platform-as-a-service to deploy my Python app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» PythonAnywhere
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

AWS CodeStar - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
AWS CodeStar
AWS CodeStar
is a
platform-as-a-service
implementation
and continuous delivery
deployment
pipeline for
running Python applications.
What's next after you deploy your application?
How can I cache repeated requests for better performance?
What tools exist for monitoring a deployed web app?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» AWS CodeStar
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Ubuntu - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Ubuntu
Ubuntu
is a Debian Linux-based
operating system
distribution often used for
Python development
and
web application deployment
.
Why is Ubuntu important for Python?
Ubuntu is one of the most commonly used Linux distributions for both local
development and server deployments. Some
platforms-as-a-service
such as Heroku run
Ubuntu as the base operating system, so as a Python developer you'll often
have to work with Ubuntu or a similar Debian-based Linux operating system.
Ubuntu is an implementation of the
operating systems
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
What does "LTS" mean for Ubuntu?
Every two years Ubuntu releases a Long-Term Support (LTS) version that
receives five years of updates instead of only two years for non-LTS
releases. However, there are some issues with the current LTS model,
in that you
must only use packages from the main repository
unless you're going to manually handle security updates for non-main
repository system packages.
Additional Ubuntu resources
Get your Python
development environment
set up with one of these quick tutorials for Ubuntu 16.04 LTS:
How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS
Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS
Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS
There are also walkthroughs for configuring relational databases and Redis
on Ubuntu:
Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04
How to Install and Use MySQL on Ubuntu 16.04
How to Use Redis with Python 3 and redis-py on Ubuntu 16.04
Configuring Ubuntu for deep learning with Python
is a great tutorial on which packages you should install and why to
use
Python 3
, OpenCV and Keras on Ubuntu Linux.
How to Use the Command Line for Apple macOS and Linux
is a fantastic guide relevant to Ubuntu users who should be able to use
the terminal to accomplish their tasks.
Linux System Mining with Python
shows how to use Python libraries to gather Linux system information
and work with it programmatically in your applications.
Canonical, the organization that produces Ubuntu, typically pushes the
boundaries on non-LTS releases, but occasionally rocks the boat with
major changes for an LTS release. 16.04 LTS was one such version, which
is described in this article about how
Ubuntu 16.04 proves even an LTS release can live at Linux's bleeding edge
.
What I learned while securing Ubuntu
explains how difficult it can be just to find correct information
on how to secure an operating system. In this case, the author goes over
how he went about securing package management, security standards and
file integrity on Ubuntu 14.04 LTS.
In Beaver We Trust: A Lengthy, Pedantic Review of Ubuntu 18.04 LTS
examines the latest Ubuntu Long Term Support desktop release in detail.
After setting up your OS you should configure a web server.
Which web server should I use?
How should Python libraries be installed on a server?
How do I use a platform-as-a-service to deploy my Python app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Ubuntu
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

macOS - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
macOS
macOS is an
operating system
within the Unix family tree that is developed by Apple and is often
used for
developing Python applications
.
macOS is an implementation of the
operating systems
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
macOS Python resources
Using Python on a Macintosh
explains how Python 2.7 is installed by default on Macs. You should
start setting up your environment by installing Python 3 and then follow
the instructions in the post to get a
development environment
configured.
Python Development Environment on macOS High Sierra
takes the defualt macOS environment and gives you the step to configure
everything for Python development.
How to Set Up Your Python Environment
is a data science-flavored configuration guide.
How to Use the Command Line for Apple macOS and Linux
explains the Terminal. If this guide is useful to you then you should
also check out the
shells
and
Bash
pages.
What's next after setting up macOS?
How should Python libraries be installed on a server?
Which web server should I use?
What is the Django web framework?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» macOS
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

FreeBSD - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
FreeBSD
FreeBSD is an
operating system
within the Unix family tree that can be used used for
developing Python applications
.
FreeBSD is an implementation of the
operating systems
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
FreeBSD Python resources
How to Get Started with FreeBSD
covers the first steps of logging into a FreeBSD server with SSH,
updating the
root
password and setting your default shell. There is also
a follow-up post for setting up your
SSH keys on FreeBSD
.
The
FreeBSD Developer's Handbook
shows the extensive documentation available to you as you work with Python
and other programming languages on this operating system.
Recommended Steps For New FreeBSD 12.0 Servers
explains setting time zones, setting up the IPFW Firewall and configuring
NTP for accurate time.
What's next after setting up FreeBSD?
How should Python libraries be installed on a server?
Which web server should I use?
What is the Django web framework?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» FreeBSD
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Windows - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Windows
Windows
is a closed-source, proprietary
operating system
created by Microsoft that
is often used to
develop Python applications
.
Windows is an implementation of the
operating systems
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
Useful resources for Python on Windows
Windows for Linux nerds
gives context for how Windows works compared to Linux and digs into the
Windows Subsystem for Linux (WSL) which allows the operating system to
handle Linux calls.
How to set up the perfect modern dev environment on Windows
provides a good guide that includes configuring Vagrant, setting up the
Windows toolchain and updating your permissions to handle development.
Setting Up Python for Machine Learning on Windows
presents detailed steps for installing Anaconda and using it to
install dependencies on your local machine.
PyInstaller
packages a Python application with
its associated dependencies into a Windows executable file so it can be
more easily distributed and run on other computers.
Cmder
is a beautiful console emulator designed for
Windows that can be useful for when you need to get work done on the
commandline.
Setting up Python on Windows 10
is a short guide to making sure you have Python 3 installed correctly on
your Windows computer.
Using both Python 2 and 3 in Windows
explains how to configure Windows so you can use both Python 2 and 3 if
you still need to dig into older projects that have not yet been updated.
Epic Development Environment using Windows Subsystem for Linux
shows how to get your Windows development environment configured. It is
geared towards JavaScript/Node developers but most of the steps will also
be useful to Python developers.
Windows dev box setup scripts
are
Powershell
programs for setting up a Windows
machine for development.
What's next after setting up macOS?.
How should Python libraries be installed on a server?
Which web server should I use?
What is the Django web framework?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Windows
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Apache HTTP Server - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Apache HTTP Server
The
Apache HTTP Server
is a widely deployed web server
that can be used in combination with a WSGI module, such as mod_wsgi or a
stand-alone
WSGI server
to run Python web applications.
Why is the Apache HTTP Server important?
Apache remains the most commonly deployed web server with a reign of
20+ years. Its wide usage contributes to the large number of tutorials
and open source modules created by developers for anyone to use.
Apache's development began in mid-1994 as a fork of the
NCSA HTTP Server
project.
By early 1996, Apache overtook the previously dominant but suddenly stagnant
NCSA server as NCSA's progress stalled due to signficantly reduced
development attention.
The Apache HTTP Server is an implementation of the
web server
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
Apache HTTP Server resources
The
official project documentation page
contains a section with How-Tos and Tutorials to handle authentication,
security and dynamic content.
Reverse proxies
shows
how to set up Apache as a reverse proxy using
mod_proxy
.
Deploy Django on Apache with Virtualenv and mod_wsgi
provides instructions for what packages to install to get Apache up
and running with mod_wsgi on Ubuntu.
Detecting Bots in Apache & Nginx Logs
is a great tutorial for filtering out the significant traffic generated
by web crawlers and bots when using Apache HTTP Server logs for traffic
analytics.
Apache vs Nginx: Practical Considerations
is a good comparison post that covers the differences between Apache and
Nginx
such as how they handle connections and serve content.
Monitoring Apache web server performance
gives a really nice overview of metrics to watch when you are using
Apache as your web server.
Web Performance 101: HTTP Headers
covers the gamut of HTTP headers and shows how they can impact performance
based on your configuration.
Apache Web Server on Ubuntu 14.04 LTS
explains how to install Apache on Ubuntu 14.04, which is still a supported
release. Note however, do
not
install mod_python because it is now insecure
and made obsolete by
mod_wsgi and WSGI servers
.
Continue learning about web servers or move to a new topic?
Which web server should I use?
What runs a Python application execute on the server?
How should I host and serve static content files?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Apache HTTP Server
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Nginx - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Nginx
Nginx
, pronounced "engine-X", is the
second most common web server among the top 100,000 websites
. Nginx also functions well as a
reverse proxy to handle requests and pass back responses for Python
WSGI servers
or even other web servers such as Apache.
How is Nginx used in a Python web app deployment?
Nginx is commonly used as a web server to serve static assets such
as images, CSS and JavaScript to web browser clients.
Nginx is also typically configured as a reverse proxy, which passes
appropriate incoming HTTP requests to a
WSGI server
.
The WSGI server produces dynamic content by running Python code. When the
WSGI server passes its response, which is often in the HTML, JSON or XML
format, the reverse proxy then responds to the client with that result.
The request and response cycle with a reverse proxy server and the WSGI
server can be seen in the following diagram.
Typically the client will not know or need to know that a Python web
application generated the result. The result could have instead been
generated by one or more backend systems written in any programming language,
not just Python.
Nginx is an implementation of the
web server
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
Should I use Nginx or the Apache HTTP Server?
Let's be clear about these two "competing" servers: they are both fantastic
open source projects and either will serve your web application deployment
well. In fact, many of the top global web applications use both servers in
their deployments to function in many steps throughout the HTTP
request-response cycle.
I personally use Nginx more frequently than Apache because Nginx's
configuration feel easier to write, with less boilerplate than alternatives.
There's also a bit of laziness in the usage: Nginx works well, it never causes
me problems. So I stick with my battle-tested
Ansible
configuration management
files
that set up Nginx with HTTPS and SSL/TLS certificates
Securing Nginx
Nginx's default configuration after a standard installation through a
system package manager or compiling from source is a good base for security.
However, setting up ciphers and redirects can be confusing the first few
times you try it. It's a really good idea to read some of these tutorials
to make sure you are avoiding the most common security errors that plague
HTTP(S) configurations.
HTTPS with Let's Encrypt and nginx
walks through installing a free SSL certificate from Let's Encrypt
to secure HTTP connects to your nginx server via HTTPS.
The
Nginx Config
tool can generate strong
encryption configurations and ciphers for Nginx.
Gixy
is a static analyzer for your
Nginx configuration and can tell you issues with how you are setup.
Strong SSL Security on Nginx
shows how to mitigate high profile SSL attacks like
Logjam
and
Heartbleed
.
Specific Nginx resources
Nginx can be used without Python so there are a massive number of fantastic
resources available for installing, configuring and optimizing this
web server
implementation. The following resources are
ones that I collected during my own struggle while learning how to use
Nginx after I had used
Apache HTTP Server
for
several years.
The
Nginx chapter
in the
Architecture of Open Source Applications book
has a great chapter devoted to why Nginx is built to scale a certain way
and lessons learned along the development journey.
nginx-quick-reference
provides fantastic tactical advice for improving Nginx performance,
handling security and many other critical aspects.
Inside Nginx: How we designed for performance and scale
is a blog post from the developers behind Nginx on why they believe their
architecture model is more performant and scalable than other approaches
used to build web servers.
Test-driving web server configuration
tells a good story for how to iteratively apply configuration changes, such
as routing traffic to
Matoma
for
web analytics
, reverse proxying to backend
application servers and terminately TLS connections appropriately.
It is impressive to read a well-written softare development article like
this from a government agency, although UK's Government Digital Service as
well as USA's 18F and US Digital Service foster a far more credible
culture than most typical agencies.
Hacker News broke our site â how Nginx and PageSpeed fixed the problem
is primarily about optimizing Nginx's configuration for more efficient
SSL connections. The post also covers
configuration management
with Ansible
as well as the Pagespeed module that Google released for both Nginx
and the
Apache HTTP Server
.
A faster Web server: ripping out Apache for Nginx
explains how Nginx can be used instead of Apache in some cases for
better performance.
Nginx vs Apache: Our view
is a first-party perspective written by the developers behind Nginx
as to the differences between the web servers.
Rate Limiting with Nginx
covers how to mitigate against brute force password guessing attempts using
Nginx rate limits.
Nginx with dynamic upstreams
is an important note for setting up your upstream WSGI server(s) if you're
using Nginx as a reverse proxy with hostnames that change.
Nginx Caching
shows how
to set up Nginx for caching HTTP requests, which is often done by Varnish
but can also be handled by Nginx with the
proxy_cache
and related
directives.
Dynamic log formats in nginx
explains how to use the HttpSetMiscModule module to transform variables
in Nginx and map input to controlled output in the logs. The author uses
this technique for pixel tracking but there are other purposes this method
could be used for such as advanced debugging.
Detecting Bots in Apache & Nginx Logs
is an awesome tutorial that shows how to filter web crawlers and bots
from your traffic logs when using them for web traffic analytics.
Continue learning about web servers or move to a new topic?
Which web server should I use?
What runs a Python application execute on the server?
How should I host and serve static content files?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Nginx
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Caddy - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Caddy
Caddy
is a relatively new HTTP server created
in 2015 and written in
Go
. The server's philosophy
and design emphasize HTTPS-everywhere along with the HTTP/2 protocol.
How can Caddy be used with Python deployments?
Caddy can be used both for testing during local development or as part
of a production deployment as an HTTP server and a reverse proxy with
the
reverse_proxy directive
.
Caddy is an implementation of the
web server
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
General Caddy resources
A look inside Caddy
shows and explains some of the Go code written to build the server.
The
official Caddy server docs
are the
spot to look for what directives can be placed into a Caddy configuration
file
Caddy a modern web server supporting HTTP/2
is a quick synopsis on installing Caddy along with a short example
configuration file.
HTTP 2.0 on localhost with Caddy
shows how to use a self-signed certificate with Caddy to do local
development with an HTTP/2 web server.
Continue learning about web servers or move to a new topic?
Which web server should I use?
What runs a Python application execute on the server?
How should I host and serve static content files?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Caddy
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Green Unicorn (Gunicorn) - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Green Unicorn (Gunicorn)
Green Unicorn
, commonly shortened to "Gunicorn",
is a
Web Server Gateway Interface (WSGI) server
implementation that is commonly used to run Python web applications.
Why is Gunicorn important?
Gunicorn is one of many WSGI server implementations, but it's particularly
important because it is a stable, commonly-used part of
web app deployments
that's powered some of the
largest Python-powered web applications in the world, such as
Instagram
.
Gunicorn implements the
PEP3333 WSGI server standard specification
so that it can run Python web applications that implement the application
interface. For example, if you write a web application with a
web framework
such as
Django
,
Flask
or
Bottle
, then your application
implements the WSGI specification.
Gunicorn is an implementation of the
WSGI servers
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
How does Gunicorn know how to run my web app?
Gunicorn knows how to run a web application based on the hook between the
WSGI server and the WSGI-compliant web app.
Here is an example of a typical Django web application and how it is run
by Gunicorn. We'll use the
django_defaults
as an example Django project. Within the
django_defaults
project subdirectory, there is a short
wsgi.py
file with the following contents:
"""
WSGI config for django_defaults project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "django_defaults.settings")

application = get_wsgi_application()
That
wsgi.py
file was generated by the
django-admin.py startproject
command
when the Django project was first created. Django exposes an
application
variable via that
wsgi.py
file so that a WSGI server can use
application
as a hook for running the web app. Here's how the situation looks visually:
What's a "pre-fork" worker model?
Gunicorn is based on a pre-fork worker model, compared to a worker model
architecture. The pre-work worker model means that a master thread spins up
workers to handle requests but otherwise does not control how those workers
perform the request handling. Each worker is independent of the controller.
Gunicorn resources
There are three framework-specific posts on the
Full Stack Python blog
for configuring Gunicorn for
development on Ubuntu:
Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS
How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS
Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS
gunicorn as your Django development server
is a short post with a few good tips on using Gunicorn for local
application development.
The
Full Stack Python Guide to Deployments
provides detailed step-by-step instructions for deploying Gunicorn as part
of an entire Python web application deployment.
Flask on Nginx and Gunicorn
combines the
Nginx web server
with Gunicorn in a deployment
to serve up a Flask application.
The answers to the question "
what's the best practice for running Django with Gunicorn?
"
provide some nuance for how Gunicorn should be invokin the callable
application variable provided by Django within a deployment.
How to Install Django with Gunicorn and Nginx on FreeBSD 10.2
is a tutorial for FreeBSD, which is not often used in walkthroughs compared
to the frequency that Ubuntu and CentOS tutorials appear.
How to make a Scalable Python Web App using Flask, Gunicorn, NGINX on Ubuntu 14.04
and
Deploy a Flask App on Ubuntu
both provide steps for setting up a Flask web app using Gunicorn. There
isn't much explanation provided with each tutorial but they can still be
good concise references in case you're having issues with Ubuntu.
Deploying a Flask Site Using Nginx, Gunicorn, Supervisor and Virtualenv on Ubuntu
is a similar tutorial to the previous two links. It provides some good
screenshots along the way with what to expect while you are configuring
the deployment server.
The
Django
and
Flask
documentation each contain instructions for deploying the respective
frameworks with Gunicorn.
Dockerizing Django with Postgres, Gunicorn, and Traefik
is a more advanced tutorial with a complete project deployment
that uses Gunicorn within
Docker
.
Set up Django, Nginx and Gunicorn in a Virtualenv controled by Supervisor
is a GitHub Gist with some great explanations for why we're setting up
virtualenv and what to watch out for while you're doing the deployment.
The
Gunicorn design document
is worth reading because it describes the server model and gives some
context on how to choose the number of workers for your execution
environment.
Configuring Gunicorn for containers
explains how to avoid excessive slowness in your
Docker
containers that run Gunicorn workers, as well as some tips on
proper logging.
What else do you want to learn about deployments?
What runs a Python application execute on the server?
What is Docker and how does it fit with Python deployments?
Show me options for bare metal and virtualized servers.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Green Unicorn (Gunicorn)
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

uWSGI - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
uWSGI
uWSGI
(
source code
), pronounced "mu wiz gee",
is a
Web Server Gateway Interface (WSGI) server
implementation that is typically used to run Python web applications.
uWSGI resources
Configuring uWSGI for Production Deployment
explains how Bloomberg uses uWSGI as a production WSGI server
for some of their Python projects and how to set it up for your
own applications.
The official
Django
framework docs on
how to use Django with uWSGI
along with the corresponding official
uWSGI Django docs
are great places to start when you are trying to
deploy
your Django project.
The uWSGI Swiss Army Knife
examines a few lesser-known uWSGI features that support serving static
files, working with SSL, caching and asynchronous task execution.
How To Serve Django Applications with uWSGI and Nginx on Debian 8
shows how to set up a
Django
web app on Debian Linux that
uses
Nginx
as a
web server
and reverse
proxy for the uWSGI server.
The official
uWSGI quickstart
is awesome because it shows you how to code a quick WSGI application without
using a framework then builds up an example with deploying a traditional
Django web app.
What other Python topics do you want to learn about?
Tell me about standard relational databases.
How do I log errors that occur in my application?
What tools exist for monitoring a deployed web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» uWSGI
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

mod_wsgi - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
mod_wsgi
mod_wsgi
(
source code
)
is an implementation of the
Web Server Gateway Interface
specification for running Python code in the
Apache HTTP Server
. mod_wsgi is implemented
as an Apache HTTP Server module and it supports both
Python 2 and Python 3 code
.
mod_wsgi resources
The
official documentation
is wonderful for getting started as well as digging into how to
configure your server for better security.
What else do you want to learn about deployments?
What runs a Python application execute on the server?
Show me options for bare metal and virtualized servers.
What is Docker and how does it fit with Python deployments?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» mod_wsgi
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Jenkins - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Jenkins
Jenkins
is a
continuous integration
(CI) server often
used to automate building,
testing
and
deploying
Python applications.
Jenkins is an implementation of the
continuous integration
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
Jenkins resources
Assembling a continuous integration service for a Django project on Jenkins
shows how to set up a Ubuntu instance with a Jenkins server that'll build a
Django
project.
My book on
deploying Python web applications
walks through every step of setting up a Jenkins project with a WSGI
application to enable continuous delivery. Take a look if you're not
grokking all of the steps provided in these other blog posts.
Revisiting Docker and Jenkins
is a fantastic series of posts that explains how Riot Games combines
Jenkins and Docker to test their back end services.
Setting up Jenkins as a continuous integration server for Django
is another solid tutorial that also shows how to send email notifications
as part of the build process.
Running Jenkins in Docker Containers
is a short tutorial showing how to use the official
Jenkins container
on the
Docker hub.
Updating the GOV.UK Continuous Integration environment
describes the configuration improvements one infrastructure team made
to Jenkins, where they enabled
jenkinsfiles
to store CI data within project repositories instead of having to
handle the setup through the Jenkins user interface. The team also
published
their Puppet files for building
Jenkins infrastructure.
Jenkins configuration as code
details the launch of a new Jenkins tool for programmatically configuring
Jenkins so you can automate the setup of this part of your deployment
infrastructure. The post goes into the motivations behind creating another
tool for code configuration when other similar libraries already exist.
Automated servers and deployments with Ansible & Jenkins
covers using
Ansible
for automating
deployments
and handling the coordination via
Jenkins builds.
Building GitHub Pull Requests using Jenkins Pipelines
explains how to use Jenkins 2.0 with Pipelines to create builds that
run in Docker containers off of new GitHub pull requests.
Automated API testing with Jenkins
walks through how to use Jenkins to tests your
API
upon each deployment.
What would you like to learn about next?
Which web server should I use?
How should Python libraries be installed on a server?
Show me options for bare metal and virtualized servers.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Jenkins
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

GoCD - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
GoCD
GoCD
is a
continuous integration (CI)
server often used to automatically build,
test
and
deploy
Python applications.
GoCD is an implementation of the
continuous integration
concept. Learn more in the
deployment
chapter or view the
table of contents
for all topics.
GoCD resources
The official
getting started with GoCD
guide is a solid place to begin configuring the CI server and learning
about its basic concepts.
py-gocd
is a code library
for programmatically interacting with GoCD from your Python code.
What topic would you like to learn about next?
Which web server should I use?
How should Python libraries be installed on a server?
Show me options for bare metal and virtualized servers.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» GoCD
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Ansible - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Ansible
Ansible
is a
configuration management tool
used for
application deployment
and
environment setup
.
Example Ansible playbooks
Ansible is far easier to learn when you can read how more full-featured
playbooks are built using many tasks. An interesting note from my own
experience is that when you get more experienced using Ansible there are
many shortcuts in the task syntax so you can often make playbooks that have
fewer lines of code than when you were less experienced yet the readability
does not suffer.
Check out some of these example playbooks to learn more about how you may
be able to structure your playbooks:
The
prod directory
under the
Full Stack Python Deployment Guide open source project code
contains a full playbook for deploying a standard
Nginx
,
Gunicorn
and
PostgreSQL
stack.
mac-dev-playbook
configures macOS with various applications and developer tools such as
Docker
, Homebrew and
Sublime Text
.
Specific Ansible topics
An Ansible2 Tutorial
is an incredibly detailed look at how one developer installs and run
Ansible.
This retrospective from a developer on
lessons from using Ansible exclusively for 2 years
explains his rationale for choosing Ansible over Puppet and Chef,
then goes through several use cases and best practices learned over
time with the tool.
Using Ansible for deploying serverless applications
provides a short overview with an example playbook how Ansible can also
be useful for configuring
serverless
applications.
Painless Immutable Infrastructure with Ansible and AWS
covers the steps needed for the unique authentication complexities
that arise from using Amazon Web Services for your infrastructure.
DevOps from Scratch, Part 1: Vagrant & Ansible
How to use Ansible Variables and Vaults
CI for Ansible playbooks which require Ansible Vault protected variables
How to use Ansible to manage PostgreSQL
Deploy A Replicated MongoDB instance on AWS with Terraform and Ansible
What's next after automating your deployment?
Can I automate testing and deployments for my app?
I want to learn more about app users via web analytics.
How do I integrate existing web APIs into my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Ansible
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Salt - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Salt
Salt
(
source code
) is a
configuration management tool
used for
application deployment
and
setting up development environments
.
Salt resources
What's new in Salt 3000 Neon
covers the latest release and the significant number of new features
and fixes contained within it.
Introduction to Salt
gives a 30 second summary of what the tool can do for you then provides
a collection of links to other resources that plug you into the Salt
community, such as the
salt-users mailing list
and the
Salt Stack company blog
.
Linode
has two great beginner guides to Salt, the first
one on
Getting Started with Salt - Basic Installation and Setup
and the other titled
A Beginner's Guide to Salt
.
What's next after automating your deployment?
Can I automate testing and deployments for my app?
I want to learn more about app users via web analytics.
How do I integrate existing web APIs into my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Salt
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Docker - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Docker
Docker
(
source code for core Docker project
)
is an infrastructure management platform for running and deploying software.
The Docker platform is evolving so an exact definition is currently
a moving target, but the core idea behind Docker is that operating
system-level containers are used as an abstraction layer on top of regular
servers for deployment and application operations.
Why is Docker important?
Docker can package up applications along with their necessary operating system
dependencies for easier deployment across environments. In the long run it
has the potential to be the abstraction layer that easily manages containers
running on top of any type of server, regardless of whether that server is
on Amazon Web Services, Google Compute Engine, Linode, Rackspace or elsewhere.
Python projects within Docker images
This Docker image contains
a Flask application configured to run with uWSGI and Nginx
.
You can also see the
image on Docker hub
.
minimal-docker-python-setup
contains an image with Nginx, uWSGI, Redis and Flask.
Docker resources
Beginners guide to Docker
explains what it is, the difference between containers and virtual machines,
and then provides a hands-on walkthrough command-driven tutorial.
What is Docker and When to Use It
clearly delineates what Docker is and what it isn't. This is a good article
for when you're first wrapping your head around Docker conceptually.
rubber-docker
is an open source
repository and tutorial that shows you how to recreate a simplified version
of Docker to better understand what it's doing under the hood.
Docker curriculum
is a detailed
tutorial created by a developer to show the exact steps for deploying an
application that relies on
Elasticsearch
.
It Really is the Future
discusses Docker and containers in the context of whether it's all just a
bunch of hype or if this is a real trend for infrastructure automation.
This is a great read to set the context for why these tools are important.
Docker Jumpstart
is a
comprehensive introduction to what Docker is and how to get started with
using the tool.
If you want to quickly use Docker on Mac OS X, check out these concise
instructions
for setting up your Docker workflow on OS X in 60 seconds
.
What the Bleep is Docker?
is a plain English explanation with examples of what Docker provides and
what it can be used for in your environment.
Docker in Practice - A Guide for Engineers
is an explanation of the concepts and philosophy by the authors of the
new Manning Docker book in early access format.
Building Docker containers from scratch
is a short tutorial for creating a Docker container with a specific
configuration.
Docker Internals
presents
Linux containers and how Docker uses them as its base for how the project works.
This article is a great way to bridge what you know about Docker with a more
traditional Linux operating system architecture understanding.
Improve your Dockerfile, best practices
covers image size, layers, starting scripts and LABEL.
This post gives an overview and
comparison of Docker GUIs
which can be
handy for monitoring your Docker containers.
Python-specific Docker resources
Dockering Django, uWSGI and PostgreSQL the serious way
walks through both the code and the error messages that will likely crop
up as you attempt to container-ize a
Django
project that
uses a
PostgreSQL
database on the backend.
How to deploy Django using Docker
assumes you already have the basic grasp of working with Docker and
jumps right into a Django deployment. The post shows you how to set up
your
Dockerfile
and explains that
GitLab CI
can be used to to build this Docker image.
Hosting Python WSGI applications using Docker
shows how to use Docker in WSGI application deployments specifically using
mod_wsgi.
How to Containerize Python Web Applications
is an extensive tutorial that uses a Flask application and deploys it
using a Docker container.
How to use Django, PostgreSQL, and Docker
shows how to get a
Django
project that uses
PostgreSQL
as its back end running in Docker.
Docker in Action - Fitter, Happier, More Productive
is a killer tutorial that shows how to combine Docker with CircleCI to
continuously deploy a Flask application.
Building smaller Python Docker images
examines how to inspect layers in Dockerfiles and minimize the
overhead of what images contain for better performance.
The Flask Mega-Tutorial Part XIX: Deployment on Docker Containers
is one post in
Miguel Grinberg
's absolutely
spectacular
Flask
application series.
Deploying Django Applications in Docker
explains some of the concepts behind using Docker for Python deployments and
shows how to specifically use it for deploying Django.
Using Docker and Docker Compose to replace virtualenv
is a tutorial for using Docker instead of virtualenv for dependency
isolation.
Lincoln Loop wrote up
a closer look at Docker
from the perspective of Python developers handling deployments.
Curious how pip and Docker can be used together? Read this article on
Efficient management Python projects dependencies with Docker
.
Python virtual environments and Docker
goes into detail on whether virtual environments should be used with Docker
and how system packages can generally be a safer route to go.
Dockerizing Django with Postgres, Gunicorn, and Nginx
details how to configure Django to run on Docker along with Postgres, Nginx
and Gunicorn.
Dockerizing a Python Django Web Application
is another in-depth tutorial on combining Docker with
Django
.
Dockerizing Flask with Postgres, Gunicorn, and Nginx
looks at how to configure Flask to run on Docker along with Postgres,
Nginx, and Gunicorn.
What do you want to learn next about deployments?
I've built a Python web app, now how do I deploy it?
Can I automate testing and deployments for my app?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Docker
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Kubernetes - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Kubernetes
Kubernetes
(
source code
) is a
container
orchestration system for
deploying
, scaling and
operating
applications.
Kubernetes tools
Helm
(
source code
)
is a package manager for Kubernetes charts, which are the way to define
common types of Kubernetes cluster arrangements, like
MySQL
,
Cassandra
or
Jenkins
.
Gitkube
(
source code
) makes it possible to
deploy an application to Kubernetes using
git push
, similar to how
Heroku popularized making
platform-as-a-service
deployments easy.
Kompose
(
source code
)
translates Docker Compose files into Kubernetes configuration resources.
skaffold
(
source code
) makes
it easier to develop locally with Kubernetes.
kubethanos
is a tool to kill
half of your Kubernetes pods at random, to test the resilience of your
infrastructure under highly chaotic scenarios.
Kubernetes background and retrospectives
Borg, Omega and Kubernetes
goes into the history of Borg and Omega, projects that preceded
Kubernetes' creation. There are a ton of great notes on why they developed
the project in certain ways and what they knew to avoid based on the
prior work on Borg and Omega.
Kubernetes at GitHub
provides a retrospective on transitioning GitHub's infrastructure from
a traditional Ruby on Rails deployment architecture to a more scalable
container-based Kubernetes system. There are some great details on the
steps in the transition and ramping up capacity until it was the full
system for github.com and other critical services.
Reasons Kubernetes is cool
breaks past the "why would I ever need this?" initial developer reaction
and gives solid reasons such as better visibility into all of the services
running on your Kubernetes cluster and potentially much faster deployment
after appropriate configuration.
How we designed our Kubernetes infrastructure on AWS
explains how the Kubernetes Infrastructure Technology Team (yes, that
abbreviates to KITT in honor of the
1980s Knight Rider TV show
)
at Atlassian starting using the tool and how they have built infrastructure
around it for the company to operate their container-ized applications.
10 Most Common Reasons Kubernetes Deployments Fail
goes over many of the top technical reasons why issues come up with
Kubernetes and what you need to do to avoid or work through them.
Draft vs Gitkube vs Helm vs Ksonnet vs Metaparticle vs Skaffold
gives a great overview of the most popular tools that make it easier to
use Kubernetes.
Architecting applications for Kubernetes
is stuffed full of great design advice that is now available as people
having been using Kubernetes for a couple of years.
"Letâs use Kubernetes!" Now you have 8 problems
is a counter-argument for why you should be cautious about introducing
the significant complexity overhead of Kubernetes (or any related tools)
into your environment unless you really need the advantages that they can
provide. Each developer, team and organization should perform an explicit
cost-benefit analysis to make sure the tool's scability, reliability
and related functionality will outweigh the downsides.
How Zalando manages 140+ Kubernetes clusters
covers the architecture, monitoring and workflow of a team that has
to run a decent number of clusters for their development teams.
Kubernetes tutorials
Kubernetes The Hard Way
is a tutorial that walks you through manually setting up a Kubernetes
cluster. The purpose is to teach you what is happening at each step instead
of performing everything through automation like you normally would after
you understand how to use the tool.
Kubernetes Any% Speedrun
hilariously presents the pain of using Kubernetes and gives the basic
steps for getting a deployment up and running.
A Gentle introduction to Kubernetes with more than just the basics
is a Git README tutorial with clear steps for how to get started running
a Kubernetes cluster.
Anatomy of my Kubernetes Cluster
shows how one developer created their own Raspberry Pi cluster that could
run Kubernetes to learn more about how it works.
The cult of Kubernetes
is a hilarious rant that also manages to teach the reader a lot about how to
avoid some big issues the author ran into while working with Kubernetes for
simple starter projects.
Kubernetes by Example
provides the
commands and code for you to get started with the core Kubernetes concepts.
Your instant Kubernetes cluster
provide a concise set of instructions for setting up a cluster.
A tutorial introduction to Kubernetes
covers a bunch of introductory steps using an example Python application.
An Example Of Real Kubernetes: Bitnami
gives instructions for what to do after you have finished creating
a Kubernetes cluster and learned the "Hello, World!"-style example.
Kubernetes Production Patterns
is a tutorial with good and bad practices so you can learn what to do
and what to avoid in your Kubernetes infrastructure.
Django Production Deployment on GCP with Kubernetes
uses Helm to make it easier to deploy the example
Django
web app with a
PostgreSQL
backend.
K8s YAML Alternative: Python
shows how you can use Python scripts instead of YAML to configure
your Kubernetes clusters.
What do you want to learn next about Python deployments?
I've built a Python web app, now how do I deploy it?
Can I automate testing and deployments for my app?
How do I log errors that occur in my application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Kubernetes
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

AWS Lambda - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
AWS Lambda
Amazon Web Services (AWS) Lambda
is a compute service that executes arbitrary Python code in response
to developer-defined AWS events, such as inbound API calls or file
uploads to
AWS' Simple Storage Service (S3)
.
Why is Lambda useful?
Lambda is often used as a "serverless" compute architecture, which
allows developers to upload their Python code instead of spinning and
configuring servers, deploying their code and scaling based on traffic.
Lambda is an implementation of the
serverless
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
Python on AWS Lambda
Lambda only had support for JavaScript, specifically Node.JS, when it was
first released in late 2014. Python 2 developers were welcomed to the
platform less than a year after its release, in October 2015. Lambda now
has support for both Python 2.7, 3.6 and 3.7.
Python-specific AWS Lambda resources
Serverless Slash Commands with Python
shows how to use the
Slack
API to build
slash
commands
that run with an AWS Lambda backend.
Zappa
is a serverless framework
for deploying Python web applications. It's a really slick project
and used even by internal AWS developers for their own application
deployments.
How to Setup a Serverless URL Shortener With API Gateway Lambda and DynamoDB on AWS
builds a non-trivial URL shortener application as an example Python
application that runs on Lambda.
How we built Hamiltix.net for less than $1 a month on AWS
walks through setting up a full website that runs on AWS and scales
with the Lambda free tier to minimize spend despite large traffic spikes.
Deploying a serverless Flask app to AWS Lambda using Zappa
provides a screen capture of one developer deploying their
application to Lambda.
Building Scikit-Learn For AWS Lambda
follows up on the
Using Scikit-Learn In AWS Lambda
post which shows how to perform scientific computing with Python
packages on AWS Lambda.
Creating Serverless Functions with Python and AWS Lambda
explains how to use the
Serverless framework
to build Python applications that can be deployed to AWS Lambda.
Code Evaluation With AWS Lambda and API Gateway
shows how to develop a code evaluation API, to execute arbitrary code, with AWS Lambda and API Gateway.
General AWS Lambda resources
Getting started with serverless on AWS
is a wonderful tutorials, example projects and additional resources
guide created by a developer who used all of these bits to learn
AWS services herself.
Security Overview of AWS Lambda
(PDF file) covers their "Shared Responsibility Model" for security and
compliance. Although the paper bills itself as an in-depth look at
AWS Lambda security it is really more of a high-level overview, but still
worth the read.
Reverse engineering AWS Lambda
is an incredible, in-depth analysis of the author's work investigating
the black box of how Lambda works and what he learned from it.
The
AWS Lambda tag
on the official AWS blog contains all the related first-party tutorials
Serverless Cost Calculator
estimates
the amount that AWS would charge based on Lambda exeuctions,
average execution time and memory needed per execution.
Serverless at Nordstrom
is an awesome real-world story with the architecture behind a serverless
AWS Lambda application deployment at Nordstrom.
How was your experience with AWS Lambda in production?
has a good discussion of some of the benefits and issues that developers
had as of mid-2017 with using Lambda for production applications.
Passwordless database authentication for AWS Lambda
shows how to use a MySQL backend from your Lambda functions.
How does language, memory and package size affect cold starts of AWS Lambda?
investigates the performance implications of various Lambda settings.
Best Practices for AWS Lambda Timeouts
explains some of the current hard upper limits on AWS timeouts, such
as 5 minutes for Lambdas, when explicitly set that high, as well as
29 seconds for API Gatway requests. There is also good advice on
how the circuit breaker pattern should be applied to your Lambdas
and ultimately why low time outs are likely the best way to go to
prevent your application from becoming entirely unresponsive.
X-rays for Flask and Django Serverless Applications
is an instrumentation, monitoring and debugging service built into AWS
Lambda specifically for Python
web frameworks
running on the service.
Cutting Through the Layers: AWS Lambda Layers Explained
explains how AWS Lambda now offer a "Bring Your Own Runtime" by exposing
the layers that were previously controlled exclusively by Amazon. There
is an overview of the layers and why they matter for customizing your
functions.
What's next after learning about AWS Lambda?
I want to learn how to code a Python web application using a framework.
What is Docker and how does it fit with Python deployments?
How do I create an API for my web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» AWS Lambda
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Azure Functions - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Azure Functions
Azure Functions
is a compute service created by Microsoft that can execute Python code in
response to pre-defined events, such as API calls or database transactions
in other Azure services.
Azure Functions is an implementation of the
serverless
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
Azure Functions resources
An introduction to Azure Functions
is the official quickstart guide by Microsoft and has some good high-level
information on their platform's services as well.
Deploy Python to Azure Functions
provides the step-by-step instructions needed to get Python code running
on Azure Functions.
Azure Functions vs AWS Lambda â Scaling Face Off
contains metrics from comparing AWS Lambda with Azure Functions in
response time, user load, requests per second and error rate
over various periods of time.
How to build a serverless report server with Azure Functions and SendGrid
combines the
Sendgrid email API
with some
configuration code to have Azure Functions kick off email jobs.
azure-cli
are the command line
tools for using all of Azure, not just Functions.
My (Rough) Start with Azure Functions
painstakingly details signing up for Azure, accessing Functions and
finally coding a Function. The author has some really great points on
what is confusing to newcomers that hopefully will be addressed
as Microsoft continues to work on their Azure platform.
What do you want to learn about next?
I want to learn how to code a Python web application using a framework.
What is Docker and how does it fit with Python deployments?
Tell me about standard relational databases.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Azure Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Google Cloud Functions - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Google Cloud Functions
Google Cloud Functions
is a
serverless
compute service that executes arbitrary
code. However, at this time Google Cloud Functions is a beta service that
does not work with Python.
Amazon Web Services (AWS) Lambda
is currently a good
alternative until Google Cloud Functions supports Python.
The Google Cloud Functions service is an implementation of the
serverless
concept. Learn how these pieces fit together in the
deployment
chapter or view the
table of contents
for all topics.
Google Cloud Functions resources
Serverless Cost Calculator
estimates
the amount that AWS would charge based on Lambda exeuctions,
average execution time and memory needed per execution.
Microsoft Azure Functions vs. Google Cloud Functions vs. AWS Lambda
gives an overview of these three serverless cloud platforms and
compares their current capabilities.
Getting Started With Google Cloud Functions and MongoDB
explains how to connect a
Google Cloud Function
to a persistent
MongoDB
data store.
Running End to End tests as Google Cloud Functions
provides the code and a walkthrough for running a headless Chrome
instance in a serverless Cloud Function to perform browser-based tests.
What's next after Google Cloud Functions?
I want to learn how to code a Python web application using a framework.
What is Docker and how does it fit with Python deployments?
How do I create an API for my web application?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
Hosting
Servers
Static Content
CDNs
Virtual Private Servers
Linode
DigitalOcean
Lightsail
Platform-as-a-Service
Heroku
PythonAnywhere
AWS CodeStar
Operating Systems
Ubuntu
macOS
Windows
FreeBSD
Web Servers
Apache HTTP Server
Nginx
Caddy
WSGI Servers
Green Unicorn (Gunicorn)
mod_wsgi
uWSGI
Continuous Integration
Jenkins
GoCD
Configuration Management
Ansible
Salt
Containers
Docker
Kubernetes
Serverless
AWS Lambda
Azure Functions
Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
» Google Cloud Functions
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Datadog - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Datadog
Datadog
is a hosted
monitoring
service that can be used with
Python
web applications
to catch
and report errors.
Datadog resources
Monitoring Django performance with Datadog
is a fantastic, detailed walk through for integrating this service
with
Django web applications
.
Python log collection
provides a framework-agnostic explanation for how to use the service
with Python code.
Monitoring Flask apps with Datadog
walks through adding Datadog to a
Flask
application.
What topic would you like to learn about now?
I want to learn more about app users via web analytics.
I want to learn how to code a Python web application using a framework.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Datadog
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Prometheus - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Prometheus
Prometheus
(
source code
) is an open
source
monitoring
tool that can be used to instrument
and report on Python
web applications
.
Prometheus resources
Prometheus-Basics
is a newbie's introduction to this tool. It covers what Prometheus
is, the tool's architecture, types of metrics and contains a
walkthrough of how to get it configured.
This primer on
Prometheus
walks through installation, configuration and metrics collection.
Monitoring synchronous Python web apps with Prometheus
and its
asynchronous monitoring
counterpart are two tutorials that show how to add middleware
to your web apps that allows Prometheus metrics collection.
Monitoring with Prometheus
provides an overview of the tool and explains how to combine it
with
Grafana
to visualize the metrics
that are collected.
Monitor your applications with Prometheus
is a getting started guide with a walkthrough of how to instrument
a simple Golang application.
Custom Application Metrics with Django, Prometheus, and Kubernetes
shows how to handle the initial configuration with
django-prometheus
,
deploys the
Django
web app using
Helm
and configures Prometheus to scrape metrics
from the application running on Kubernetes.
A gentle introduction to the wonderful world of metrics
has a quick summary that compares Prometheus with Nagios, then digs
into the logging format and what you can visualize with this tool.
From Graphite to Prometheus
explains some of the differences between using a StatsD / Graphite
monitoring stack and Prometheus, such as how Prometheus scrapes data
instead of the applications pushing data to a metrics aggregator,
and the query languages for each tool.
What topic do you want to learn about next?
I want to learn how to code a Python web application using a framework.
I want to learn more about app users via web analytics.
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Prometheus
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Rollbar - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Rollbar
Rollbar
is a hosted monitoring service that can be
used with Python
web applications
to catch and
report errors.
Rollbar resources
Rollbar monitoring of Celery in a Django app
covers the
Celery
task queue
and how to
discover issues that happen in asynchronous worker processes.
How to Add Hosted Monitoring to Flask Web Applications
adds Rollbar's error tracking to a
Flask
web application.
How to Monitor Python Web Applications
uses the
Bottle
web application framework
to show how hosted
monitoring can be added to a Python web application.
The official
Rollbar Python docs
have tons of great integration examples for various Python
web frameworks
.
What topic do you want to learn next?
I want to learn more about app users via web analytics.
How do I automate server configuration and deployments?
What are web application programming interfaces (APIs)?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Rollbar
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Sentry - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Sentry
Sentry is an open source monitoring project as well as a service that can be used to report errors in Python web apps.
Sentry
is a
monitoring
service that you can set up to host yourself or used as a service to
catch and report errors in your Python
web applications
.
Sentry resources
Sentry's
official Python docs
explain how to integrate the SDK into an application to send events to
either your own server or the hosted service.
Sentry For Data: Error Monitoring with PySpark
shows an integration between the PySpark data analysis tool and
Sentry for handling any issues.
What programming topic would you like to learn after Sentry?
What are web application programming interfaces (APIs)?
I want to learn how to code a Python web application using a framework.
I want to learn more about app users via web analytics.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Sentry
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Logging - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Logging
Logging saves output such as errors, warnings and event information to
persistent storage for debugging purposes.
Why is logging important?
Runtime exceptions that prevent code from running are important to log to
investigate and fix the source of the problems. Informational and debugging
logging also helps to understand how the application is performing even if
code is working as intended.
Logging levels
Logging is often grouped into several categories:
Information
Debug
Warning
Error
Logging errors that occur while a web framework is running is crucial to
understanding how your application is performing.
Logging aggregators
When you are running your application on several servers, it is helpful
to have a monitoring tool called a "logging aggregator". You can configure
your application to forward your system and application logs to one location
that provides tools for viewing, searching, and monitoring logging events
across your cluster.
Another advantage of log aggregation tools is they allow you to set up
custom alerts and alarms so you can get notified when error rates breach a
certain threshold.
Open source log aggregators
Sentry
started as a Django-only
exception handling service but now has separate logging clients to cover
almost all major languages and frameworks. It still works really well for
Python-powered web applications and is often used in conjunction with other
monitoring tools.
Raven
is open
source Python client for Sentry.
Graylog2
provides a central server for log
aggregation as well as a GUI for browsing and searching through log events.
There are libraries for most major languages, including python. Saves data
in Elasticache.
Logstash
.
Similar to Graylog2, logstash offers features to programmatically
configure log data workflows.
Scribe
A project written by Facebook
to aggregate logs. It's designed to run on multiple servers and scale with
the rest of your cluster. Uses the Thrift messaging format so it can be
used with any language.
Hosted logging services
Loggly
is a third party cloud based
application that aggregates logs. They have instructions for every major
language, including python. It includes email alerting on custom searches.
Splunk
offers third party cloud and self
hosted solutions for event aggregation. It excels at searching and data
mining any text based data.
Papertrail
is similar to both
Loggly and Splunk and provides integration with S3 for long term storage.
Raygun
logs errors and provides immediate notification
when issues arise.
Scalyr
provides log aggregation, dashboards,
alerts and search in a user interface on top of standard logs.
There is a
hosted version of Sentry
in case you do not have the time to set up the open source project yourself.
Logging resources
This
intro to logging
presents the Python logging module and how to use it.
Understanding Python's logging module
clears up some misconceptions about how pattern matching with logging
hierarchies works and provides a few clear diagrams to visually explain
logging handlers.
Logging Cookbook
contains useful code snippets to easily add logging to your own applications.
Logging in Python
explains
the logging module in the Python standard library, configuration
settings, handlers and how to log data.
A Brief Digression About Logging
is a short post that gets Python logging up and running quickly.
Taking the pain out of Python logging
provides a logging set up with uWSGI.
Good logging practice in Python
shows how to use the standard library to log data from your application.
Definitely worth a read as most applications do not log nearly enough
output to help debugging when things go wrong, or to determine if something
is going wrong.
Structured Logging: The Best Friend Youâll Want When Things Go Wrong
explains how Grab (a large ridesharing platform in Asia) uses
structured logging to reduce Mean Time To Resolve (MTTR) and how they
arranged their log levels to support their scale.
How to collect, customize, and centralize Python logs
covers the standard library
logging
module and how to configure
it for various ways you are likely to use it with one or more
Python applications.
A guide to logging in Python
has some clear, simple diagrams to explain how logging works in Python
applications.
Django Logging, the Right Way
covers a few Python logging techniques and then goes into how you use them
with your
Django
projects.
Django's 1.3 release brought unified logging into project configurations.
This
post shows how to set up logging
in a project's settings.py file. Caktus Group also has a nice tutorial on
central logging with graypy and Graylog2
.
Django Logging Configuration: How the Default Settings Interfere with Yours
explains a problem with the default Django logging configuration and what
to do about in your project.
The Pythonic Guide To Logging
provides a quick introduction to log levels in Python code.
Exceptional Logging of Exceptions in Python
shows how to log errors more accurately to pinpoint the problem instead of
receiving generic exceptions in your logs.
Python and Django logging in plain English
is a wonderful overview of how to configure logging in
Django
projects.
Logging learning checklist
Read how to integrate logging into your web application framework.
Ensure errors and anomalous results are logged. While these logs can be
stored in
monitoring
solutions, it's best to have your
own log storage location to debug issues as they arise to complement other
monitoring systems.
Integrate logging for system events you may need to use for debugging
purposes later. For example, you may want to know the return values on
functions when they are above a certain threshold.
What's next after setting up logging for your app?
What tools exist for monitoring a deployed web app?
I want to learn more about app users via web analytics.
What can I do to mitigate security vulnerability in my web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Logging
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Caching - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Caching
Caching can reduce the load on servers by storing the results of common
operations and serving the precomputed answers to clients.
For example, instead of retrieving data from database tables that rarely
change, you can store the values in-memory. Retrieving values from an
in-memory location is far faster than retrieving them from a database (which
stores them on a persistent disk like a hard drive.) When the cached values
change the system can invalidate the cache and re-retrieve the updated values
for future requests.
A cache can be created for multiple layers of the stack.
Caching backends
memcached
is a common in-memory caching system.
Redis
is a key-value in-memory data store that can
easily be configured for caching with libraries such as
django-redis-cache
and the similarly-named, but separate project
django-redis
.
Caching resources
Caching at Reddit
is a wonderful in-depth post that goes into detail on how they handle
caching their Python web app for
billions of pageviews each month
.
"
Caching: Varnish or Nginx?
"
reviews some considerations such as SSL and SPDY support when choosing
reverse proxy Nginx or Varnish.
Caching is Hard, Draw me a Picture
has diagrams of how web request caching layers work. The post is relevant
reading even though the author is describing his Microsoft code as the
impetus for writing the content.
Caching at Reddit
covers monitoring, tuning and scaling for the very high scale
Reddit.com
website.
Caching learning checklist
Analyze your web application for the slowest parts. It's likely there are
complex database queries that can be precomputed and stored in an in-memory
data store.
Leverage your existing in-memory data store already used for session data
to cache the results of those complex database queries. A
task queue
can often be used to precompute the results
on a regular basis and save them in the data store.
Incorporate a cache invalidation scheme so the precomputed results remain
accurate when served up to the user.
What do you want to learn next for your deployment?
How do I execute code outside the HTTP request-response cycle?
I want to learn more about app users via web analytics.
What can I do to mitigate security vulnerability in my web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Caching
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Web Analytics - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Web Analytics
Web analytics involves collecting, processing, visualizing web data to enable
critical thinking about how users interact with a web application.
Why is web analytics important?
User clients, especially web browsers, generate significant data while users
read and interact with webpages. The data provides insight into
how visitors use the site and why they stay or leave. The key concept to
analytics is
learning
about your users so you can improve your web
application to better suit their needs.
Web analytics concepts
It's easy to get overwhelmed at both the number of analytics services and
the numerous types of data points collected. Focus on just a handful of
metrics when you're just starting out. As your application scales and you
understand more about your users add additional analytics services
to gain further insight into their behavior with advanced visualizations such
as heatmaps and action funnels.
User funnels
If your application is
selling a product or service you can ultimately build a
user funnel
(often called "sales funnel" prior to a user becoming a customer)
to better understand why people buy or don't buy what you're selling. With
a funnel you can visualize drop-off points where visitors leave your
application before taking some action, such as purchasing your service.
Open source web analytics projects
Matoma
(formerly Piwik), is a web analytics
platform that you can host yourself. Matoma is a solid choice if you
cannot use Google Analytics or want to customize your own web analytics
software.
Shynet
is a lightweight, privacy-friendly
cookie-free web analytics application written in Python.
Open Web Analytics
is another
self-hosted platform that integrates through a JavaScript snippet that
tracks users' interactions with the webpage.
Hosted web analytics services
Google Analytics
is a widely used
free analytics tool for website traffic.
Clicky
provides real-time analytics comparable to
Google Analytics' real-time dashboard.
MixPanel
's analytics platform focuses on mobile
and sales funnel metrics. A developer builds what data points need to be
collected into the server side or client side code. MixPanel captures that
data and provides metrics and visualizations based on the data.
Heap
is a recently founded analytics service
with a free introductory tier to get started.
CrazyEgg
is tool for understanding a
user's focus while using a website based on heatmaps generated from mouse
movements.
Python-specific web analytics resources
Building an Analytics App with Flask
is a detailed walkthrough for collecting and analyzing webpage
analytics with your own Flask app.
Build a Google Analytics Slack Bot with Python
explains how to connect the Google Analytics API to a
Slack
bot, with all the code in Python, so you can query for Google Analytics
data from your Slack channels.
Automating web analytics through Python
is a tutorial for interacting with your Google Analytics data using
pandas
and related
data analysis
tools.
The official
Google Analytics Python quickstart
isn't really the easiest tutorial to follow due to all of the configuration
required to make your first API call, but it is still the right place to go
to get started.
How Accurately Can Prophet Project Website Traffic?
uses the data forecasting tool
Prophet
to see if it is possible
to predict future trends in website traffic based on historical data.
General web analytics resources
The Google Analytics Setup I Use on Every Site I Build
is a tutorial written for developers to better understand the scope
of what Google Analytics can tell you about your site and how
to configure it for better output.
Roll your own analytics
shows you how to use
AWS Lambda
and some custom
JavaScript to create your own replacement for Google Analytics. This route
is not for everyone but it is really useful if you want to avoid the Google
data trap.
An Analytics Primer for Developers
by Mozilla explains what to track, choosing an analytics platform and how
to serve up the analytics JavaScript asynchronously.
Options for Hosting Your Own Non-JavaScript-Based Analytics
has a few non-Google Analytics web analytics tools that mostly rely
on server-side rather than client-side tracking.
This post provides context for determining if a given metric is
"vanity" or actionable
.
This series on measuring your technical content has a bunch of advice
for figuring out why you want to gather metrics, how to do the
instrumentation and determining your success factors.
Part 1 covers "why"
Part 2 examines success factors
Part 3 digs further into measurement
awesome-analytics
aggregates analytics tools for both web and mobile applications.
10 red flags signaling your analytics program will fail
is a more business-focused piece but it has sosme good information and
visualization on broader themes that developers who work in larger
organizations should think about when it comes to analytics.
Web analytics learning checklist
Add Google Analytics or Matoma to your application. Both are free and while
Matoma is not as powerful as Google Analytics you can self-host the
application which is the only option in many environments.
Think critically about the factors that will make your application
successful. These factors will vary based on whether it's an internal
enterprise
app, an e-commerce site or an
information-based application.
Add metrics generated from your web traffic based on the factors that
drive your application's success. You can add these metrics with either
some custom code or with a hosted web analytics service.
Continuously reevaluate whether the metrics you've chosen are still the
appropriate ones defining your application's success. Improve and refine
the metrics generated by the web analytics as necessary.
What do you want to learn about next?
What tools exist for monitoring a deployed web app?
What is Docker and how does it fit with Python deployments?
What can I do to mitigate security vulnerability in my web app?
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Monitoring
Datadog
Prometheus
Rollbar
Sentry
Web App Performance
Caching
Logging
Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Web Analytics
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Changelog - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Changelog
Here are the high-level changes to Full Stack Python in reverse
chronological order since its inception in December 2012. You can
view commit-level changes via the
source repository's commit log
on GitHub.
2022
October
Starting to get back into updating this site again! Note that I'll probably
spend most of my side project time on
Plushcap
but I'm removing old resources and adding new good ones on here to keep the
site maintained.
March
I decided to go so minimal that I removed the logo to make the site load
faster, and also got rid of some unncessary CSS on front page.
February
Still on break, but updated the header and footer. Also made some website
tweaks to make it faster.
2021
October
Taking a break for a few months to recharge and work on a different coding
side project that I'm excited about. Be back in a few months with some updates.
September
Clean up continues across the site to remove link rot and replace
out-of-date links with newer ones where necessary.
August
New blog post on
Application Performance Monitoring AWS Lambda Functions with Sentry
.
June
Fix broken links across the site. It's a real shame people and companies don't use
301 redirects more often rather than just breaking their URL structures.
May
New resources on
GPT-3
,
Jupyter Notebook
and
serverless
pages.
April
Published new post on
How to Monitor Python Functions on AWS Lambda with Sentry
.
New
SQLite
resource.
March
New
webhook
resource.
February
New
GPT-3
resources.
January
Published a new blog post on
Using Django & AssemblyAI for More Accurate Twilio Call Transcriptions
.
Updated
Flask extension projects and example code
.
Happy New Year!
2020
December
New
Bash
,
tmux
and
Vim
resources and explanations.
November
New resources for
DevOps
and
containers
.
October
Added new blog on
Higher Accuracy Twilio Voice Transcriptions with Python and Flask
.
New
NumPy
resources.
September
Tweaks across
Flask code examples
.
August
New blog posts on
How to Transcribe Speech Recordings into Text with Python
and
Using Sentry to Handle Python Exceptions in Django Projects
.
Added new
GPT-3 page
.
Updated
debugging
page with some additional descriptions.
July
Updated
webhooks
page with additional resources.
New blog posts:
Tracking Daily User Data in Django with django-user-visit
Quickly Use Bootstrap 4 in a Django Template with a CDN
How to report errors in Flask web apps with Sentry
June
Added new example code for
Django
modules:
django.contrib.admin.helpers
ActionForm
,
and
AdminForm
django.contrib.admin.options
IS_POPUP_VAR
,
IncorrectLookupParameters
,
ModelAdmin
,
and
csrf_protect_m
django.contrib.admin.sites
NotRegistered
and
site
django.core
cache
,
checks
,
exceptions
,
mail
,
management
,
serializers
,
signals
,
signing
,
and
validators
django.utils.translation
LANGUAGE_SESSION_KEY
,
activate
,
deactivate_all
,
get_language
,
get_language_from_request
,
gettext
,
gettext_lazy
,
ngettext
,
override
,
pgettext
,
pgettext_lazy
,
ugettext
,
ugettext_lazy
,
ungettex
,
and
ungettext_lazy
Added new example code pages for Flask modules:
flask.blueprints
Blueprint
flask.ctx
after_this_request
,
has_app_context
and
has_request_context
flask.globals
current_app
flask.helpers
send_file
flask.json
JSONEncoder
flask.sessions
BadSignature
and
SessionMixin
May
Added new example code pages for Flask modules:
flask.cli
FlaskGroup
,
ScriptInfo
, and
with_appcontext
flask.globals
request
and
session
flask.helpers
flask
,
make_response
, and
url_for
flask.sessions
SessionInterface
flask.signals
Namespace
flask.templating
render_template
flask.views
MethodView
,
View
, and
http_method_funcs
New blog post on
Reporting Exceptions in Python Scripts with Sentry
.
Tweaked some CSS for the site.
Added a new page with the start of
pandas example code and projects
.
April
Merge
PR #233
and
PR #235
for new
Celery
and
podcast
resources.
Updated the
web design
page with new resources.
March
Added another new blog post on
Exporting pandas DataFrames into SQLite with SQLAlchemy
.
Added new blog post tutorial on
Learning pandas by Exploring COVID-19 Data
.
New
web design
and
web development
resources.
Added new blog post on
The Best Resources for Developers to Learn Finance
.
February
New
CSS
,
task queue
and
uWSGI
resources.
Added new Django code example pages:
django.forms DateField
django.forms DateTimeField
django.forms TypedChoiceField
January
Added new Django code example pages:
django.db.models SmallIntegerField
django.urls.exceptions Resolver404
Added starter pages for the remaining topics in the table of contents
that were previously missing. Still working on adding more resources and
descriptions to each page:
Datadog
GoCD
Salt
Sentry
Happy New Year (and decade) to my fellow Python developers!
2019
December
7 years of Full Stack Python as of December 23, 2019!
Cleaned a bunch of dead links out thanks to
PR #225
.
Merged
PR #224
with information and resources on the Masonite web framework for the
other web frameworks
page.
Updated the
RQ
page with a couple of new fresh
resources.
Added new Django code example pages:
django.db.models GenericIPAddressField
django.db.models ImageField
django.db.models PositiveIntegerField
django.db.models PositiveSmallIntegerField
django.db.models.related ForeignKey
django.forms EmailField
django.forms IntegerField
November
Added new resources to
RQ
,
Sanic
and
networking
pages.
Added new Django code example pages:
django.forms BooleanField
django.forms CharField
django.forms ChoiceField
October
Removed a bunch of outdated content from the
best Python resources
page and
added some nice new links to the mix.
Published a new blog post tutorial on the
String Data Type in Python 3
.
Added new Django code example pages:
django.db.models FileField
django.db.models SlugField
Updated code examples on the following pages:
django.db.models TextField
Rewrote some parts of the
Python 2 or 3
page to
make it more clear that 3 is now the mandatory way to get started.
Updated
best videos
page with new EuroPython links.
September
Added new Django code example pages:
django.apps.config AppConfig
django.contrib.admin.sites register
django.db OperationalError
django.db.models AutoField
django.db.models DateField
django.db.models IntegerField
django.http HttpResponse
django.http HttpResponseBadRequest
django.http HttpResponseForbidden
django.http HttpResponseNotModified
django.http HttpResponseRedirect
django.template.response TemplateResponse
django.template.response SimpleTemplateResponse
django.urls reverse_lazy
August
Added stub page for
mod_wsgi
.
Merged
PR #215
to fix a typo on the
serverless
page. Thanks
Kyle
!
Added new
Flask
code examples:
flask request
flask redirect
Added new
Django
code examples pages:
django.contrib.auth get_user_model
django.contrib.auth.decorators login_required
django.contrib.auth.hashers make_password
django.http Http404
django.http.responses HttpResponsePermanentRedirect
django.urls.exceptions NoReverseMatch
Updated code examples on the following pages:
django.contrib admin
django.db.models DateTimeField
django.utils timezone
July
Pushed the
3000th commit
to Full Stack Python, a bit over 3 years after the
2000th commit
and 5ish years after the
1000th commit
. Here's to the next 1,000 commits!
New blog post with slides and a loose transcript of my latest talk on
Developer-led sales for tech startups
.
June
Added a new page for
Django BaseCommand code examples
.
Started new open source code examples series, beginning with
url
and
path
functions.
May
Added new
data visualization
,
web design
and
pandas
resources.
Updated the subnav with a link to
deploypython.com
and added a bunch of new resources across pages on the site.
Rearrange parts of the
app dependencies
page to make it easier to read.
Fix typos and broken internal links on site.
April
Added new
web frameworks
,
d3.js
and
Django REST framework
resources.
New
Stripe API
resources.
March
Added new resources across the site and merged
PR #206
with a new
Heroku
page link.
New resources on the
web analytics
page.
February
Added a ton of resources on the
Kubernetes
page.
Removed many broken links thanks to
pull request #205
.
Thanks again
Sam
!
Add
uWSGI
page with a few initial resources.
Updated the
Neo4j
and
microservices
pages with more resources.
Added a bunch more
bots
resources.
New
data
and
data analysis
resources
added.
Refreshed the
relational databases
page with new
resources and removed some out-of-date ones.
January
Merged
PR #202
to fix a typo on the
web frameworks
page.
Updated the
source control
page with more
resources.
Added new post on the
Introduction to Ansible video course launch
.
Cleaned up a bunch of broken links thanks to
pull request #198
.
Thanks again
Sam
!
Added new
MongoDB
resources.
Updated the
Docker
page with new resources, removed old ones and
added new descriptions to sections.
Happy New Year!
2018
December
Added a ton of new resources and descriptions on the
Cassandra
page.
6 years of Full Stack Python as of December 23, 2018!
Updated
SQLAlchemy
,
NoSQL
,
MongoDB
and
Slack API
pages with
new descriptions and resources.
Updated the
serverless
,
operating systems
and
HTTPS
pages with a bunch of new resources.
November
Updated the
logging
,
Redis
and
PaaS
pages with a bunch of new resources.
Updated the
web design
page with new resources.
Updated the
data visualization
page with
new resources.
October
Added new blog post on
Adding Okta Authentication to an Existing Flask Web App
.
Sent out a
quick email newsletter update
about new recent tutorials on the blog.
Added a bunch of new
testing
page resources.
Published new post on
How to Provision Ubuntu 18.04 LTS Linux Servers on DigitalOcean
.
Published a new blog post showing
How to Add User Authentication to Flask Apps with Okta
.
Merge
PR #189
to help readers figure out how to get around some security warning issues
that could come up in the
Slack bot tutorial
.
Added even more new
debugging
tutorials and split
pdb tutorials into their own section.
September
A ton of new tools and links on the
debugging
page.
Added a starter
Django REST Framework
page.
New
web app security
,
task queue
and
WebRTC
resources.
Added a bunch of new resources across the site and removed a few out of
date ones as well.
Added initial pages for
WebRTC
and JavaScript frameworks.
More resources coming to those pages soon.
August
Merged
PR #184
to remove link rot issues. Thanks again
Sam
!
New
RQ
and
code metrics
resources.
Updated the
Celery
page with a ton of new great
resources and broke them into new subsections for general resources,
frameworks and deployments.
Tons of new
code metrics
,
Lektor
,
Pyramid
and
Sanic
resources.
Added new
Git
and
Jinja
resources.
Merged
PR #182
that updated the
Ubuntu SSH Keys post
with the
-o
flag that mitigates an encryption vulnerability.
Fixed
issue #181
that identified a broken link on the
Twilio
page.
New
Markdown
resources.
July
Added a bunch of new
PyCharm
resources.
Merged
PR #177
that adds a new
Docker
Swarm tutorial.
Merged
PR #176
to update the
Django
page by removing some old links and
adding newer ones.
New section on
source control
page and resources
for mono vs multi repo debate.
Added a new section and additional
Vim
links.
Added even more
Emacs
resources and a new section for Elisp
resources, the programming language used to customize the editor.
June
Added new
Emacs
resources and descriptions.
Merged
PR #175
to fix changed URLs on
data analysis page
where the
authors did not use 301 redirects to the new pages. Thank you
mbanerjeepalmer
!
Major updates on
development environments
and
text editors and IDEs
pages.
New resources on the
operating systems
and
development environments
pages.
New blog post on how to
Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS
.
New
d3.js
resources.
Merged
PR #173
for new
Git
page section. Modified wording a bit from original
pull request. Thanks
Sam
!
Add even more descriptions and resources to the
Python companies
page.
Fix
issue #172
where Atom and RSS feeds did not have
/blog/
in the URLs so they were
pointing to incorrect (broken) article locations.
Further work on
companies using Python
page.
May
Merged
PR #169
that cuts down on redirects to the new PyPI site. Thank you Sam!
Merged
PR #168
,
which contained links to a great blog post on
Flask
by
TestDriven.io
.
New blog post on
How to (Appropriately) Explain Your Product to Software Developers
that is based on a talk I gave in Silicon Valley.
Added a bunch of great
podcast
episodes
to that page.
Merged
PR #166
and
PR #167
to
update the URL scanning script as well as remove all 404 links. Thanks Sam!
New blog post on
How to Add Maps to Django Web App Projects with Mapbox
.
Updated with a slew of new
serverless
,
static site generators
,
Bokeh
and
community
resources.
Major update to
Python 2 or 3
page with better
explanations that match community opinions in 2018 (originally page was
written in 2016 and descriptions were not heavily modified enough since
then), along with a slew of new migration resources.
Added
newsletter on PyCon US 2018
.
New
podcast
resources.
Merge
pull request #164
with a new
task queues
resource.
April
New blog post on adding
Rollbar
for
Monitoring Python 3.6 Functions on AWS Lambda
.
New
TurboGears
web framework page via
pull request #162
.
Thank you
Alessandro
!
A slew of new resources and descriptions for the
Jupyter Notebook
page.
Reworking
web development
page with new
descriptions and resources.
Major updates to
Flask
resources, example code and
descriptions.
More broken or expired link clean up.
March
Fixed up a slew of link rot across the site.
New resources on the
Pelican
static site generator
page.
Added starter pages for
localhost tunnels
,
virtual environments (virtualenvs)
,
and
environment variables
.
Revamped the
table of contents / all topics
to match vision for the site.
New resources and explanations added to the
Markdown
page.
New blog post on
Developing Flask Apps in Docker Containers on macOS
.
Merged
pull request #156
to remove a duplicated
Vim
page resource. Thanks
Xurxo
!
New blog post on
ReportLab and Future Community Project Launches
that also went out as an email newsletter for March.
Added new
learning programming
practice
problem sets.
Merged
PR #154
with a new
RQ
resource. Thanks again
Michael
!
February
Merged
PR #153
that removed some out-of-date links and added some new ones to the
Flask
page.
Added a slew of new practice problems and teaching resources on the
Learning Programming
page.
New
WebSockets
resources.
New starter page on
CSS frameworks
and
Foundation CSS
.
New
blog post on adding Rollbar monitoring to Django applications
.
Added new
enterprise Python
resources.
January
Incorporated new data from Stack Overflow and updated programming language
rankings as evidence of reasons for
why to use Python
.
Merged
PR#151
that fixed an issue with the Slack bot and URLs in conversations.
Merged
PR#148
that added a health check script. Fixed all URLs raised as issues with
link rot, expired domains and redirects. Thanks
Samuel
!
Add
Ansible
,
Matplotlib
,
PowerShell
,
tmux
,
Screen
,
Pymux
,
PyCharm
and
terminal multiplexers
starter pages with
a few links, to be fleshed out later.
New
Redis
and
Ubuntu
resources.
Happy New Year! This is the 6th year of Full Stack Python, coming after a
wonderful
first five years
.
2017
December
Passed 1,000,000 characters written on Full Stack Python according to
wc
on my
Markdown
content files. It's a super arbitrary but
fun little milestone.
Removed a couple of
Best Python Resources
and added new resources to the
Morepath
page.
Added a ton of new
SQLite
resources.
Cleaned up broken and redirected links on all pages including blog posts.
Added
5 years of Full Stack Python
retrospective blog post.
Merged
PR#147
to
fix an issue installing
MySQL
server package.
Major performance improvements by reducing all page sizes by 15-20%. Split apart
the CSS, tuned it and minified the classes.
Merged pull request for
How to Build Your First Slack Bot with Python
tutorial from Slack dev advocates because bot building has changed since
I originally wrote the post with custom integrations. Thanks Ankur and Bear!
Added new blog post based on latest email newsletter on
GitPython and new Git tutorials
.
Working on revamping older pages such as
Django
by
eliminating outdated resources and adding the latest and greatest.
Removing
Guide to Deployments
links until the next version is out (estimated Spring 2018 after
Ubuntu 18.04 LTS releases).
Crossed the 120k words mark for content, thanks to a slew of new tutorials
and pages.
New
serverless
and
AWS Lambda
resources.
Merged
PR#144
which fixes an issue with the wrong
psql
command in the blog post on
Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04
.
November
New blog post on
First Steps with GitPython
.
Added new
blog post for latest newsletter on "DevOps, Thank You Maintainers and Contributing to Open Source"
.
Cleaned up some unfortunately broken links to websites that now 404.
Merge
PR#143
to create new
Dramatiq
task queue starter page.
New
blog post based on my DevOps, Continuous Delivery... and You talk
with the slides and rough transcript from the sessions.
October
New resources on the
SQLite
and
Vim
pages.
New
shells
,
Bash
and
Zsh
starter pages.
Added blog post version of mid-October email newsletter
PyCon US 2018 CFP, Python Bytes and Pelican
.
New starter page for
Rollbar
as part of the hosted
monitoring services series.
September
New blog post on
Monitoring Python Web Apps
that uses
Bottle
as the example
web framework
with a simple application.
New short blog post showing how to
Provision Ubuntu 16.04 Linux Servers on Linode
.
Added new
minification
and
data analysis
starter pages.
Modifying and favoring links to original sources rather than Medium links
due to their new pop-ups that are really annoying for readers, especially
when you're in the middle of trying to figure out a solution to a coding
problem.
August
Updated subnav with a link to
changelog
.
Added
d3.js
starter page.
Added
responsive design
starter page.
Updated the
Redis
page with loads of new resources.
New
Neo4j
starter page.
Loads of new
Bokeh
resources and some new descriptions.
Split out from the
ORMs
and created
dedicated pages for
Django ORM
,
Pony
and
SQLObject
. Also included
updated resources for each page.
Added new
page statuses
by chapter to make it easier
to track what's being worked on.
Updated
future directions
with more context on
page maturity.
New starter pages for
Companies Using Python
and
Sublime Text
.
New
Python 2 or 3?
resources.
Fixed diagram mistake on
Peewee
ORM page that was
referencing SQLAlchemy instead of Peewee.
July
Added new
Bokeh+Bottle bar charts post
blog post.
Added a way to highlight blog post code changes such as in the new
monitoring Flask apps
post
under the "Handling Errors" section.
Added new blog post on how to
monitor Flask applications
.
Fixed a typo in the
Make Phone Calls in Python
blog post thanks to my
colleague Greg Baugues'
sharp eyes.
June
New blog post on
How to Create Your First Static Site with Pelican and Jinja2
.
Updates to
Twilio
and
Pelican
pages
with more resources.
May
New
Falcon
page to round out web frameworks pages.
Major updates to the
WebSockets page
with new Python
projects, explanations and resources.
New blog post with my answer to the question of
How to become a successful self-taught professional software developer
.
New very short stub page for
Google Cloud Functions
.
Hopefully they add proper Python support to their platform soon.
April
Updated many existing blog posts with fixes based on reader feedback
and re-ran them to check what changes were needed.
New
Serverless compute
concept page.
Two new blog posts, one for
Python 2.7 on AWS Lambda
and another on
Python 3.6 on AWS Lambda
. Also
added a page for
AWS Lambda
.
Updated
Apache Cassandra page
with a slew of
new general and Python-specific resources.
New
Pelican
resources.
Updated some of the
blog post tutorials
(they are marked
by updated dates) to fix issues with the steps or provide newer versions
of libraries like
Green Unicorn
and operating systems such as
Ubuntu
.
Added new
continuous integration
resources.
New
PostgreSQL
page resources.
March
Pushed the
2000th commit
to Full Stack Python, just under 2 years after the
1000th commit
. Here's to the next 1,000 commits!
Added new
PostgreSQL
and
SQLAlchemy
resources.
New
Git
resources.
Feburary
Add
generating SSH keys on macOS Sierra
blog post.
Removed all external CSS file loads and reduced the CSS for all pages and
posts to the minimum amount required for that specific page.
Major performance improvements across the site by reducing CSS load
and reducing image sizes.
Added blog post on
Creating SSH Keys on Ubuntu Linux 16.04 LTS
.
January
New
Sanic
stub page.
New
Celery
resources.
Added
RQ
stub page.
Broke out
Celery
into its own page and cleaned up
task queue
resources.
Buffed up the number of
MongoDB
resources.
Added more specific web frameworks such as Sanic and Tornado to the
table of contents
. Pages will be created later.
Break out
Jenkins
page from
continuous integration
page origins.
Major update made to the
template engines
page
with a bunch of new resources and explanations.
Added stub
Apache Cassandra
page with a few
resources.
New
Redis
and
MongoDB
pages.
Further work on the
Git
page.
New
Git
page.
New resources and descriptions on the
development environments
page.
New
static site generator
resources added.
Added new resources to the
Python 2 or 3?
page.
Fixed all 404 link rot on every page. However, if a page has been rewritten
or redirected and is no longer valuable as a link, please
tweet me
or
file an issue ticket on GitHub
.
New
Why Python?
resources.
Happy New Year!
2016
December
Crossed 800,000 readers so far in 2016!
Added a small
MkDocs
page that needs to be expanded.
Updated the
Nginx
page with a better description of reverse
proxies.
Add new
Lektor
page. Will be expanded upon during the
month as I get to use the library.
Merged
PR #111
that fixed some typos on the
Django
page, added clarity to
a Django Channels statement and provided a new Django resource.
November
New blog post on
How to Make Phone Calls in Python
that does not rely on a web framework for HTTP POST responses.
Merge
PR #110
to add the new task queue project Kuyruk to the
task queues
page.
October
Rearranged the individual pages and their meta to match the new
table of contents
.
Upgrades to the
Peewee
page with more descriptions and
resources.
Added new
Peewee ORM
page.
Added new
SQLAlchemy ORM
page.
Updated
all topics / table of contents
page
to show future topics I am working to create.
Added stub page that needs to be expanded for
Python Community
.
New resources on the
DevOps
page.
September
Broke out
Pelican
into its own page and added new content
that was not previously found on the
static website generators
page.
Removed a ton of unnecessary CSS to make page loads faster.
Added new resources to the
Python 2 or 3?
page.
New update to the
Full Stack Python Guide to Deployments book
released!
Updated the
Slack bot tutorial
with a new bit on how to solve a common issue when the bot does not seem
to be responding to
@
mentions due to a missing colon in the input.
New resources on the
static site generators
page focusing on deploying a static site.
August
Added a new blog post on
Dialing Outbound Phone Calls with a Bottle Web App
.
Merged several pull requests such as
#106
which
fixed some bad errors on my part. Pull requests are amazing!
Finished the hugely successful
Python for Entrepreneurs Kickstarter campaign
.
Thank you to everyone who contributed as a backer and supporter! Michael
and I can't wait to get this new video course out to everyone.
Updates with new resources on the
API Creation
and
development environments
pages.
Added a
Twilio API
page to the APIs chapter. May add more
pages that provide Python guidance for using popular APIs like Slack,
Google, Sendgrid, etc.
Updated GitHub username references to
mattmakai
from makaimc (old username).
Additional
Bottle
resources.
New
Vim
resources.
Made a slew of improvements and added more resources to the
Python 2 or 3?
page.
July
New blog post with some background information on the
Python for Entrepreneurs Kickstarter
.
Launched a
Kickstarter with Michael Kennedy to create a Python for Entrepreneurs
video course!
Added new
Why Use Python
resources to that page.
Updated the
NoSQL
page with a couple of new
resources.
June
Added another new blog post, this time on
Setting Up Python 3, Django & Gunicorn on Linux Mint 17.3
.
New blog post for
Configuring Python 3, Pyramid and Gunicorn on Ubuntu
.
Created little images for each of the posts on the
blog post list page
.
Start of new page on
Ubuntu
.
Two new tutorial blog posts:
How to Build Your First Slack Bot with Python
and
Replying to SMS Text Messages with Python and Bottle
.
New
PostgreSQL
monitoring resources.
May
New
SQLite
resources.
Removed or redirected a few broken links on various deployment pages.
One more new blog post tutorial before the month ends:
Responding to SMS Text Messages with Python & Flask
.
Added bunches of new content and links to the
MySQL
page.
Redirected several links that were still available but changed URLs.
Make sure to 301 Redirect your old links that still have traffic! :)
Fixed a few broken and old links throughout the site. Darn link rot.
New blog post published:
How to Use Redis with Python 3 and redis-py on Ubuntu 16.04
.
Added fifth blog post, this time on
Sending MMS Picture Messages with Python
.
Two new tutorial blog posts:
How to Send SMS Text Messages with Python
and
Configuring Python 3, Bottle and Gunicorn for Development on Ubuntu 16.04 LTS
.
Wrote another blog post, this time on
How to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS
.
Wrote a new
blog post
on
Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS
.
Added new resources to the
Vim
and
Emacs
pages.
New
Green Unicorn (Gunicorn)
page added.
Still a bit sparse at the moment but starting to get filled in.
April
Updated the
Nginx
page with a security section.
Added new Channels section to
Django
page.
Clean up on some existing pages to remove broken links.
Added new subnav under the logo and title so readers can more easily
access the
table of contents
.
March
Added new
DevOps
resources.
Removed unfortunate dead links from the
Django
page.
Made a huge improvement to the layout of the full-sized table of contents
that appears on pages that are above 768px wide (the collapsed table of
contents for mobile stays the same).
Began work on an
Apache HTTP Server page
.
Added some new awesome
deployment
resources.
February
Added a new section for
Python images within Docker containers
.
Added a couple of new resources to the
WebSockets
page.
January
Added initial page for
SQLite
that will be built out over
the next few weeks.
Added a couple of new resources to the
ORMs
page.
More resources on the
PostgreSQL page
and now grouped
into Python-specific and general sections.
Major update to
relational databases
page with new
sections and resources.
Updated the
Jinja2
page with new sections and resources.
Also added a new tutorial link on the
Bottle
page.
Added new summaries and links to the
Docker
and
Best Python Resources
pages.
Expanding the
PostgreSQL
page with more detail and
additional resources.
Split the
relational databases
page sections on
PostgreSQL
and
MySQL
out into their
own pages so there is more room to write about the three topics without
making the databases page a behemoth.
Updated the
template engines
page with a new image
to show the spectrum between arbitrary code execution and no logic in templates.
Added a new
Jinja2
page specifically for that template engine.
Happy New Year! Finished 2015 with over 455,000 users according to Google
Analytics. Thanks everyone! Can't wait to write more pages and improve the
existing ones in 2016.
2015
December
Started on a
DevOps
page and began adding basic resources
to it.
Added new section on "Python for specific occupations" to the
best resources page
.
New
web development
resources.
Released the December update to
The Full Stack Python Guide to Deployments
book with additional polish based on reader feedback.
Added new resources to the
API creation
,
comprehensions
and
development environments
pages.
New resources and a new basic page on the
Python programming language itself
.
Added new starter projects to the
Flask
page.
November
Started a new page for
template engines
. Needs some
more writing and resources.
Working on a page for the umbrella
web development
concept, but it's early days as I'm trying to figure out how to be clear
and concise about this broad topic.
Merged
pull request #70
and fixed some other issues that were in tickets.
Made more updates to the static site generators page based on
feedback from folks on the /r/python subreddit
.
Updated the
static site generators
page
with a better explanation of why they are useful.
October
Starting a
microservices
page with some basic
definitions and resources.
Added a new resource to the
Enterprise Python
page.
September
Updated the project templates section on the
Django page
.
Added
API creation
resources.
A new update for
Full Stack Python Guide to Deployments
went out to existing purchasers!
August
Created new pages for
unit testing
and
integration testing
.
Created a new page on
testing
that will be fleshed out
over the next few weeks.
Added new
Django
resources, especially for migrations.
Added new
web app security
resources on
HTTPS.
July
Updated a boatload of pages with typo and grammar fixes while reviewing
everything for the upcoming launch of
the PDF version of FSP contained in the packaged book deal
.
Added the beginnings of a
static site generator page
.
Updated sidebar with links to the new
Full Stack Python Guide to Deployments
ebook.
New resources on the
web frameworks
and
Morepath
pages.
June
New
API Creation
and
Django
resources
added.
Added new Peewee resources on the
ORMs page
.
Nice little update to the
ORMs page
with a diagram showing that different ORMs can work with varying
web frameworks and backends.
Added a new section just for Nginx resources and Removed broken links on
the
web servers
page.
Added a new page on Python
object-relational mappers
, which
helped condense that information on a single page and lighten the loads on
the Django and relational databases pages.
Added new page with a little advice on
learning programming
.
Proofread and tweaked the
web frameworks
page.
Added a new section entitled "Do I have to use a web framework?" to the
web frameworks
page.
Reviewed and updated the
introduction
with slight
modifications.
Added new
Docker
resources.
Made some changes to what is contained in the Markdown files versus the
HTML Jinja2 templates. Behind the scenes work that needed to be done to
move the project forward.
Work continues on the
Full Stack Python Guide to Deployments
book.
May
Got a whole lot of work done on my upcoming
Full Stack Python Guide to Deployments
book.
Very close to releasing it (looking at mid-June).
Added new
Django
resources, especially around migrations
in Django 1.7+.
Worked on making
Why Use Python?
page specific to
that topic now that the
Enterprise Python
page
contains enterprise-y info.
New page on the super broad topic of
Data
with Python.
Eventually it'll link to all sorts of data topics such as analysis,
visualization and processing.
New page on
Enterprise Python
. A bit op-ed-ish
perhaps, but I think it captures some of the spirit of the open source
ecosystem with regards to Python for enterprise software development.
Added additional
Django
resources, specifically related to
testing.
April
Added more
NoSQL resources
, especially ones involving
Redis.
New
Pyramid
resource where the primary author is
interviewed about the web framework.
New
Vim
resources.
Updated the
Django
page with new resources. The page is
getting unwieldy at its current size so I'll likely pare it down with
better categorizes sometime soon.
Added new resources on the
Flask
page.
March
Added new
source control
resources.
Major site performance improvements. I removed font awesome and replaced
icons with SVG elements that mimic the font awesome icons.
Pushed the
1000th commit
to Full Stack Python!
Major update to
Vim
page to add screenshots, a better example
.vimrc configuration and many more resources.
Updated the
web analytics
page with a new
Python-specific section for walkthroughs that are specific to building or
using analytics with Python applications.
Adding a slew of new
Django
resources.
Working on including Crossbar.io and Autobahn to the
websockets
page.
Added the Muffin framework to the
other web frameworks
page.
Added new
Emacs
page based on
pull request #49
base information. Thank you!
Added a new page on
best Python videos
that
breaks out all the videos I had scattered around the site and puts the
best ones in a single place.
Beefing up the Django resources and will soon break them further down
into subcategories so they are easier to find by topic.
February
Cleaned up the sidebar and
email
subscribe messaging.
Added new
monitoring
,
websockets
and
continuous integration
resources.
New
Django
resources.
Updated the
Vim
page with a Vimrc configuration file
explanation along with Vimrc resources.
Added a
generators
page that's mostly a stub that I will
be building out to explain this core language feature.
Updated
table of contents
with new layout that'll
allow me to expand on core Python language topics.
Updated several out of date resources and added a new
logging
resource.
New
Pyramid
resources. I definitely need to flesh that page
out further.
Added a
Vim
page and resources for learning Vim as a Python
code editor.
Reorganized content pages to make for better logical groupings as I add new
content.
Major improvements to
Websockets
page after suggestions
from
issue #47 on GitHub repository
.
January
Rewrote the Mailchimp sign up form for the email list so it doesn't have
the external JQuery libraries as dependencies. Site should be even faster
now.
Stripped a significant portion of unused Bootstrap boilerplate from the CSS
file and minified it. The resulting CSS file is over 100KB less (about
25KB down from 130KB) so the site should load faster now.
Major update to
WebSockets page
with new diagrams
and better explanations for why server push is useful.
New task queue resources.
Major update with the beginning of a page on
Docker
, split
out static file handling resources on the
Django
page
and a new section on Python programming language popularity on the
"Why Use Python?" page.
Working on a
Why Use Python?
page with my own
assessment of the strengths and weaknesses of Python along with links to
resources where other folks discuss their own experiences.
Continuing to add WebSockets resources, especially Python-specific ones.
Added a new separate page for the
Morepath framework
.
Updated the
future directions
page for 2015.
Added new WebSockets resources.
Added
WebSockets
page and some initial resources.
2014
December
Added new security resources and splitting HTTPS resources into their own
section.
Split out Djangular resources into a separate section.
New NoSQL Python client resources.
Added new API resources for integration and creation.
November
Added a nice new continuous integration diagram.
More Django and database resources.
Revising development environments page and adding new resources.
Adding my new Flask blog post on choose your own adventure presentations
along with the open source repository.
More resources under Best Python Resources.
Removing broken links from Best Python Resources and Django pages.
New monitoring and development environments resources.
October
Added the first new page in awhile! All about
development environments
.
Always adding new links to the best resources. More resources for
deployments, web analytics and Flask.
More API creation and consumption resources.
Merged a bunch of pull requests that cleaned up spelling and grammar
errors. Thank you contributors!
Adding new Django 1.7-specific resources section on the Django page.
New web frameworks, Bottle and Flask resources.
September
New resources for Flask, Django and task queues sections.
A few new resources for NoSQL data stores.
August
New interesting link for web framework code complexity visualizations.
Merged pull request that fixed some issues on WSGI page.
Updated table of contents so it's easier to read and broken down by
sections.
Added new
Web Design
page to cleanly separate CSS from
design topics and resources.
New resources for code metrics and NoSQL databases.
Added another Flask open source example app.
Added new
Code Metrics
page.
Updated CI page with more services and open source projects.
Added
Continuous Integration
page.
Splitting out deployment from automation so I can add chapters on continuous
integration, configuration management (which will be moved from the
existing deployment chapter) and related topics.
Small tweaks to NoSQL, introduction and a few other pages.
Moved topics map from introduction page to deployment page.
July
Merged pull request for Django page and updated Django page with project
template section.
New Django example project resources.
Rewrote parts of source control and CSS pages for clarity.
Merged typo fixes PR #32.
Added my Full Stack Python video from the EuroPython 2014 conference.
Updated map with further details.
Added a map to the front page. May move that elsewhere later though based
on feedback.
Merged a pull request for new REST frameworks.
Lots of new Django, Flask and task queue resources.
Added two new Python libraries lists to the Best Python Resources page.
Thanks
Hacker News
for
doubling my traffic so far in 2014! 65k uniques and counting...
June
Added more monitoring and logging resources.
New resources for Flask and NoSQL projects.
Updated NoSQL data store page with specific open source projects.
Added diagram to source control page.
Split version control resources from Git resources. Added new version
control resources.
Updated logging page with better explanations and content ordering.
Added learning checklists for all sections. The remaining sections that now
also have checklists are logging, web analytics and web application security.
May
Added link to my O'Reilly Programming blog post on demand for full stack
developer capabilities.
Updated APIs page with basic information on webhooks.
Added learning checklists for source control, application dependencies,
configuration management, NoSQL data stores, APIs, API integration,
API creation, static content and caching sections.
Moving learning checklists to the bottom of the pages since they are
specific advice for steps to take after reading a section.
Added a stub section for APIs.
Cleaned up and polished the task queues and web analytics pages.
Added learning checklist to operating systems, web servers, task queues,
monitoring pages and WSGI servers.
Adding more logging resources.
Continuing to add learning checklists to sections such as servers.
Moving navigation options into meta tags on markdown pages.
April
Adding the concept of "learning checklists" to web frameworks, Django, CSS
and JavaScript pages to give readers some guidance for how to learn each
topic. Will expand these checklists out into other pages over the next
couple of weeks.
Added an email sign up form to determine how many people are interested in
a full book since I've had a lot of requests in person to write one.
Added new resources to the other web frameworks section.
Updated the way choices to go from one page to another are generated. It's
now done off metadata instead of duplicated HTML content.
Huge site update to reorganize the way content is presented and navigated.
Kinda has that "choose your own adventure" thing going for it, doesn't it?
New logo! This one's way more Python software stack, way less boring
folder-thingy. Here's how the old one looked in comparison:
Added a
future direction
section to explain
current priorities for further developments on the site.
More resources for web frameworks and configuration management sections.
Added small JavaScript section. Updating witih basic resources.
Updated application dependencies with new links to Python library
collections.
Merged a couple of awesome pull requests that fixed typos and added
additional Bottle resources.
March
Updated logging page with new resources.
Added new CSS page.
New intermediate learning links on the best resources page.
Updated task queues page with better explanations and many more curated
resources.
Added why is this piece necessary for databases, WSGI servers, web
frameworks and application dependencies.
Updating best resources page with newsletters and a few additional beyond
the basics resources.
Adding 'why is this necessary' sections to servers, operating systems,
and web servers pages.
Extracting best Python resources from the introduction into a separate
page.
Cleaned up links on the first ten chapters and added new resources for
web frameworks.
Updated application dependencies section with new resources and initial
content description.
Updated the change log (how meta!) to have a cleaner layout.
February
Added Bottle as a web framework next to Django and Flask.
Added new Django resources.
New sitemap.xml.
Rewriting all sections to fix first draft typos and grammar mistakes
as well as add new content.
Added task queues section due to reader feedback.
Rewrote intro section.
Merged several pull requests (see closed
GitHub repo pull requests
).
New resources for platform-as-a-service section.
Added new sections specified by the community as missing.
Reorganized ordering of content.
Broke out subsections for Django and Flask.
Added signficant content to the WSGI section.
Converted from RST to Markdown (some of the downstream tools I want to
use work better with Markdown than RST).
Reorganized content into rough outline of "final" chapters.
January
Added configuration management, application dependencies, and source
control sections.
Updated about section.
Fully responsive web design.
2013
December
Changed CDN section to static content section.
Transitioned diagrams from Paper app drawings to Balsamiq mockups
exported to PNG files.
Added Python database connectors to database section.
November
Modified color scheme.
Updated caching and introduction section.
Added NoSQL data stores section.
October
Created separate monitoring section.
August
Added more resources for web servers and other categories.
June
Updated styling.
Switching around several sections.
January
Fleshed out web server, OS, and server sections, particularly IaaS
and PaaS topics.
Added initial "hand drawn" diagram placeholders for better diagrams later.
2012
December
Initial incomplete release on fullstackpython.com, created
introduction, CDN, web frameworks, and database sections with stubs for
other areas.
That's the history of FSP. What's next on your learning list?
What're the future plans for Full Stack Python?
Who created Full Stack Python?
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
» Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

About the Author - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
About the Author
Full Stack Python
is coded and written by
Matt Makai
. Matt currently
works in Washington, D.C. for the
Twilio Developer Network
as the Director of Developer Content.
Other projects by Matt include
Python for Entrepreneurs
,
Introduction to Ansible
,
Coding Across America
.
and
The Full Stack Python Guide to Deployments
,
You can reach him by email at
[email protected]
. Matt can't
respond to every email, but he will do his best to reply when possible.
Where to now?
Take me back to the Full Stack Python introduction.
What's new on Full Stack Python?
What are web application programming interfaces (APIs)?
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
» About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

What "Full Stack" Means - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
What "Full Stack" Means
The terms "full stack" and "Full Stack Python" are ambiguous but I am using
a specific definition here on this site. These term can be defined for a
web stack either to mean
Every layer, from the machine code up to the browser, are written in Python
Python code interacts with code written in other languages such as C and
JavaScript to provide a complete web stack
I named this site specifically for the second definition: Python is one
programming language among many that are used to build your application
stack.
Some folks took the title of the site to mean Python runs everything from
the web browser on down. That's simply not practical or possible. While Python
is an amazing programming language, there are many tasks it does not do well.
Python is just one language among many that allows our computers to execute
software and communicate with each other.
For beginners, learning the syntax and libraries in Python necessary to
build a web application or web API is a major undertaking. Even intermediate
and advanced Python software developers need to constantly program and learn
to keep up with our ever evolving ecosystem. I created Full Stack Python to
be just one of
many resources
that help Python
developers build and maintain their programming skills.
That's what "full stack" means. What do you want to learn next?
Who created Full Stack Python?
What're the future plans for Full Stack Python?
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
» What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Page Statuses - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Page Statuses
There are 205 pages on Full Stack Python, not including blog posts. Many
pages are a work-in-progress. This page aggregates the status of each page
on the site.
Each page can be in one of four levels of maturity:
Not yet created
Starter
Intermediate
Maintain
Pages are never technically "complete" because there will always be
the possibility of new sections and link maintenance. However, the
aspiration is for all pages to be fully-fleshed out and in the "Maintain"
category where they do not require additional information beyond being
kept up to date with accurate descriptions and resources.
Chapter 1: Introduction
Page
Status
Introduction
maintain
Learning Programming
maintain
The Python Language
maintain
Why Use Python?
maintain
Enterprise Python
maintain
Python Community
maintain
Companies Using Python
maintain
Best Python Resources
maintain
Must-watch Python Videos
maintain
Podcasts
maintain
Chapter 2: Development Environments
Page
Status
Development environments
maintain
Text Editors and IDEs
maintain
Vim
maintain
Emacs
maintain
Sublime Text
maintain
PyCharm
intermediate
Jupyter Notebook
maintain
Shells
starter
Bourne-again shell (Bash)
starter
Zsh
starter
PowerShell
starter
Terminal multiplexers
starter
tmux
starter
Screen
starter
Pymux
starter
Environment configuration
starter
Application dependencies
intermediate
virtualenvs
starter
Environment variables
starter
Localhost tunnels
starter
Source Control
intermediate
Git
starter
Mercurial
starter
Chapter 3: Data
Page
Status
Relational databases
intermediate
PostgreSQL
intermediate
MySQL
intermediate
SQLite
intermediate
ORMs
maintain
SQLAlchemy
intermediate
Peewee
starter
Django ORM
starter
SQLObject
starter
Pony ORM
starter
NoSQL
starter
Redis
starter
MongoDB
starter
Apache Cassandra
starter
Neo4j
starter
Data analysis
starter
pandas
starter
SciPy & NumPy
starter
Data visualization
not yet
Bokeh
starter
d3.js
starter
Matplotlib
starter
Markup Languages
not yet
Markdown
starter
reStructuredText
not yet
Chapter 4: Web Development
Page
Status
Web development
intermediate
Web frameworks
maintain
Django
intermediate
Flask
maintain
Bottle
intermediate
Pyramid
starter
Falcon
starter
Morepath
starter
Sanic
starter
Other web frameworks
intermediate
Template engines
maintain
Jinja2
intermediate
Mako
starter
Django templates
starter
Web design
starter
HTML
starter
CSS
starter
Responsive design
starter
Minification
starter
Testing
starter
Unit testing
starter
Integration testing
starter
Database testing
not yet
Code metrics
starter
Debugging
starter
Chapter 5: Web App Deployment
Page
Status
Deployment
intermediate
Chapter 6: DevOps
Page
Status
DevOps
starter
Monitoring
intermediate
Graphite
not yet
Prometheus
not yet
Service Canary
not yet
Rollbar
starter
Sentry
not yet
Scout
not yet
Web App Performance
not yet
Caching
starter
Load testing
not yet
Scaling
not yet
Logging
intermediate
stdlib logging
not yet
DTrace
not yet
logbook
not yet
Web analytics
starter
Google Analytics
not yet
Piwik
not yet
That's the status of each page. What do you want to learn next?
Who created Full Stack Python?
What's new on Full Stack Python?
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
» Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

Future Directions - Full Stack Python
Full Stack Python
All topics
|
Blog
|
Supporter's Edition
|
@fullstackpython
|
Facebook
|
What's new?
Future Directions
Full Stack Python has completely blown away my expectations for what I could
accomplish with a side project. I really appreciate all of the in-person
feedback, emails and pull requests I've received from the community. Keep
them coming!
For 2017 I am filling in the grayed-out topics on the
all topics
page. I will also address the
tactical fixes and improvements that need to be made which are listed
in the "tactical improvements" section below.
More updates
A huge update was released in the form of the
The Full Stack Python Guide to Deployments
,
a step-by-step tutorial book for learning how to deploy Python web
applications.
I also worked with Michael Kennedy of
Talk Python to Me
on our
Python for Entrepreneurs
video course. It's fully released right now!
Pull requests and fixes
Note that these plans can change based on
pull requests
from the community. I work to integrate PRs within a day or two so please
submit one when you see a fix or improvement that needs to be made!
Typos, inaccurate statements or general areas for improvement can also
be handled through an issue ticket or pull request on
GitHub
.
Page maturity
There are so many pages on Full Stack Python (as shown on the
all topics / table of contents page
)
that many are still in active development.
There are roughly one of four buckets of "maturity" a page could fall into:
Not yet created: some pages do not have a detailed page although
they will have one in the future. These pages are grayed out on
the table of contents.
Starter: a bare bones explanation with a few resources. For example,
Jupyter Notebook
and
Sublime Text
.
Intermediate: a page has explanations, more details on why it is
important along with additional context in multiple sections. Resources
are well-curated and each link is described in further detail.
Examples:
Jinja2
and
development environments
.
Stellar: a shining example of a well-written, detailed page that
contains numerous explanations and descriptions for the topic.
Where applicable there should be digrams and visualizations that augment
the text to help the reader better understand the topic.
There are also typically multiple categories of resources and links
for further research.
Examples:
Object-Relational Mappers (ORMs)
,
PostgreSQL
and
static site generators
.
Tactical improvements
Every page on Full Stack Python is a work-in-progress that can always
use improvements. The following items on this list need some love and
attention.
Update newer pages such as
AWS Lambda
,
Text editors and IDEs
and
Falcon
pages with additional sections and resources.
RQ
: Add "Comparing Celery and RQ" and
"when is RQ useful?" sections.
Celery
: Add graphics to show how Celeryd and Celerybeat
work. Also add section on comparing Celery to other task queues.
Apache Cassandra
: Add "why use cassandra?"
and "what is CQL?" sections.
MongoDB
: Add "why is mongodb useful?" and
"database drivers" sections.
Redis
: Add "why use redis?", "data drivers" sections.
Git
: Add "why use git?", "what is a distributed version
control system?", "what's the difference between git and github?" and
"git clients" sections.
That's what's coming soon. What do you want to learn now?
Who created Full Stack Python?
What's new on Full Stack Python?
Take me back to the Full Stack Python introduction.
Table of Contents
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
Future Directions
Page Statuses
...or view the full table of contents.
Full Stack Python
Full Stack Python
is an open book that explains concepts in plain language and provides
helpful resources for those topics.
Updates via
Twitter
&
Facebook
.
Chapters
1. Introduction
2. Development Environments
3. Data
4. Web Development
5. Deployment
6. DevOps
Changelog
What Full Stack Means
About the Author
» Future Directions
Page Statuses
...or view the full table of contents.
Matt Makai
2012-2022

